URL: https://docs.python.org/3/whatsnew/3.5.html

Title: What’s New In Python 3.5 — Python 3.5.2 documentation

Doc Id: 347

Meta Tags : No meta tag found in document

Date :Jul 29, 2016

Content :This article explains the new features in Python 3.5, compared to 3.4.
Python 3.5 was released on September 13, 2015.  See the
changelog for a full
list of changes.
See also
PEP 478 - Python 3.5 Release Schedule
New syntax features:
New library modules:
New built-in features:
CPython implementation improvements:
Significant improvements in the standard library:
Security improvements:
Windows improvements:
Please read on for a comprehensive list of user-facing changes, including many
other smaller improvements, CPython optimizations, deprecations, and potential
porting issues.
PEP 492 greatly improves support for asynchronous programming in Python
by adding awaitable objects,
coroutine functions,
asynchronous iteration,
and asynchronous context managers.
Coroutine functions are declared using the new async def syntax:
Inside a coroutine function, the new await expression can be used
to suspend coroutine execution until the result is available.  Any object
can be awaited, as long as it implements the awaitable protocol by
defining the __await__() method.
PEP 492 also adds async for statement for convenient iteration
over asynchronous iterables.
An example of a rudimentary HTTP client written using the new syntax:
Similarly to asynchronous iteration, there is a new syntax for asynchronous
context managers.  The following script:
will output:
Note that both async for and async with can only
be used inside a coroutine function declared with async def.
Coroutine functions are intended to be run inside a compatible event loop,
such as the asyncio loop.
Note
Changed in version 3.5.2: Starting with CPython 3.5.2, __aiter__ can directly return
asynchronous iterators.  Returning
an awaitable object will result in a
PendingDeprecationWarning.
See more details in the Asynchronous Iterators documentation
section.
See also
PEP 465 adds the @ infix operator for matrix multiplication.
Currently, no builtin Python types implement the new operator, however, it
can be implemented by defining __matmul__(), __rmatmul__(),
and __imatmul__() for regular, reflected, and in-place matrix
multiplication.  The semantics of these methods is similar to that of
methods defining other infix arithmetic operators.
Matrix multiplication is a notably common operation in many fields of
mathematics, science, engineering, and the addition of @ allows writing
cleaner code:
instead of:
NumPy 1.10 has support for the new operator:
See also
PEP 448 extends the allowed uses of the * iterable unpacking
operator and ** dictionary unpacking operator.  It is now possible
to use an arbitrary number of unpackings in function calls:
Similarly, tuple, list, set, and dictionary displays allow multiple
unpackings (see Expression lists and Dictionary displays):
See also
PEP 461 adds support for the %
interpolation operator to bytes
and bytearray.
While interpolation is usually thought of as a string operation, there are
cases where interpolation on bytes or bytearrays makes sense, and the
work needed to make up for this missing functionality detracts from the
overall readability of the code.  This issue is particularly important when
dealing with wire format protocols, which are often a mixture of binary
and ASCII compatible text.
Examples:
Unicode is not allowed for %b, but it is accepted by %a (equivalent of
repr(obj).encode('ascii', 'backslashreplace')):
Note that %s and %r conversion types, although supported, should
only be used in codebases that need compatibility with Python 2.
See also
Function annotation syntax has been a Python feature since version 3.0
(PEP 3107), however the semantics of annotations has been left undefined.
Experience has shown that the majority of function annotation
uses were to provide type hints to function parameters and return values.  It
became evident that it would be beneficial for Python users, if the
standard library included the base definitions and tools for type annotations.
PEP 484 introduces a provisional module to
provide these standard definitions and tools, along with some conventions
for situations where annotations are not available.
For example, here is a simple function whose argument and return type
are declared in the annotations:
While these annotations are available at runtime through the usual
__annotations__ attribute, no automatic type checking happens at
runtime.  Instead, it is assumed that a separate off-line type checker
(e.g. mypy) will be used for on-demand
source code analysis.
The type system supports unions, generic types, and a special type
named Any which is consistent with (i.e. assignable to
and from) all types.
See also
typing module documentation
PEP written by Guido van Rossum, Jukka Lehtosalo, and Łukasz Langa;
implemented by Guido van Rossum.
PEP written by Guido van Rossum
PEP 471 adds a new directory iteration function, os.scandir(),
to the standard library.  Additionally, os.walk() is now
implemented using scandir, which makes it 3 to 5 times faster
on POSIX systems and 7 to 20 times faster on Windows systems.  This is
largely achieved by greatly reducing the number of calls to os.stat()
required to walk a directory tree.
Additionally, scandir returns an iterator, as opposed to returning
a list of file names, which improves memory efficiency when iterating
over very large directories.
The following example shows a simple use of os.scandir() to display all
the files (excluding directories) in the given path that don’t start with
'.'. The entry.is_file() call will generally
not make an additional system call:
See also
An errno.EINTR error code is returned whenever a system call, that
is waiting for I/O, is interrupted by a signal.  Previously, Python would
raise InterruptedError in such cases.  This meant that, when writing a
Python application, the developer had two choices:
The first option makes an application fail intermittently.
The second option adds a large amount of boilerplate that makes the
code nearly unreadable.  Compare:
and:
PEP 475 implements automatic retry of system calls on
EINTR.  This removes the burden of dealing with EINTR
or InterruptedError in user code in most situations and makes
Python programs, including the standard library, more robust.  Note that
the system call is only retried if the signal handler does not raise an
exception.
Below is a list of functions which are now retried when interrupted
by a signal:
See also
The interaction of generators and StopIteration in Python 3.4 and
earlier was sometimes surprising, and could conceal obscure bugs.  Previously,
StopIteration raised accidentally inside a generator function was
interpreted as the end of the iteration by the loop construct driving the
generator.
PEP 479 changes the behavior of generators: when a StopIteration
exception is raised inside a generator, it is replaced with a
RuntimeError before it exits the generator frame.  The main goal of
this change is to ease debugging in the situation where an unguarded
next() call raises StopIteration and causes the iteration controlled
by the generator to terminate silently. This is particularly pernicious in
combination with the yield from construct.
This is a backwards incompatible change, so to enable the new behavior,
a __future__ import is necessary:
Without a __future__ import, a PendingDeprecationWarning will be
raised whenever a StopIteration exception is raised inside a generator.
See also
PEP 485 adds the math.isclose() and cmath.isclose()
functions which tell whether two values are approximately equal or
“close” to each other.  Whether or not two values are considered
close is determined according to given absolute and relative tolerances.
Relative tolerance is the maximum allowed difference between isclose
arguments, relative to the larger absolute value:
It is also possible to compare two values using absolute tolerance, which
must be a non-negative value:
See also
PEP 486 makes the Windows launcher (see PEP 397) aware of an active
virtual environment. When the default interpreter would be used and the
VIRTUAL_ENV environment variable is set, the interpreter in the virtual
environment will be used.
See also
PEP 488 does away with the concept of .pyo files. This means that
.pyc files represent both unoptimized and optimized bytecode. To prevent the
need to constantly regenerate bytecode files, .pyc files now have an
optional opt- tag in their name when the bytecode is optimized. This has the
side-effect of no more bytecode file name clashes when running under either
-O or -OO. Consequently, bytecode files generated from
-O, and -OO may now exist simultaneously.
importlib.util.cache_from_source() has an updated API to help with
this change.
See also
PEP 489 updates extension module initialization to take advantage of the
two step module loading mechanism introduced by PEP 451 in Python 3.4.
This change brings the import semantics of extension modules that opt-in to
using the new mechanism much closer to those of Python source and bytecode
modules, including the ability to use any valid identifier as a module name,
rather than being restricted to ASCII.
See also
Some smaller changes made to the core Python language are:
The new typing provisional module
provides standard definitions and tools for function type annotations.
See Type Hints for more information.
The new zipapp module (specified in PEP 441) provides an API and
command line tool for creating executable Python Zip Applications, which
were introduced in Python 2.6 in issue 1739468, but which were not well
publicized, either at the time or since.
With the new module, bundling your application is as simple as putting all
the files, including a __main__.py file, into a directory myapp
and running:
The module implementation has been contributed by Paul Moore in
issue 23491.
See also
PEP 441 – Improving Python ZIP Application Support
The ArgumentParser class now allows disabling
abbreviated usage of long options by setting
allow_abbrev to False.  (Contributed by Jonathan Paugh,
Steven Bethard, paul j3 and Daniel Eriksson in issue 14910.)
Since the asyncio module is provisional,
all changes introduced in Python 3.5 have also been backported to Python 3.4.x.
Notable changes in the asyncio module since Python 3.4.0:
Updates in 3.5.1:
Updates in 3.5.2:
The BZ2Decompressor.decompress
method now accepts an optional max_length argument to limit the maximum
size of decompressed data. (Contributed by Nikolaus Rath in issue 15955.)
The FieldStorage class now supports the context manager
protocol.  (Contributed by Berker Peksag in issue 20289.)
A new function isclose() provides a way to test for approximate
equality.  (Contributed by Chris Barker and Tal Einat in issue 24270.)
The InteractiveInterpreter.showtraceback()
method now prints the full chained traceback, just like the interactive
interpreter.  (Contributed by Claudiu Popa in issue 17442.)
The OrderedDict class is now implemented in C, which
makes it 4 to 100 times faster.  (Contributed by Eric Snow in issue 16991.)
OrderedDict.items(),
OrderedDict.keys(),
OrderedDict.values() views now support
reversed() iteration.
(Contributed by Serhiy Storchaka in issue 19505.)
The deque class now defines
index(), insert(), and
copy(), and supports the + and * operators.
This allows deques to be recognized as a MutableSequence
and improves their substitutability for lists.
(Contributed by Raymond Hettinger in issue 23704.)
Docstrings produced by namedtuple() can now be updated:
(Contributed by Berker Peksag in issue 24064.)
The UserString class now implements the
__getnewargs__(), __rmod__(), casefold(),
format_map(), isprintable(), and maketrans()
methods to match the corresponding methods of str.
(Contributed by Joe Jevnik in issue 22189.)
The Sequence.index() method now
accepts start and stop arguments to match the corresponding methods
of tuple, list, etc.
(Contributed by Devin Jeanpierre in issue 23086.)
A new Generator abstract base class. (Contributed
by Stefan Behnel in issue 24018.)
New Awaitable, Coroutine,
AsyncIterator, and
AsyncIterable abstract base classes.
(Contributed by Yury Selivanov in issue 24184.)
For earlier Python versions, a backport of the new ABCs is available in an
external PyPI package.
A new compileall option, -j N, allows running N workers
simultaneously to perform parallel bytecode compilation.
The compile_dir() function has a corresponding workers
parameter.  (Contributed by Claudiu Popa in issue 16104.)
Another new option, -r, allows controlling the maximum recursion
level for subdirectories.  (Contributed by Claudiu Popa in issue 19628.)
The -q command line option can now be specified more than once, in
which case all output, including errors, will be suppressed.  The corresponding
quiet parameter in compile_dir(),
compile_file(), and compile_path() can now
accept an integer value indicating the level of output suppression.
(Contributed by Thomas Kluyver in issue 21338.)
The Executor.map() method now accepts a
chunksize argument to allow batching of tasks to improve performance when
ProcessPoolExecutor() is used.
(Contributed by Dan O’Reilly in issue 11271.)
The number of workers in the ThreadPoolExecutor
constructor is optional now.  The default value is 5 times the number of CPUs.
(Contributed by Claudiu Popa in issue 21527.)
configparser now provides a way to customize the conversion
of values by specifying a dictionary of converters in the
ConfigParser constructor, or by defining them
as methods in ConfigParser subclasses.  Converters defined in
a parser instance are inherited by its section proxies.
Example:
(Contributed by Łukasz Langa in issue 18159.)
The new redirect_stderr() context manager (similar to
redirect_stdout()) makes it easier for utility scripts to
handle inflexible APIs that write their output to sys.stderr and
don’t provide any options to redirect it:
(Contributed by Berker Peksag in issue 22389.)
The writerow() method now supports arbitrary iterables,
not just sequences.  (Contributed by Serhiy Storchaka in issue 23171.)
The new update_lines_cols() function updates the LINES
and COLS environment variables.  This is useful for detecting
manual screen resizing.  (Contributed by Arnon Yaari in issue 4254.)
dumb.open always creates a new database when the flag
has the value "n".  (Contributed by Claudiu Popa in issue 18039.)
The charset of HTML documents generated by
HtmlDiff.make_file()
can now be customized by using a new charset keyword-only argument.
The default charset of HTML document changed from "ISO-8859-1"
to "utf-8".
(Contributed by Berker Peksag in issue 2052.)
The diff_bytes() function can now compare lists of byte
strings.  This fixes a regression from Python 2.
(Contributed by Terry J. Reedy and Greg Ward in issue 17445.)
Both the build and build_ext commands now accept a -j option to
enable parallel building of extension modules.
(Contributed by Antoine Pitrou in issue 5309.)
The distutils module now supports xz compression, and can be
enabled by passing xztar as an argument to bdist --format.
(Contributed by Serhiy Storchaka in issue 16314.)
The DocTestSuite() function returns an empty
unittest.TestSuite if module contains no docstrings, instead of
raising ValueError.  (Contributed by Glenn Jones in issue 15916.)
A new policy option Policy.mangle_from_
controls whether or not lines that start with "From " in email bodies are
prefixed with a ">" character by generators.  The default is True for
compat32 and False for all other policies.
(Contributed by Milan Oberkirch in issue 20098.)
A new
Message.get_content_disposition()
method provides easy access to a canonical value for the
Content-Disposition header.
(Contributed by Abhilash Raj in issue 21083.)
A new policy option EmailPolicy.utf8
can be set to True to encode email headers using the UTF-8 charset instead
of using encoded words.  This allows Messages to be formatted according to
RFC 6532 and used with an SMTP server that supports the RFC 6531
SMTPUTF8 extension.  (Contributed by R. David Murray in
issue 24211.)
The mime.text.MIMEText constructor now
accepts a charset.Charset instance.
(Contributed by Claude Paroz and Berker Peksag in issue 16324.)
The Enum callable has a new parameter start to
specify the initial number of enum values if only names are provided:
(Contributed by Ethan Furman in issue 21706.)
The enable(), register(),
dump_traceback() and
dump_traceback_later() functions now accept file
descriptors in addition to file-like objects.
(Contributed by Wei Wu in issue 23566.)
Most of the lru_cache() machinery is now implemented in C, making
it significantly faster.  (Contributed by Matt Joiner, Alexey Kachayev, and
Serhiy Storchaka in issue 14373.)
The iglob() and glob() functions now support recursive
search in subdirectories, using the "**" pattern.
(Contributed by Serhiy Storchaka in issue 13968.)
The mode argument of the GzipFile constructor now
accepts "x" to request exclusive creation.
(Contributed by Tim Heaney in issue 19222.)
Element comparison in merge() can now be customized by
passing a key function in a new optional key keyword argument,
and a new optional reverse keyword argument can be used to reverse element
comparison:
(Contributed by Raymond Hettinger in issue 13742.)
A new HTTPStatus enum that defines a set of
HTTP status codes, reason phrases and long descriptions written in English.
(Contributed by Demian Brecht in issue 21793.)
HTTPConnection.getresponse()
now raises a RemoteDisconnected exception when a
remote server connection is closed unexpectedly.  Additionally, if a
ConnectionError (of which RemoteDisconnected
is a subclass) is raised, the client socket is now closed automatically,
and will reconnect on the next request:
(Contributed by Martin Panter in issue 3566.)
Since idlelib implements the IDLE shell and editor and is not intended for
import by other programs, it gets improvements with every release.  See
Lib/idlelib/NEWS.txt for a cumulative list of changes since 3.4.0,
as well as changes made in future 3.5.x releases. This file is also available
from the IDLE Help ‣ About IDLE dialog.
The IMAP4 class now supports the context manager protocol.
When used in a with statement, the IMAP4 LOGOUT
command will be called automatically at the end of the block.
(Contributed by Tarek Ziadé and Serhiy Storchaka in issue 4972.)
The imaplib module now supports RFC 5161 (ENABLE Extension)
and RFC 6855 (UTF-8 Support) via the IMAP4.enable()
method.  A new IMAP4.utf8_enabled
attribute tracks whether or not RFC 6855 support is enabled.
(Contributed by Milan Oberkirch, R. David Murray, and Maciej Szulik in
issue 21800.)
The imaplib module now automatically encodes non-ASCII string usernames
and passwords using UTF-8, as recommended by the RFCs.  (Contributed by Milan
Oberkirch in issue 21800.)
The what() function now recognizes the
OpenEXR format
(contributed by Martin Vignali and Claudiu Popa in issue 20295),
and the WebP format
(contributed by Fabrice Aneche and Claudiu Popa in issue 20197.)
The util.LazyLoader class allows for
lazy loading of modules in applications where startup time is important.
(Contributed by Brett Cannon in issue 17621.)
The abc.InspectLoader.source_to_code()
method is now a static method.  This makes it easier to initialize a module
object with code compiled from a string by running
exec(code, module.__dict__).
(Contributed by Brett Cannon in issue 21156.)
The new util.module_from_spec()
function is now the preferred way to create a new module.  As opposed to
creating a types.ModuleType instance directly, this new function
will set the various import-controlled attributes based on the passed-in
spec object.  (Contributed by Brett Cannon in issue 20383.)
Both the Signature and Parameter classes are
now picklable and hashable.  (Contributed by Yury Selivanov in issue 20726
and issue 20334.)
A new
BoundArguments.apply_defaults()
method provides a way to set default values for missing arguments:
(Contributed by Yury Selivanov in issue 24190.)
A new class method
Signature.from_callable() makes
subclassing of Signature easier.  (Contributed
by Yury Selivanov and Eric Snow in issue 17373.)
The signature() function now accepts a follow_wrapped
optional keyword argument, which, when set to False, disables automatic
following of __wrapped__ links.
(Contributed by Yury Selivanov in issue 20691.)
A set of new functions to inspect
coroutine functions and
coroutine objects has been added:
iscoroutine(), iscoroutinefunction(),
isawaitable(), getcoroutinelocals(),
and getcoroutinestate().
(Contributed by Yury Selivanov in issue 24017 and issue 24400.)
The stack(), trace(),
getouterframes(), and getinnerframes()
functions now return a list of named tuples.
(Contributed by Daniel Shahaf in issue 16808.)
A new BufferedIOBase.readinto1()
method, that uses at most one call to the underlying raw stream’s
RawIOBase.read() or
RawIOBase.readinto() methods.
(Contributed by Nikolaus Rath in issue 20578.)
Both the IPv4Network and IPv6Network classes
now accept an (address, netmask) tuple argument, so as to easily construct
network objects from existing addresses:
(Contributed by Peter Moody and Antoine Pitrou in issue 16531.)
A new reverse_pointer attribute for the
IPv4Network and IPv6Network classes
returns the name of the reverse DNS PTR record:
(Contributed by Leon Weber in issue 20480.)
The json.tool command line interface now preserves the order of keys in
JSON objects passed in input.  The new --sort-keys option can be used
to sort the keys alphabetically. (Contributed by Berker Peksag
in issue 21650.)
JSON decoder now raises JSONDecodeError instead of
ValueError to provide better context information about the error.
(Contributed by Serhiy Storchaka in issue 19361.)
A new lazycache() function can be used to capture information
about a non-file-based module to permit getting its lines later via
getline(). This avoids doing I/O until a line is actually
needed, without having to carry the module globals around indefinitely.
(Contributed by Robert Collins in issue 17911.)
A new delocalize() function can be used to convert a string into
a normalized number string, taking the LC_NUMERIC settings into account:
(Contributed by Cédric Krier in issue 13918.)
All logging methods (Logger log(),
exception(), critical(),
debug(), etc.), now accept exception instances
as an exc_info argument, in addition to boolean values and exception
tuples:
(Contributed by Yury Selivanov in issue 20537.)
The handlers.HTTPHandler class now
accepts an optional ssl.SSLContext instance to configure SSL
settings used in an HTTP connection.
(Contributed by Alex Gaynor in issue 22788.)
The handlers.QueueListener class now
takes a respect_handler_level keyword argument which, if set to True,
will pass messages to handlers taking handler levels into account.
(Contributed by Vinay Sajip.)
The LZMADecompressor.decompress()
method now accepts an optional max_length argument to limit the maximum
size of decompressed data.
(Contributed by Martin Panter in issue 15955.)
Two new constants have been added to the math module: inf
and nan.  (Contributed by Mark Dickinson in issue 23185.)
A new function isclose() provides a way to test for approximate
equality. (Contributed by Chris Barker and Tal Einat in issue 24270.)
A new gcd() function has been added.  The fractions.gcd()
function is now deprecated. (Contributed by Mark Dickinson and Serhiy
Storchaka in issue 22486.)
sharedctypes.synchronized()
objects now support the context manager protocol.
(Contributed by Charles-François Natali in issue 21565.)
attrgetter(), itemgetter(),
and methodcaller() objects now support pickling.
(Contributed by Josh Rosenberg and Serhiy Storchaka in issue 22955.)
New matmul() and imatmul() functions
to perform matrix multiplication.
(Contributed by Benjamin Peterson in issue 21176.)
The new scandir() function returning an iterator of
DirEntry objects has been added.  If possible, scandir()
extracts file attributes while scanning a directory, removing the need to
perform subsequent system calls to determine file type or attributes, which may
significantly improve performance.  (Contributed by Ben Hoyt with the help
of Victor Stinner in issue 22524.)
On Windows, a new
stat_result.st_file_attributes
attribute is now available.  It corresponds to the dwFileAttributes member
of the BY_HANDLE_FILE_INFORMATION structure returned by
GetFileInformationByHandle().  (Contributed by Ben Hoyt in issue 21719.)
The urandom() function now uses the getrandom() syscall on Linux 3.17
or newer, and getentropy() on OpenBSD 5.6 and newer, removing the need to
use /dev/urandom and avoiding failures due to potential file descriptor
exhaustion.  (Contributed by Victor Stinner in issue 22181.)
New get_blocking() and set_blocking() functions allow
getting and setting a file descriptor’s blocking mode (O_NONBLOCK.)
(Contributed by Victor Stinner in issue 22054.)
The truncate() and ftruncate() functions are now supported
on Windows.  (Contributed by Steve Dower in issue 23668.)
There is a new os.path.commonpath() function returning the longest
common sub-path of each passed pathname.  Unlike the
os.path.commonprefix() function, it always returns a valid
path:
(Contributed by Rafik Draoui and Serhiy Storchaka in issue 10395.)
The new Path.samefile() method can be used
to check whether the path points to the same file as another path, which can
be either another Path object, or a string:
(Contributed by Vajrasky Kok and Antoine Pitrou in issue 19775.)
The Path.mkdir() method now accepts a new optional
exist_ok argument to match mkdir -p and os.makedirs()
functionality.  (Contributed by Berker Peksag in issue 21539.)
There is a new Path.expanduser() method to
expand ~ and ~user prefixes.  (Contributed by Serhiy Storchaka and
Claudiu Popa in issue 19776.)
A new Path.home() class method can be used to get
a Path instance representing the user’s home
directory.
(Contributed by Victor Salgado and Mayank Tripathi in issue 19777.)
New Path.write_text(),
Path.read_text(),
Path.write_bytes(),
Path.read_bytes() methods to simplify
read/write operations on files.
The following code snippet will create or rewrite existing file
~/spam42:
(Contributed by Christopher Welborn in issue 20218.)
Nested objects, such as unbound methods or nested classes, can now be pickled
using pickle protocols older than protocol version 4.
Protocol version 4 already supports these cases.  (Contributed by Serhiy
Storchaka in issue 23611.)
A new POP3.utf8() command enables RFC 6856
(Internationalized Email) support, if a POP server supports it.
(Contributed by Milan OberKirch in issue 21804.)
References and conditional references to groups with fixed length are now
allowed in lookbehind assertions:
(Contributed by Serhiy Storchaka in issue 9179.)
The number of capturing groups in regular expressions is no longer limited to
100.  (Contributed by Serhiy Storchaka in issue 22437.)
The sub() and subn() functions now replace unmatched
groups with empty strings instead of raising an exception.
(Contributed by Serhiy Storchaka in issue 1519638.)
The re.error exceptions have new attributes,
msg, pattern,
pos, lineno,
and colno, that provide better context
information about the error:
(Contributed by Serhiy Storchaka in issue 22578.)
A new append_history_file() function can be used to append
the specified number of trailing elements in history to the given file.
(Contributed by Bruno Cauet in issue 22940.)
The new DevpollSelector supports efficient
/dev/poll polling on Solaris.
(Contributed by Giampaolo Rodola’ in issue 18931.)
The move() function now accepts a copy_function argument,
allowing, for example, the copy() function to be used instead of
the default copy2() if there is a need to ignore file metadata
when moving.
(Contributed by Claudiu Popa in issue 19840.)
The make_archive() function now supports the xztar format.
(Contributed by Serhiy Storchaka in issue 5411.)
On Windows, the set_wakeup_fd() function now also supports
socket handles.  (Contributed by Victor Stinner in issue 22018.)
Various SIG* constants in the signal module have been converted into
Enums.  This allows meaningful names to be printed
during debugging, instead of integer “magic numbers”.
(Contributed by Giampaolo Rodola’ in issue 21076.)
Both the SMTPServer and SMTPChannel classes now
accept a decode_data keyword argument to determine if the DATA portion of
the SMTP transaction is decoded using the "utf-8" codec or is instead
provided to the
SMTPServer.process_message()
method as a byte string.  The default is True for backward compatibility
reasons, but will change to False in Python 3.6.  If decode_data is set
to False, the process_message method must be prepared to accept keyword
arguments.
(Contributed by Maciej Szulik in issue 19662.)
The SMTPServer class now advertises the 8BITMIME extension
(RFC 6152) if decode_data has been set True.  If the client
specifies BODY=8BITMIME on the MAIL command, it is passed to
SMTPServer.process_message()
via the mail_options keyword.
(Contributed by Milan Oberkirch and R.  David Murray in issue 21795.)
The SMTPServer class now also supports the SMTPUTF8
extension (RFC 6531: Internationalized Email).  If the client specified
SMTPUTF8 BODY=8BITMIME on the MAIL command, they are passed to
SMTPServer.process_message()
via the mail_options keyword.  It is the responsibility of the
process_message method to correctly handle the SMTPUTF8 data.
(Contributed by Milan Oberkirch in issue 21725.)
It is now possible to provide, directly or via name resolution, IPv6
addresses in the SMTPServer constructor, and have it
successfully connect.  (Contributed by Milan Oberkirch in issue 14758.)
A new SMTP.auth() method provides a convenient way to
implement custom authentication mechanisms. (Contributed by Milan
Oberkirch in issue 15014.)
The SMTP.set_debuglevel() method now
accepts an additional debuglevel (2), which enables timestamps in debug
messages. (Contributed by Gavin Chappell and Maciej Szulik in issue 16914.)
Both the SMTP.sendmail() and
SMTP.send_message() methods now
support RFC 6531 (SMTPUTF8).
(Contributed by Milan Oberkirch and R. David Murray in issue 22027.)
The what() and whathdr() functions  now return
a namedtuple().  (Contributed by Claudiu Popa in
issue 18615.)
Functions with timeouts now use a monotonic clock, instead of a system clock.
(Contributed by Victor Stinner in issue 22043.)
A new socket.sendfile() method allows
sending a file over a socket by using the high-performance os.sendfile()
function on UNIX, resulting in uploads being from 2 to 3 times faster than when
using plain socket.send().
(Contributed by Giampaolo Rodola’ in issue 17552.)
The socket.sendall() method no longer resets the
socket timeout every time bytes are received or sent.  The socket timeout is
now the maximum total duration to send all data.
(Contributed by Victor Stinner in issue 23853.)
The backlog argument of the socket.listen()
method is now optional.  By default it is set to
SOMAXCONN or to 128, whichever is less.
(Contributed by Charles-François Natali in issue 21455.)
(Contributed by Geert Jansen in issue 21965.)
The new SSLObject class has been added to provide SSL protocol
support for cases when the network I/O capabilities of SSLSocket
are not necessary or are suboptimal.  SSLObject represents
an SSL protocol instance, but does not implement any network I/O methods, and
instead provides a memory buffer interface.  The new MemoryBIO
class can be used to pass data between Python and an SSL protocol instance.
The memory BIO SSL support is primarily intended to be used in frameworks
implementing asynchronous I/O for which SSLSocket‘s readiness
model (“select/poll”) is inefficient.
A new SSLContext.wrap_bio() method can be used
to create a new SSLObject instance.
(Contributed by Benjamin Peterson in issue 20188.)
Where OpenSSL support is present, the ssl module now implements
the Application-Layer Protocol Negotiation TLS extension as described
in RFC 7301.
The new SSLContext.set_alpn_protocols()
can be used to specify which protocols a socket should advertise during
the TLS handshake.
The new
SSLSocket.selected_alpn_protocol()
returns the protocol that was selected during the TLS handshake.
The HAS_ALPN flag indicates whether ALPN support is present.
There is a new SSLSocket.version() method to
query the actual protocol version in use.
(Contributed by Antoine Pitrou in issue 20421.)
The SSLSocket class now implements
a SSLSocket.sendfile() method.
(Contributed by Giampaolo Rodola’ in issue 17552.)
The SSLSocket.send() method now raises either
the ssl.SSLWantReadError or ssl.SSLWantWriteError exception on a
non-blocking socket if the operation would block. Previously, it would return
0.  (Contributed by Nikolaus Rath in issue 20951.)
The cert_time_to_seconds() function now interprets the input time
as UTC and not as local time, per RFC 5280.  Additionally, the return
value is always an int. (Contributed by Akira Li in issue 19940.)
New SSLObject.shared_ciphers() and
SSLSocket.shared_ciphers() methods return
the list of ciphers sent by the client during the handshake.
(Contributed by Benjamin Peterson in issue 23186.)
The SSLSocket.do_handshake(),
SSLSocket.read(),
SSLSocket.shutdown(), and
SSLSocket.write() methods of the SSLSocket
class no longer reset the socket timeout every time bytes are received or sent.
The socket timeout is now the maximum total duration of the method.
(Contributed by Victor Stinner in issue 23853.)
The match_hostname() function now supports matching of IP addresses.
(Contributed by Antoine Pitrou in issue 23239.)
The Row class now fully supports the sequence protocol,
in particular reversed() iteration and slice indexing.
(Contributed by Claudiu Popa in issue 10203; by Lucas Sinclair,
Jessica McKellar, and  Serhiy Storchaka in issue 13583.)
The new run() function has been added.
It runs the specified command and returns a
CompletedProcess object, which describes a finished
process.  The new API is more consistent and is the recommended approach
to invoking subprocesses in Python code that does not need to maintain
compatibility with earlier Python versions.
(Contributed by Thomas Kluyver in issue 23342.)
Examples:
A new set_coroutine_wrapper() function allows setting a global
hook that will be called whenever a coroutine object
is created by an async def function.  A corresponding
get_coroutine_wrapper() can be used to obtain a currently set
wrapper.  Both functions are provisional,
and are intended for debugging purposes only.  (Contributed by Yury Selivanov
in issue 24017.)
A new is_finalizing() function can be used to check if the Python
interpreter is shutting down.
(Contributed by Antoine Pitrou in issue 22696.)
The name of the user scripts directory on Windows now includes the first
two components of the Python version. (Contributed by Paul Moore
in issue 23437.)
The mode argument of the open() function now accepts "x"
to request exclusive creation.  (Contributed by Berker Peksag in issue 21717.)
The TarFile.extractall() and
TarFile.extract() methods now take a keyword
argument numeric_only.  If set to True, the extracted files and
directories will be owned by the numeric uid and gid from the tarfile.
If set to False (the default, and the behavior in versions prior to 3.5),
they will be owned by the named user and group in the tarfile.
(Contributed by Michael Vogt and Eric Smith in issue 23193.)
The TarFile.list() now accepts an optional
members keyword argument that can be set to a subset of the list returned
by TarFile.getmembers().
(Contributed by Serhiy Storchaka in issue 21549.)
Both the Lock.acquire() and
RLock.acquire() methods
now use a monotonic clock for timeout management.
(Contributed by Victor Stinner in issue 22043.)
The monotonic() function is now always available.
(Contributed by Victor Stinner in issue 22043.)
A new command line option -u or --unit=U can be used to specify the time
unit for the timer output.  Supported options are usec, msec,
or sec.  (Contributed by Julian Gindi in issue 18983.)
The timeit() function has a new globals parameter for
specifying the namespace in which the code will be running.
(Contributed by Ben Roberts in issue 2527.)
The tkinter._fix module used for setting up the Tcl/Tk environment
on Windows has been replaced by a private function in the _tkinter
module which makes no permanent changes to environment variables.
(Contributed by Zachary Ware in issue 20035.)
New walk_stack() and walk_tb()
functions to conveniently traverse frame and traceback objects.
(Contributed by Robert Collins in issue 17911.)
New lightweight classes: TracebackException,
StackSummary, and FrameSummary.
(Contributed by Robert Collins in issue 17911.)
Both the print_tb() and print_stack() functions
now support negative values for the limit argument.
(Contributed by Dmitry Kazakov in issue 22619.)
A new coroutine() function to transform
generator and
generator-like objects into
awaitables.
(Contributed by Yury Selivanov in issue 24017.)
A new type called CoroutineType, which is used for
coroutine objects created by async def functions.
(Contributed by Yury Selivanov in issue 24400.)
The unicodedata module now uses data from Unicode 8.0.0.
The TestLoader.loadTestsFromModule()
method now accepts a keyword-only argument pattern which is passed to
load_tests as the third argument.  Found packages are now checked for
load_tests regardless of whether their path matches pattern, because it
is impossible for a package name to match the default pattern.
(Contributed by Robert Collins and Barry A. Warsaw in issue 16662.)
Unittest discovery errors now are exposed in the
TestLoader.errors attribute of the
TestLoader instance.
(Contributed by Robert Collins in issue 19746.)
A new command line option --locals to show local variables in
tracebacks.  (Contributed by Robert Collins in issue 22936.)
The Mock class has the following improvements:
The MagicMock class now supports __truediv__(),
__divmod__() and __matmul__() operators.
(Contributed by Johannes Baiter in issue 20968, and Håkan Lövdahl
in issue 23581 and issue 23568.)
It is no longer necessary to explicitly pass create=True to the
patch() function when patching builtin names.
(Contributed by Kushal Das in issue 17660.)
A new
request.HTTPPasswordMgrWithPriorAuth
class allows HTTP Basic Authentication credentials to be managed so as to
eliminate unnecessary 401 response handling, or to unconditionally send
credentials on the first request in order to communicate with servers that
return a 404 response instead of a 401 if the Authorization header
is not sent. (Contributed by Matej Cepl in issue 19494 and Akshit Khurana in
issue 7159.)
A new quote_via argument for the
parse.urlencode()
function provides a way to control the encoding of query parts if needed.
(Contributed by Samwyse and Arnon Yaari in issue 13866.)
The request.urlopen() function accepts an
ssl.SSLContext object as a context argument, which will be used for
the HTTPS connection.  (Contributed by Alex Gaynor in issue 22366.)
The parse.urljoin() was updated to use the
RFC 3986 semantics for the resolution of relative URLs, rather than
RFC 1808 and RFC 2396.
(Contributed by Demian Brecht and Senthil Kumaran in issue 22118.)
The headers argument of the headers.Headers
class constructor is now optional.
(Contributed by Pablo Torres Navarrete and SilentGhost in issue 5800.)
The client.ServerProxy class now supports
the context manager protocol.
(Contributed by Claudiu Popa in issue 20627.)
The client.ServerProxy constructor now accepts
an optional ssl.SSLContext instance.
(Contributed by Alex Gaynor in issue 22960.)
SAX parsers now support a character stream of the
xmlreader.InputSource object.
(Contributed by Serhiy Storchaka in issue 2175.)
parseString() now accepts a str instance.
(Contributed by Serhiy Storchaka in issue 10590.)
ZIP output can now be written to unseekable streams.
(Contributed by Serhiy Storchaka in issue 23252.)
The mode argument of ZipFile.open() method now
accepts "x" to request exclusive creation.
(Contributed by Serhiy Storchaka in issue 21717.)
Many functions in the mmap, ossaudiodev, socket,
ssl, and codecs modules now accept writable
bytes-like objects.
(Contributed by Serhiy Storchaka in issue 23001.)
The os.walk() function has been sped up by 3 to 5 times on POSIX systems,
and by 7 to 20 times on Windows.  This was done using the new os.scandir()
function, which exposes file information from the underlying readdir or
FindFirstFile/FindNextFile system calls.  (Contributed by
Ben Hoyt with help from Victor Stinner in issue 23605.)
Construction of bytes(int) (filled by zero bytes) is faster and uses less
memory for large objects. calloc() is used instead of malloc() to
allocate memory for these objects.
(Contributed by Victor Stinner in issue 21233.)
Some operations on ipaddress IPv4Network and
IPv6Network have been massively sped up, such as
subnets(), supernet(),
summarize_address_range(), collapse_addresses().
The speed up can range from 3 to 15 times.
(Contributed by Antoine Pitrou, Michel Albert, and Markus in
issue 21486, issue 21487, issue 20826, issue 23266.)
Pickling of ipaddress objects was optimized to produce significantly
smaller output.  (Contributed by Serhiy Storchaka in issue 23133.)
Many operations on io.BytesIO are now 50% to 100% faster.
(Contributed by Serhiy Storchaka in issue 15381 and David Wilson in
issue 22003.)
The marshal.dumps() function is now faster: 65-85% with versions 3
and 4, 20-25% with versions 0 to 2 on typical data, and up to 5 times in
best cases.
(Contributed by Serhiy Storchaka in issue 20416 and issue 23344.)
The UTF-32 encoder is now 3 to 7 times faster.
(Contributed by Serhiy Storchaka in issue 15027.)
Regular expressions are now parsed up to 10% faster.
(Contributed by Serhiy Storchaka in issue 19380.)
The json.dumps() function was optimized to run with
ensure_ascii=False as fast as with ensure_ascii=True.
(Contributed by Naoki Inada in issue 23206.)
The PyObject_IsInstance() and PyObject_IsSubclass()
functions have been sped up in the common case that the second argument
has type as its metaclass.
(Contributed Georg Brandl by in issue 22540.)
Method caching was slightly improved, yielding up to 5% performance
improvement in some benchmarks.
(Contributed by Antoine Pitrou in issue 22847.)
Objects from the random module now use 50% less memory on 64-bit
builds.  (Contributed by Serhiy Storchaka in issue 23488.)
The property() getter calls are up to 25% faster.
(Contributed by Joe Jevnik in issue 23910.)
Instantiation of fractions.Fraction is now up to 30% faster.
(Contributed by Stefan Behnel in issue 22464.)
String methods find(), rfind(), split(),
partition() and the in string operator are now significantly
faster for searching 1-character substrings.
(Contributed by Serhiy Storchaka in issue 23573.)
New calloc functions were added:
(Contributed by Victor Stinner in issue 21233.)
New encoding/decoding helper functions:
(Contributed by Victor Stinner in issue 18395.)
A new PyCodec_NameReplaceErrors() function to replace the unicode
encode error with \N{...} escapes.
(Contributed by Serhiy Storchaka in issue 19676.)
A new PyErr_FormatV() function similar to PyErr_Format(),
but accepts a va_list argument.
(Contributed by Antoine Pitrou in issue 18711.)
A new PyExc_RecursionError exception.
(Contributed by Georg Brandl in issue 19235.)
New PyModule_FromDefAndSpec(), PyModule_FromDefAndSpec2(),
and PyModule_ExecDef() functions introduced by PEP 489 –
multi-phase extension module initialization.
(Contributed by Petr Viktorin in issue 24268.)
New PyNumber_MatrixMultiply() and
PyNumber_InPlaceMatrixMultiply() functions to perform matrix
multiplication.
(Contributed by Benjamin Peterson in issue 21176.  See also PEP 465
for details.)
The PyTypeObject.tp_finalize slot is now part of the stable ABI.
Windows builds now require Microsoft Visual C++ 14.0, which
is available as part of Visual Studio 2015.
Extension modules now include a platform information tag in their filename on
some platforms (the tag is optional, and CPython will import extensions without
it, although if the tag is present and mismatched, the extension won’t be
loaded):
async and await are not recommended to be used as variable, class,
function or module names.  Introduced by PEP 492 in Python 3.5, they will
become proper keywords in Python 3.7.
Raising the StopIteration exception inside a generator will now generate a silent
PendingDeprecationWarning, which will become a non-silent deprecation
warning in Python 3.6 and will trigger a RuntimeError in Python 3.7.
See PEP 479: Change StopIteration handling inside generators
for details.
Windows XP is no longer supported by Microsoft, thus, per PEP 11, CPython
3.5 is no longer officially supported on this OS.
The formatter module has now graduated to full deprecation and is still
slated for removal in Python 3.6.
The asyncio.async() function is deprecated in favor of
ensure_future().
The smtpd module has in the past always decoded the DATA portion of
email messages using the utf-8 codec.  This can now be controlled by the
new decode_data keyword to SMTPServer.  The default value is
True, but this default is deprecated.  Specify the decode_data keyword
with an appropriate value to avoid the deprecation warning.
Directly assigning values to the key,
value and
coded_value of http.cookies.Morsel
objects is deprecated.  Use the set() method
instead.  In addition, the undocumented LegalChars parameter of
set() is deprecated, and is now ignored.
Passing a format string as keyword argument format_string to the
format() method of the string.Formatter
class has been deprecated.
(Contributed by Serhiy Storchaka in issue 23671.)
The platform.dist() and platform.linux_distribution() functions
are now deprecated.  Linux distributions use too many different ways of
describing themselves, so the functionality is left to a package.
(Contributed by Vajrasky Kok and Berker Peksag in issue 1322.)
The previously undocumented from_function and from_builtin methods of
inspect.Signature are deprecated.  Use the new
Signature.from_callable()
method instead. (Contributed by Yury Selivanov in issue 24248.)
The inspect.getargspec() function is deprecated and scheduled to be
removed in Python 3.6.  (See issue 20438 for details.)
The inspect getfullargspec(),
getargvalues(), getcallargs(),
getargvalues(), formatargspec(), and
formatargvalues() functions are deprecated in favor of
the inspect.signature() API.
(Contributed by Yury Selivanov in issue 20438.)
Use of re.LOCALE flag with str patterns or re.ASCII is now
deprecated.  (Contributed by Serhiy Storchaka in issue 22407.)
Use of unrecognized special sequences consisting of '\' and an ASCII letter
in regular expression patterns and replacement patterns now raises a
deprecation warning and will be forbidden in Python 3.6.
(Contributed by Serhiy Storchaka in issue 23622.)
The undocumented and unofficial use_load_tests default argument of the
unittest.TestLoader.loadTestsFromModule() method now is
deprecated and ignored.
(Contributed by Robert Collins and Barry A. Warsaw in issue 16662.)
The following obsolete and previously deprecated APIs and features have been
removed:
This section lists previously described changes and other bugfixes
that may require changes to your code.
Due to an oversight, earlier Python versions erroneously accepted the
following syntax:
Python 3.5 now correctly raises a SyntaxError, as generator
expressions must be put in parentheses if not a sole argument to a function.
What’s New in Python
What’s New In Python 3.4

    Enter search terms or a module, class or function name.
    

