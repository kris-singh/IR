URL: https://docs.python.org/3/c-api/tuple.html

Title: Tuple Objects — Python 3.5.2 documentation

Doc Id: 515

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :This subtype of PyObject represents a Python tuple object.
This instance of PyTypeObject represents the Python tuple type; it
is the same object as tuple in the Python layer.
Return true if p is a tuple object or an instance of a subtype of the tuple
type.
Return true if p is a tuple object, but not an instance of a subtype of the
tuple type.
Return a new tuple object of size len, or NULL on failure.
Return a new tuple object of size n, or NULL on failure. The tuple values
are initialized to the subsequent n C arguments pointing to Python objects.
PyTuple_Pack(2, a, b) is equivalent to Py_BuildValue("(OO)", a, b).
Take a pointer to a tuple object, and return the size of that tuple.
Return the size of the tuple p, which must be non-NULL and point to a tuple;
no error checking is performed.
Return the object at position pos in the tuple pointed to by p.  If pos is
out of bounds, return NULL and sets an IndexError exception.
Like PyTuple_GetItem(), but does no checking of its arguments.
Take a slice of the tuple pointed to by p from low to high and return it
as a new tuple.
Insert a reference to object o at position pos of the tuple pointed to by
p. Return 0 on success.
Note
This function “steals” a reference to o.
Like PyTuple_SetItem(), but does no error checking, and should only be
used to fill in brand new tuples.
Note
This function “steals” a reference to o.
Can be used to resize a tuple.  newsize will be the new length of the tuple.
Because tuples are supposed to be immutable, this should only be used if there
is only one reference to the object.  Do not use this if the tuple may already
be known to some other part of the code.  The tuple will always grow or shrink
at the end.  Think of this as destroying the old tuple and creating a new one,
only more efficiently.  Returns 0 on success. Client code should never
assume that the resulting value of *p will be the same as before calling
this function. If the object referenced by *p is replaced, the original
*p is destroyed.  On failure, returns -1 and sets *p to NULL, and
raises MemoryError or SystemError.
Clear the free list. Return the total number of freed items.
Struct sequence objects are the C equivalent of namedtuple()
objects, i.e. a sequence whose items can also be accessed through attributes.
To create a struct sequence, you first have to create a specific struct sequence
type.
Create a new struct sequence type from the data in desc, described below. Instances
of the resulting type can be created with PyStructSequence_New().
Initializes a struct sequence type type from desc in place.
The same as PyStructSequence_InitType, but returns 0 on success and -1 on
failure.
New in version 3.4.
Contains the meta information of a struct sequence type to create.
Describes a field of a struct sequence. As a struct sequence is modeled as a
tuple, all fields are typed as PyObject*.  The index in the
fields array of the PyStructSequence_Desc determines which
field of the struct sequence is described.
Special value for a field name to leave it unnamed.
Creates an instance of type, which must have been created with
PyStructSequence_NewType().
Return the object at position pos in the struct sequence pointed to by p.
No bounds checking is performed.
Macro equivalent of PyStructSequence_GetItem().
Sets the field at index pos of the struct sequence p to value o.  Like
PyTuple_SET_ITEM(), this should only be used to fill in brand new
instances.
Note
This function “steals” a reference to o.
Macro equivalent of PyStructSequence_SetItem().
Note
This function “steals” a reference to o.
Unicode Objects and Codecs
List Objects

    Enter search terms or a module, class or function name.
    

