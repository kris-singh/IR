URL: https://docs.python.org/3/library/string.html

Title: 6.1. string — Common string operations — Python 3.5.2 documentation

Doc Id: 49

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :Source code: Lib/string.py
See also
Text Sequence Type — str
String Methods
The constants defined in this module are:
The concatenation of the ascii_lowercase and ascii_uppercase
constants described below.  This value is not locale-dependent.
The lowercase letters 'abcdefghijklmnopqrstuvwxyz'.  This value is not
locale-dependent and will not change.
The uppercase letters 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.  This value is not
locale-dependent and will not change.
The string '0123456789'.
The string '0123456789abcdefABCDEF'.
The string '01234567'.
String of ASCII characters which are considered punctuation characters
in the C locale.
String of ASCII characters which are considered printable.  This is a
combination of digits, ascii_letters, punctuation,
and whitespace.
A string containing all ASCII characters that are considered whitespace.
This includes the characters space, tab, linefeed, return, formfeed, and
vertical tab.
The built-in string class provides the ability to do complex variable
substitutions and value formatting via the format() method described in
PEP 3101.  The Formatter class in the string module allows
you to create and customize your own string formatting behaviors using the same
implementation as the built-in format() method.
The Formatter class has the following public methods:
The primary API method.  It takes a format string and
an arbitrary set of positional and keyword arguments.
It is just a wrapper that calls vformat().
Deprecated since version 3.5: Passing a format string as keyword argument format_string has been
deprecated.
This function does the actual work of formatting.  It is exposed as a
separate function for cases where you want to pass in a predefined
dictionary of arguments, rather than unpacking and repacking the
dictionary as individual arguments using the *args and **kwargs
syntax.  vformat() does the work of breaking up the format string
into character data and replacement fields.  It calls the various
methods described below.
In addition, the Formatter defines a number of methods that are
intended to be replaced by subclasses:
Loop over the format_string and return an iterable of tuples
(literal_text, field_name, format_spec, conversion).  This is used
by vformat() to break the string into either literal text, or
replacement fields.
The values in the tuple conceptually represent a span of literal text
followed by a single replacement field.  If there is no literal text
(which can happen if two replacement fields occur consecutively), then
literal_text will be a zero-length string.  If there is no replacement
field, then the values of field_name, format_spec and conversion
will be None.
Given field_name as returned by parse() (see above), convert it to
an object to be formatted.  Returns a tuple (obj, used_key).  The default
version takes strings of the form defined in PEP 3101, such as
“0[name]” or “label.title”.  args and kwargs are as passed in to
vformat().  The return value used_key has the same meaning as the
key parameter to get_value().
Retrieve a given field value.  The key argument will be either an
integer or a string.  If it is an integer, it represents the index of the
positional argument in args; if it is a string, then it represents a
named argument in kwargs.
The args parameter is set to the list of positional arguments to
vformat(), and the kwargs parameter is set to the dictionary of
keyword arguments.
For compound field names, these functions are only called for the first
component of the field name; Subsequent components are handled through
normal attribute and indexing operations.
So for example, the field expression ‘0.name’ would cause
get_value() to be called with a key argument of 0.  The name
attribute will be looked up after get_value() returns by calling the
built-in getattr() function.
If the index or keyword refers to an item that does not exist, then an
IndexError or KeyError should be raised.
Implement checking for unused arguments if desired.  The arguments to this
function is the set of all argument keys that were actually referred to in
the format string (integers for positional arguments, and strings for
named arguments), and a reference to the args and kwargs that was
passed to vformat.  The set of unused args can be calculated from these
parameters.  check_unused_args() is assumed to raise an exception if
the check fails.
format_field() simply calls the global format() built-in.  The
method is provided so that subclasses can override it.
Converts the value (returned by get_field()) given a conversion type
(as in the tuple returned by the parse() method).  The default
version understands ‘s’ (str), ‘r’ (repr) and ‘a’ (ascii) conversion
types.
The str.format() method and the Formatter class share the same
syntax for format strings (although in the case of Formatter,
subclasses can define their own format string syntax).
Format strings contain “replacement fields” surrounded by curly braces {}.
Anything that is not contained in braces is considered literal text, which is
copied unchanged to the output.  If you need to include a brace character in the
literal text, it can be escaped by doubling: {{ and }}.
The grammar for a replacement field is as follows:
In less formal terms, the replacement field can start with a field_name that specifies
the object whose value is to be formatted and inserted
into the output instead of the replacement field.
The field_name is optionally followed by a  conversion field, which is
preceded by an exclamation point '!', and a format_spec, which is preceded
by a colon ':'.  These specify a non-default format for the replacement value.
See also the Format Specification Mini-Language section.
The field_name itself begins with an arg_name that is either a number or a
keyword.  If it’s a number, it refers to a positional argument, and if it’s a keyword,
it refers to a named keyword argument.  If the numerical arg_names in a format string
are 0, 1, 2, ... in sequence, they can all be omitted (not just some)
and the numbers 0, 1, 2, ... will be automatically inserted in that order.
Because arg_name is not quote-delimited, it is not possible to specify arbitrary
dictionary keys (e.g., the strings '10' or ':-]') within a format string.
The arg_name can be followed by any number of index or
attribute expressions. An expression of the form '.name' selects the named
attribute using getattr(), while an expression of the form '[index]'
does an index lookup using __getitem__().
Changed in version 3.1: The positional argument specifiers can be omitted, so '{} {}' is
equivalent to '{0} {1}'.
Some simple format string examples:
The conversion field causes a type coercion before formatting.  Normally, the
job of formatting a value is done by the __format__() method of the value
itself.  However, in some cases it is desirable to force a type to be formatted
as a string, overriding its own definition of formatting.  By converting the
value to a string before calling __format__(), the normal formatting logic
is bypassed.
Three conversion flags are currently supported: '!s' which calls str()
on the value, '!r' which calls repr() and '!a' which calls
ascii().
Some examples:
The format_spec field contains a specification of how the value should be
presented, including such details as field width, alignment, padding, decimal
precision and so on.  Each value type can define its own “formatting
mini-language” or interpretation of the format_spec.
Most built-in types support a common formatting mini-language, which is
described in the next section.
A format_spec field can also include nested replacement fields within it.
These nested replacement fields may contain a field name, conversion flag
and format specification, but deeper nesting is
not allowed.  The replacement fields within the
format_spec are substituted before the format_spec string is interpreted.
This allows the formatting of a value to be dynamically specified.
See the Format examples section for some examples.
“Format specifications” are used within replacement fields contained within a
format string to define how individual values are presented (see
Format String Syntax).  They can also be passed directly to the built-in
format() function.  Each formattable type may define how the format
specification is to be interpreted.
Most built-in types implement the following options for format specifications,
although some of the formatting options are only supported by the numeric types.
A general convention is that an empty format string ("") produces
the same result as if you had called str() on the value. A
non-empty format string typically modifies the result.
The general form of a standard format specifier is:
If a valid align value is specified, it can be preceded by a fill
character that can be any character and defaults to a space if omitted.
It is not possible to use a literal curly brace (“{” or “}”) as
the fill character when using the str.format()
method.  However, it is possible to insert a curly brace
with a nested replacement field.  This limitation doesn’t
affect the format() function.
The meaning of the various alignment options is as follows:
Note that unless a minimum field width is defined, the field width will always
be the same size as the data to fill it, so that the alignment option has no
meaning in this case.
The sign option is only valid for number types, and can be one of the
following:
The '#' option causes the “alternate form” to be used for the
conversion.  The alternate form is defined differently for different
types.  This option is only valid for integer, float, complex and
Decimal types. For integers, when binary, octal, or hexadecimal output
is used, this option adds the prefix respective '0b', '0o', or
'0x' to the output value. For floats, complex and Decimal the
alternate form causes the result of the conversion to always contain a
decimal-point character, even if no digits follow it. Normally, a
decimal-point character appears in the result of these conversions
only if a digit follows it. In addition, for 'g' and 'G'
conversions, trailing zeros are not removed from the result.
The ',' option signals the use of a comma for a thousands separator.
For a locale aware separator, use the 'n' integer presentation type
instead.
Changed in version 3.1: Added the ',' option (see also PEP 378).
width is a decimal integer defining the minimum field width.  If not
specified, then the field width will be determined by the content.
When no explicit alignment is given, preceding the width field by a zero
('0') character enables
sign-aware zero-padding for numeric types.  This is equivalent to a fill
character of '0' with an alignment type of '='.
The precision is a decimal number indicating how many digits should be
displayed after the decimal point for a floating point value formatted with
'f' and 'F', or before and after the decimal point for a floating point
value formatted with 'g' or 'G'.  For non-number types the field
indicates the maximum field size - in other words, how many characters will be
used from the field content. The precision is not allowed for integer values.
Finally, the type determines how the data should be presented.
The available string presentation types are:
The available integer presentation types are:
In addition to the above presentation types, integers can be formatted
with the floating point presentation types listed below (except
'n' and None). When doing so, float() is used to convert the
integer to a floating point number before formatting.
The available presentation types for floating point and decimal values are:
General format.  For a given precision p >= 1,
this rounds the number to p significant digits and
then formats the result in either fixed-point format
or in scientific notation, depending on its magnitude.
The precise rules are as follows: suppose that the
result formatted with presentation type 'e' and
precision p-1 would have exponent exp.  Then
if -4 <= exp < p, the number is formatted
with presentation type 'f' and precision
p-1-exp.  Otherwise, the number is formatted
with presentation type 'e' and precision p-1.
In both cases insignificant trailing zeros are removed
from the significand, and the decimal point is also
removed if there are no remaining digits following it.
Positive and negative infinity, positive and negative
zero, and nans, are formatted as inf, -inf,
0, -0 and nan respectively, regardless of
the precision.
A precision of 0 is treated as equivalent to a
precision of 1.  The default precision is 6.
This section contains examples of the str.format() syntax and
comparison with the old %-formatting.
In most of the cases the syntax is similar to the old %-formatting, with the
addition of the {} and with : used instead of %.
For example, '%03.2f' can be translated to '{:03.2f}'.
The new format syntax also supports new and different options, shown in the
follow examples.
Accessing arguments by position:
Accessing arguments by name:
Accessing arguments’ attributes:
Accessing arguments’ items:
Replacing %s and %r:
Aligning the text and specifying a width:
Replacing %+f, %-f, and % f and specifying a sign:
Replacing %x and %o and converting the value to different bases:
Using the comma as a thousands separator:
Expressing a percentage:
Using type-specific formatting:
Nesting arguments and more complex examples:
Templates provide simpler string substitutions as described in PEP 292.
Instead of the normal %-based substitutions, Templates support $-based substitutions, using the following rules:
Any other appearance of $ in the string will result in a ValueError
being raised.
The string module provides a Template class that implements
these rules.  The methods of Template are:
The constructor takes a single argument which is the template string.
Performs the template substitution, returning a new string.  mapping is
any dictionary-like object with keys that match the placeholders in the
template.  Alternatively, you can provide keyword arguments, where the
keywords are the placeholders.  When both mapping and kwds are given
and there are duplicates, the placeholders from kwds take precedence.
Like substitute(), except that if placeholders are missing from
mapping and kwds, instead of raising a KeyError exception, the
original placeholder will appear in the resulting string intact.  Also,
unlike with substitute(), any other appearances of the $ will
simply return $ instead of raising ValueError.
While other exceptions may still occur, this method is called “safe”
because substitutions always tries to return a usable string instead of
raising an exception.  In another sense, safe_substitute() may be
anything other than safe, since it will silently ignore malformed
templates containing dangling delimiters, unmatched braces, or
placeholders that are not valid Python identifiers.
Template instances also provide one public data attribute:
This is the object passed to the constructor’s template argument.  In
general, you shouldn’t change it, but read-only access is not enforced.
Here is an example of how to use a Template:
Advanced usage: you can derive subclasses of Template to customize the
placeholder syntax, delimiter character, or the entire regular expression used
to parse template strings.  To do this, you can override these class attributes:
delimiter – This is the literal string describing a placeholder introducing
delimiter.  The default value is $.  Note that this should not be a
regular expression, as the implementation will call re.escape() on this
string as needed.
idpattern – This is the regular expression describing the pattern for
non-braced placeholders (the braces will be added automatically as
appropriate).  The default value is the regular expression
[_a-z][_a-z0-9]*.
flags – The regular expression flags that will be applied when compiling
the regular expression used for recognizing substitutions.  The default value
is re.IGNORECASE.  Note that re.VERBOSE will always be added to the
flags, so custom idpatterns must follow conventions for verbose regular
expressions.
New in version 3.2.
Alternatively, you can provide the entire regular expression pattern by
overriding the class attribute pattern.  If you do this, the value must be a
regular expression object with four named capturing groups.  The capturing
groups correspond to the rules given above, along with the invalid placeholder
rule:
Split the argument into words using str.split(), capitalize each word
using str.capitalize(), and join the capitalized words using
str.join().  If the optional second argument sep is absent
or None, runs of whitespace characters are replaced by a single space
and leading and trailing whitespace are removed, otherwise sep is used to
split and join the words.
6. Text Processing Services
6.2. re — Regular expression operations

    Enter search terms or a module, class or function name.
    

