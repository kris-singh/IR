URL: https://docs.python.org/3/library/xml.dom.pulldom.html

Title: 20.8. xml.dom.pulldom — Support for building partial DOM trees — Python 3.5.2 documentation

Doc Id: 158

Meta Tags : No meta tag found in document

Date :Aug 20, 2016

Content :Source code: Lib/xml/dom/pulldom.py
The xml.dom.pulldom module provides a “pull parser” which can also be
asked to produce DOM-accessible fragments of the document where necessary. The
basic concept involves pulling “events” from a stream of incoming XML and
processing them. In contrast to SAX which also employs an event-driven
processing model together with callbacks, the user of a pull parser is
responsible for explicitly pulling events from the stream, looping over those
events until either processing is finished or an error condition occurs.
Warning
The xml.dom.pulldom module is not secure against
maliciously constructed data.  If you need to parse untrusted or
unauthenticated data see XML vulnerabilities.
Example:
event is a constant and can be one of:
node is an object of type xml.dom.minidom.Document,
xml.dom.minidom.Element or xml.dom.minidom.Text.
Since the document is treated as a “flat” stream of events, the document “tree”
is implicitly traversed and the desired elements are found regardless of their
depth in the tree. In other words, one does not need to consider hierarchical
issues such as recursive searching of the document nodes, although if the
context of elements were important, one would either need to maintain some
context-related state (i.e. remembering where one is in the document at any
given point) or to make use of the DOMEventStream.expandNode() method
and switch to DOM-related processing.
Subclass of xml.sax.handler.ContentHandler.
Subclass of xml.sax.handler.ContentHandler.
Return a DOMEventStream from the given input. stream_or_string may be
either a file name, or a file-like object. parser, if given, must be an
XMLReader object. This function will change the
document handler of the
parser and activate namespace support; other parser configuration (like
setting an entity resolver) must have been done in advance.
If you have XML in a string, you can use the parseString() function instead:
Return a DOMEventStream that represents the (Unicode) string.
Default value for the bufsize parameter to parse().
The value of this variable can be changed before calling parse() and
the new value will take effect.
Return a tuple containing event and the current node as
xml.dom.minidom.Document if event equals START_DOCUMENT,
xml.dom.minidom.Element if event equals START_ELEMENT or
END_ELEMENT or xml.dom.minidom.Text if event equals
CHARACTERS.
The current node does not contain informations about its children, unless
expandNode() is called.
Expands all children of node into node. Example:
20.7. xml.dom.minidom — Minimal DOM implementation
20.9. xml.sax — Support for SAX2 parsers

    Enter search terms or a module, class or function name.
    

