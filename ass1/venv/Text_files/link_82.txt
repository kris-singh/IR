URL: https://docs.python.org/3/library/pathlib.html

Title: 11.1. pathlib — Object-oriented filesystem paths — Python 3.5.2 documentation

Doc Id: 82

Meta Tags : No meta tag found in document

Date :Aug 09, 2016

Content :New in version 3.4.
Source code: Lib/pathlib.py
This module offers classes representing filesystem paths with semantics
appropriate for different operating systems.  Path classes are divided
between pure paths, which provide purely computational
operations without I/O, and concrete paths, which
inherit from pure paths but also provide I/O operations.
If you’ve never used this module before or just aren’t sure which class is
right for your task, Path is most likely what you need. It instantiates
a concrete path for the platform the code is running on.
Pure paths are useful in some special cases; for example:
Note
This module has been included in the standard library on a
provisional basis. Backwards incompatible
changes (up to and including removal of the package) may occur if deemed
necessary by the core developers.
See also
PEP 428: The pathlib module – object-oriented filesystem paths.
See also
For low-level path manipulation on strings, you can also use the
os.path module.
Importing the main class:
Listing subdirectories:
Listing Python source files in this directory tree:
Navigating inside a directory tree:
Querying path properties:
Opening a file:
Pure path objects provide path-handling operations which don’t actually
access a filesystem.  There are three ways to access these classes, which
we also call flavours:
A generic class that represents the system’s path flavour (instantiating
it creates either a PurePosixPath or a PureWindowsPath):
Each element of pathsegments can be either a string representing a
path segment, or another path object:
When pathsegments is empty, the current directory is assumed:
When several absolute paths are given, the last is taken as an anchor
(mimicking os.path.join()‘s behaviour):
However, in a Windows path, changing the local root doesn’t discard the
previous drive setting:
Spurious slashes and single dots are collapsed, but double dots ('..')
are not, since this would change the meaning of a path in the face of
symbolic links:
(a naïve approach would make PurePosixPath('foo/../bar') equivalent
to PurePosixPath('bar'), which is wrong if foo is a symbolic link
to another directory)
A subclass of PurePath, this path flavour represents non-Windows
filesystem paths:
pathsegments is specified similarly to PurePath.
A subclass of PurePath, this path flavour represents Windows
filesystem paths:
pathsegments is specified similarly to PurePath.
Regardless of the system you’re running on, you can instantiate all of
these classes, since they don’t provide any operation that does system calls.
Paths are immutable and hashable.  Paths of a same flavour are comparable
and orderable.  These properties respect the flavour’s case-folding
semantics:
Paths of a different flavour compare unequal and cannot be ordered:
The slash operator helps create child paths, similarly to os.path.join():
The string representation of a path is the raw filesystem path itself
(in native form, e.g. with backslashes under Windows), which you can
pass to any function taking a file path as a string:
Similarly, calling bytes on a path gives the raw filesystem path as a
bytes object, as encoded by os.fsencode():
Note
Calling bytes is only recommended under Unix.  Under Windows,
the unicode form is the canonical representation of filesystem paths.
To access the individual “parts” (components) of a path, use the following
property:
A tuple giving access to the path’s various components:
(note how the drive and local root are regrouped in a single part)
Pure paths provide the following methods and properties:
A string representing the drive letter or name, if any:
UNC shares are also considered drives:
A string representing the (local or global) root, if any:
UNC shares always have a root:
The concatenation of the drive and root:
An immutable sequence providing access to the logical ancestors of
the path:
The logical parent of the path:
You cannot go past an anchor, or empty path:
Note
This is a purely lexical operation, hence the following behaviour:
If you want to walk an arbitrary filesystem path upwards, it is
recommended to first call Path.resolve() so as to resolve
symlinks and eliminate ”..” components.
A string representing the final path component, excluding the drive and
root, if any:
UNC drive names are not considered:
The file extension of the final component, if any:
A list of the path’s file extensions:
The final path component, without its suffix:
Return a string representation of the path with forward slashes (/):
Represent the path as a file URI.  ValueError is raised if
the path isn’t absolute.
Return whether the path is absolute or not.  A path is considered absolute
if it has both a root and (if the flavour allows) a drive:
With PureWindowsPath, return True if the path is considered
reserved under Windows, False otherwise.  With PurePosixPath,
False is always returned.
File system calls on reserved paths can fail mysteriously or have
unintended effects.
Calling this method is equivalent to combining the path with each of
the other arguments in turn:
Match this path against the provided glob-style pattern.  Return True
if matching is successful, False otherwise.
If pattern is relative, the path can be either relative or absolute,
and matching is done from the right:
If pattern is absolute, the path must be absolute, and the whole path
must match:
As with other methods, case-sensitivity is observed:
Compute a version of this path relative to the path represented by
other.  If it’s impossible, ValueError is raised:
Return a new path with the name changed.  If the original path
doesn’t have a name, ValueError is raised:
Return a new path with the suffix changed.  If the original path
doesn’t have a suffix, the new suffix is appended instead:
Concrete paths are subclasses of the pure path classes.  In addition to
operations provided by the latter, they also provide methods to do system
calls on path objects.  There are three ways to instantiate concrete paths:
A subclass of PurePath, this class represents concrete paths of
the system’s path flavour (instantiating it creates either a
PosixPath or a WindowsPath):
pathsegments is specified similarly to PurePath.
A subclass of Path and PurePosixPath, this class
represents concrete non-Windows filesystem paths:
pathsegments is specified similarly to PurePath.
A subclass of Path and PureWindowsPath, this class
represents concrete Windows filesystem paths:
pathsegments is specified similarly to PurePath.
You can only instantiate the class flavour that corresponds to your system
(allowing system calls on non-compatible path flavours could lead to
bugs or failures in your application):
Concrete paths provide the following methods in addition to pure paths
methods.  Many of these methods can raise an OSError if a system
call fails (for example because the path doesn’t exist):
Return a new path object representing the current directory (as returned
by os.getcwd()):
Return a new path object representing the user’s home directory (as
returned by os.path.expanduser() with ~ construct):
New in version 3.5.
Return information about this path (similarly to os.stat()).
The result is looked up at each call to this method.
Change the file mode and permissions, like os.chmod():
Whether the path points to an existing file or directory:
Note
If the path points to a symlink, exists() returns whether the
symlink points to an existing file or directory.
Return a new path with expanded ~ and ~user constructs,
as returned by os.path.expanduser():
New in version 3.5.
Glob the given pattern in the directory represented by this path,
yielding all matching files (of any kind):
The “**” pattern means “this directory and all subdirectories,
recursively”.  In other words, it enables recursive globbing:
Note
Using the “**” pattern in large directory trees may consume
an inordinate amount of time.
Return the name of the group owning the file.  KeyError is raised
if the file’s gid isn’t found in the system database.
Return True if the path points to a directory (or a symbolic link
pointing to a directory), False if it points to another kind of file.
False is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.
Return True if the path points to a regular file (or a symbolic link
pointing to a regular file), False if it points to another kind of file.
False is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.
Return True if the path points to a symbolic link, False otherwise.
False is also returned if the path doesn’t exist; other errors (such
as permission errors) are propagated.
Return True if the path points to a Unix socket (or a symbolic link
pointing to a Unix socket), False if it points to another kind of file.
False is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.
Return True if the path points to a FIFO (or a symbolic link
pointing to a FIFO), False if it points to another kind of file.
False is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.
Return True if the path points to a block device (or a symbolic link
pointing to a block device), False if it points to another kind of file.
False is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.
Return True if the path points to a character device (or a symbolic link
pointing to a character device), False if it points to another kind of file.
False is also returned if the path doesn’t exist or is a broken symlink;
other errors (such as permission errors) are propagated.
When the path points to a directory, yield path objects of the directory
contents:
Like Path.chmod() but, if the path points to a symbolic link, the
symbolic link’s mode is changed rather than its target’s.
Like Path.stat() but, if the path points to a symbolic link, return
the symbolic link’s information rather than its target’s.
Create a new directory at this given path.  If mode is given, it is
combined with the process’ umask value to determine the file mode
and access flags.  If the path already exists, FileExistsError
is raised.
If parents is true, any missing parents of this path are created
as needed; they are created with the default permissions without taking
mode into account (mimicking the POSIX mkdir -p command).
If parents is false (the default), a missing parent raises
FileNotFoundError.
If exist_ok is false (the default), an FileExistsError is
raised if the target directory already exists.
If exist_ok is true, FileExistsError exceptions will be
ignored (same behavior as the POSIX mkdir -p command), but only if the
last path component is not an existing non-directory file.
Changed in version 3.5: The exist_ok parameter was added.
Open the file pointed to by the path, like the built-in open()
function does:
Return the name of the user owning the file.  KeyError is raised
if the file’s uid isn’t found in the system database.
Return the binary contents of the pointed-to file as a bytes object:
New in version 3.5.
Return the decoded contents of the pointed-to file as a string:
The optional parameters have the same meaning as in open().
New in version 3.5.
Rename this file or directory to the given target.  On Unix, if
target exists and is a file, it will be replaced silently if the user
has permission.  target can be either a string or another path object:
Rename this file or directory to the given target.  If target points
to an existing file or directory, it will be unconditionally replaced.
Make the path absolute, resolving any symlinks.  A new path object is
returned:
”..” components are also eliminated (this is the only method to do so):
If the path doesn’t exist, FileNotFoundError is raised.  If an
infinite loop is encountered along the resolution path,
RuntimeError is raised.
This is like calling glob() with “**” added in front of the
given pattern:
Remove this directory.  The directory must be empty.
Return whether this path points to the same file as other_path, which
can be either a Path object, or a string.  The semantics are similar
to os.path.samefile() and os.path.samestat().
An OSError can be raised if either file cannot be accessed for some
reason.
New in version 3.5.
Make this path a symbolic link to target.  Under Windows,
target_is_directory must be true (default False) if the link’s target
is a directory.  Under POSIX, target_is_directory‘s value is ignored.
Note
The order of arguments (link, target) is the reverse
of os.symlink()‘s.
Create a file at this given path.  If mode is given, it is combined
with the process’ umask value to determine the file mode and access
flags.  If the file already exists, the function succeeds if exist_ok
is true (and its modification time is updated to the current time),
otherwise FileExistsError is raised.
Remove this file or symbolic link.  If the path points to a directory,
use Path.rmdir() instead.
Open the file pointed to in bytes mode, write data to it, and close the
file:
An existing file of the same name is overwritten.
New in version 3.5.
Open the file pointed to in text mode, write data to it, and close the
file:
New in version 3.5.
11. File and Directory Access
11.2. os.path — Common pathname manipulations

    Enter search terms or a module, class or function name.
    

