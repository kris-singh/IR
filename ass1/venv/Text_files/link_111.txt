URL: https://docs.python.org/3/library/os.html

Title: 16.1. os — Miscellaneous operating system interfaces — Python 3.5.2 documentation

Doc Id: 111

Meta Tags : No meta tag found in document

Date :Jul 28, 2016

Content :Source code: Lib/os.py
This module provides a portable way of using operating system dependent
functionality.  If you just want to read or write a file see open(), if
you want to manipulate paths, see the os.path module, and if you want to
read all the lines in all the files on the command line see the fileinput
module.  For creating temporary files and directories see the tempfile
module, and for high-level file and directory handling see the shutil
module.
Notes on the availability of these functions:
Note
All functions in this module raise OSError in the case of invalid or
inaccessible file names and paths, or other arguments that have the correct
type, but are not accepted by the operating system.
An alias for the built-in OSError exception.
The name of the operating system dependent module imported.  The following
names have currently been registered: 'posix', 'nt',
'ce', 'java'.
See also
sys.platform has a finer granularity.  os.uname() gives
system-dependent version information.
The platform module provides detailed checks for the
system’s identity.
In Python, file names, command line arguments, and environment variables are
represented using the string type. On some systems, decoding these strings to
and from bytes is necessary before passing them to the operating system. Python
uses the file system encoding to perform this conversion (see
sys.getfilesystemencoding()).
Changed in version 3.1: On some systems, conversion using the file system encoding may fail. In this
case, Python uses the surrogateescape encoding error handler, which means that undecodable bytes are replaced by a
Unicode character U+DCxx on decoding, and these are again translated to the
original byte on encoding.
The file system encoding must guarantee to successfully decode all bytes
below 128. If the file system encoding fails to provide this guarantee, API
functions may raise UnicodeErrors.
These functions and data items provide information and operate on the current
process and user.
Return the filename corresponding to the controlling terminal of the process.
Availability: Unix.
A mapping object representing the string environment. For example,
environ['HOME'] is the pathname of your home directory (on some platforms),
and is equivalent to getenv("HOME") in C.
This mapping is captured the first time the os module is imported,
typically during Python startup as part of processing site.py.  Changes
to the environment made after this time are not reflected in os.environ,
except for changes made by modifying os.environ directly.
If the platform supports the putenv() function, this mapping may be used
to modify the environment as well as query the environment.  putenv() will
be called automatically when the mapping is modified.
On Unix, keys and values use sys.getfilesystemencoding() and
'surrogateescape' error handler. Use environb if you would like
to use a different encoding.
Note
Calling putenv() directly does not change os.environ, so it’s better
to modify os.environ.
Note
On some platforms, including FreeBSD and Mac OS X, setting environ may
cause memory leaks.  Refer to the system documentation for
putenv().
If putenv() is not provided, a modified copy of this mapping  may be
passed to the appropriate process-creation functions to cause  child processes
to use a modified environment.
If the platform supports the unsetenv() function, you can delete items in
this mapping to unset environment variables. unsetenv() will be called
automatically when an item is deleted from os.environ, and when
one of the pop() or clear() methods is called.
Bytes version of environ: a mapping object representing the
environment as byte strings. environ and environb are
synchronized (modify environb updates environ, and vice
versa).
environb is only available if supports_bytes_environ is
True.
New in version 3.2.
These functions are described in Files and Directories.
Encode filename to the filesystem encoding with 'surrogateescape'
error handler, or 'strict' on Windows; return bytes unchanged.
fsdecode() is the reverse function.
New in version 3.2.
Decode filename from the filesystem encoding with 'surrogateescape'
error handler, or 'strict' on Windows; return str unchanged.
fsencode() is the reverse function.
New in version 3.2.
Return the value of the environment variable key if it exists, or
default if it doesn’t. key, default and the result are str.
On Unix, keys and values are decoded with sys.getfilesystemencoding()
and 'surrogateescape' error handler. Use os.getenvb() if you
would like to use a different encoding.
Availability: most flavors of Unix, Windows.
Return the value of the environment variable key if it exists, or
default if it doesn’t. key, default and the result are bytes.
Availability: most flavors of Unix.
New in version 3.2.
Returns the list of directories that will be searched for a named
executable, similar to a shell, when launching a process.
env, when specified, should be an environment variable dictionary
to lookup the PATH in.
By default, when env is None, environ is used.
New in version 3.2.
Return the effective group id of the current process.  This corresponds to the
“set id” bit on the file being executed in the current process.
Availability: Unix.
Return the current process’s effective user id.
Availability: Unix.
Return the real group id of the current process.
Availability: Unix.
Return list of group ids that user belongs to. If group is not in the
list, it is included; typically, group is specified as the group ID
field from the password record for user.
Availability: Unix.
New in version 3.3.
Return list of supplemental group ids associated with the current process.
Availability: Unix.
Note
On Mac OS X, getgroups() behavior differs somewhat from
other Unix platforms. If the Python interpreter was built with a
deployment target of 10.5 or earlier, getgroups() returns
the list of effective group ids associated with the current user process;
this list is limited to a system-defined number of entries, typically 16,
and may be modified by calls to setgroups() if suitably privileged.
If built with a deployment target greater than 10.5,
getgroups() returns the current group access list for the user
associated with the effective user id of the process; the group access
list may change over the lifetime of the process, it is not affected by
calls to setgroups(), and its length is not limited to 16.  The
deployment target value, MACOSX_DEPLOYMENT_TARGET, can be
obtained with sysconfig.get_config_var().
Return the name of the user logged in on the controlling terminal of the
process.  For most purposes, it is more useful to use the environment
variables LOGNAME or USERNAME to find out who the user
is, or pwd.getpwuid(os.getuid())[0] to get the login name of the current
real user id.
Availability: Unix, Windows.
Return the process group id of the process with process id pid. If pid is 0,
the process group id of the current process is returned.
Availability: Unix.
Return the id of the current process group.
Availability: Unix.
Return the current process id.
Return the parent’s process id.  When the parent process has exited, on Unix
the id returned is the one of the init process (1), on Windows it is still
the same id, which may be already reused by another process.
Availability: Unix, Windows.
Changed in version 3.2: Added support for Windows.
Get program scheduling priority.  The value which is one of
PRIO_PROCESS, PRIO_PGRP, or PRIO_USER, and who
is interpreted relative to which (a process identifier for
PRIO_PROCESS, process group identifier for PRIO_PGRP, and a
user ID for PRIO_USER).  A zero value for who denotes
(respectively) the calling process, the process group of the calling process,
or the real user ID of the calling process.
Availability: Unix.
New in version 3.3.
Parameters for the getpriority() and setpriority() functions.
Availability: Unix.
New in version 3.3.
Return a tuple (ruid, euid, suid) denoting the current process’s
real, effective, and saved user ids.
Availability: Unix.
New in version 3.2.
Return a tuple (rgid, egid, sgid) denoting the current process’s
real, effective, and saved group ids.
Availability: Unix.
New in version 3.2.
Return the current process’s real user id.
Availability: Unix.
Call the system initgroups() to initialize the group access list with all of
the groups of which the specified username is a member, plus the specified
group id.
Availability: Unix.
New in version 3.2.
Set the environment variable named key to the string value.  Such
changes to the environment affect subprocesses started with os.system(),
popen() or fork() and execv().
Availability: most flavors of Unix, Windows.
Note
On some platforms, including FreeBSD and Mac OS X, setting environ may
cause memory leaks. Refer to the system documentation for putenv.
When putenv() is supported, assignments to items in os.environ are
automatically translated into corresponding calls to putenv(); however,
calls to putenv() don’t update os.environ, so it is actually
preferable to assign to items of os.environ.
Set the current process’s effective group id.
Availability: Unix.
Set the current process’s effective user id.
Availability: Unix.
Set the current process’ group id.
Availability: Unix.
Set the list of supplemental group ids associated with the current process to
groups. groups must be a sequence, and each element must be an integer
identifying a group. This operation is typically available only to the superuser.
Availability: Unix.
Note
On Mac OS X, the length of groups may not exceed the
system-defined maximum number of effective group ids, typically 16.
See the documentation for getgroups() for cases where it may not
return the same group list set by calling setgroups().
Call the system call setpgrp() or setpgrp(0, 0) depending on
which version is implemented (if any).  See the Unix manual for the semantics.
Availability: Unix.
Call the system call setpgid() to set the process group id of the
process with id pid to the process group with id pgrp.  See the Unix manual
for the semantics.
Availability: Unix.
Set program scheduling priority. The value which is one of
PRIO_PROCESS, PRIO_PGRP, or PRIO_USER, and who
is interpreted relative to which (a process identifier for
PRIO_PROCESS, process group identifier for PRIO_PGRP, and a
user ID for PRIO_USER). A zero value for who denotes
(respectively) the calling process, the process group of the calling process,
or the real user ID of the calling process.
priority is a value in the range -20 to 19. The default priority is 0;
lower priorities cause more favorable scheduling.
Availability: Unix
New in version 3.3.
Set the current process’s real and effective group ids.
Availability: Unix.
Set the current process’s real, effective, and saved group ids.
Availability: Unix.
New in version 3.2.
Set the current process’s real, effective, and saved user ids.
Availability: Unix.
New in version 3.2.
Set the current process’s real and effective user ids.
Availability: Unix.
Call the system call getsid().  See the Unix manual for the semantics.
Availability: Unix.
Call the system call setsid().  See the Unix manual for the semantics.
Availability: Unix.
Set the current process’s user id.
Availability: Unix.
Return the error message corresponding to the error code in code.
On platforms where strerror() returns NULL when given an unknown
error number, ValueError is raised.
True if the native OS type of the environment is bytes (eg. False on
Windows).
New in version 3.2.
Set the current numeric umask and return the previous umask.
Returns information identifying the current operating system.
The return value is an object with five attributes:
For backwards compatibility, this object is also iterable, behaving
like a five-tuple containing sysname, nodename,
release, version, and machine
in that order.
Some systems truncate nodename to 8 characters or to the
leading component; a better way to get the hostname is
socket.gethostname()  or even
socket.gethostbyaddr(socket.gethostname()).
Availability: recent flavors of Unix.
Changed in version 3.3: Return type changed from a tuple to a tuple-like object
with named attributes.
Unset (delete) the environment variable named key. Such changes to the
environment affect subprocesses started with os.system(), popen() or
fork() and execv().
When unsetenv() is supported, deletion of items in os.environ is
automatically translated into a corresponding call to unsetenv(); however,
calls to unsetenv() don’t update os.environ, so it is actually
preferable to delete items of os.environ.
Availability: most flavors of Unix, Windows.
This function creates new file objects.  (See also
open() for opening file descriptors.)
Return an open file object connected to the file descriptor fd.  This is an
alias of the open() built-in function and accepts the same arguments.
The only difference is that the first argument of fdopen() must always
be an integer.
These functions operate on I/O streams referenced using file descriptors.
File descriptors are small integers corresponding to a file that has been opened
by the current process.  For example, standard input is usually file descriptor
0, standard output is 1, and standard error is 2.  Further files opened by a
process will then be assigned 3, 4, 5, and so forth.  The name “file descriptor”
is slightly deceptive; on Unix platforms, sockets and pipes are also referenced
by file descriptors.
The fileno() method can be used to obtain the file descriptor
associated with a file object when required.  Note that using the file
descriptor directly will bypass the file object methods, ignoring aspects such
as internal buffering of data.
Close file descriptor fd.
Note
This function is intended for low-level I/O and must be applied to a file
descriptor as returned by os.open() or pipe().  To close a “file
object” returned by the built-in function open() or by popen() or
fdopen(), use its close() method.
Close all file descriptors from fd_low (inclusive) to fd_high (exclusive),
ignoring errors. Equivalent to (but much faster than):
Return a string describing the encoding of the device associated with fd
if it is connected to a terminal; else return None.
Return a duplicate of file descriptor fd. The new file descriptor is
non-inheritable.
On Windows, when duplicating a standard stream (0: stdin, 1: stdout,
2: stderr), the new file descriptor is inheritable.
Changed in version 3.4: The new file descriptor is now non-inheritable.
Duplicate file descriptor fd to fd2, closing the latter first if necessary.
The file descriptor fd2 is inheritable by default,
or non-inheritable if inheritable is False.
Changed in version 3.4: Add the optional inheritable parameter.
Change the mode of the file given by fd to the numeric mode.  See the
docs for chmod() for possible values of mode.  As of Python 3.3, this
is equivalent to os.chmod(fd, mode).
Availability: Unix.
Change the owner and group id of the file given by fd to the numeric uid
and gid.  To leave one of the ids unchanged, set it to -1.  See
chown().  As of Python 3.3, this is equivalent to os.chown(fd, uid,
gid).
Availability: Unix.
Force write of file with filedescriptor fd to disk. Does not force update of
metadata.
Availability: Unix.
Note
This function is not available on MacOS.
Return system configuration information relevant to an open file. name
specifies the configuration value to retrieve; it may be a string which is the
name of a defined system value; these names are specified in a number of
standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define
additional names as well.  The names known to the host operating system are
given in the pathconf_names dictionary.  For configuration variables not
included in that mapping, passing an integer for name is also accepted.
If name is a string and is not known, ValueError is raised.  If a
specific value for name is not supported by the host system, even if it is
included in pathconf_names, an OSError is raised with
errno.EINVAL for the error number.
As of Python 3.3, this is equivalent to os.pathconf(fd, name).
Availability: Unix.
Get the status of the file descriptor fd. Return a stat_result
object.
As of Python 3.3, this is equivalent to os.stat(fd).
See also
The stat() function.
Return information about the filesystem containing the file associated with
file descriptor fd, like statvfs().  As of Python 3.3, this is
equivalent to os.statvfs(fd).
Availability: Unix.
Force write of file with filedescriptor fd to disk.  On Unix, this calls the
native fsync() function; on Windows, the MS _commit() function.
If you’re starting with a buffered Python file object f, first do
f.flush(), and then do os.fsync(f.fileno()), to ensure that all internal
buffers associated with f are written to disk.
Availability: Unix, Windows.
Truncate the file corresponding to file descriptor fd, so that it is at
most length bytes in size.  As of Python 3.3, this is equivalent to
os.truncate(fd, length).
Availability: Unix, Windows.
Changed in version 3.5: Added support for Windows
Get the blocking mode of the file descriptor: False if the
O_NONBLOCK flag is set, True if the flag is cleared.
See also set_blocking() and socket.socket.setblocking().
Availability: Unix.
New in version 3.5.
Return True if the file descriptor fd is open and connected to a
tty(-like) device, else False.
Apply, test or remove a POSIX lock on an open file descriptor.
fd is an open file descriptor.
cmd specifies the command to use - one of F_LOCK, F_TLOCK,
F_ULOCK or F_TEST.
len specifies the section of the file to lock.
Availability: Unix.
New in version 3.3.
Flags that specify what action lockf() will take.
Availability: Unix.
New in version 3.3.
Set the current position of file descriptor fd to position pos, modified
by how: SEEK_SET or 0 to set the position relative to the
beginning of the file; SEEK_CUR or 1 to set it relative to the
current position; SEEK_END or 2 to set it relative to the end of
the file. Return the new cursor position in bytes, starting from the beginning.
Parameters to the lseek() function. Their values are 0, 1, and 2,
respectively.
New in version 3.3: Some operating systems could support additional values, like
os.SEEK_HOLE or os.SEEK_DATA.
Open the file path and set various flags according to flags and possibly
its mode according to mode.  When computing mode, the current umask value
is first masked out.  Return the file descriptor for the newly opened file.
The new file descriptor is non-inheritable.
For a description of the flag and mode values, see the C run-time documentation;
flag constants (like O_RDONLY and O_WRONLY) are defined in
the os module.  In particular, on Windows adding
O_BINARY is needed to open files in binary mode.
This function can support paths relative to directory descriptors with the dir_fd parameter.
Changed in version 3.4: The new file descriptor is now non-inheritable.
Note
This function is intended for low-level I/O.  For normal usage, use the
built-in function open(), which returns a file object with
read() and write() methods (and many more).  To
wrap a file descriptor in a file object, use fdopen().
New in version 3.3: The dir_fd argument.
Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an
exception, the function now retries the system call instead of raising an
InterruptedError exception (see PEP 475 for the rationale).
The following constants are options for the flags parameter to the
open() function.  They can be combined using the bitwise OR operator
|.  Some of them are not available on all platforms.  For descriptions of
their availability and use, consult the open(2) manual page on Unix
or the MSDN on Windows.
These constants are available on Unix and Windows.
These constants are only available on Unix.
Changed in version 3.3: Add O_CLOEXEC constant.
These constants are only available on Windows.
These constants are GNU extensions and not present if they are not defined by
the C library.
Changed in version 3.4: Add O_PATH on systems that support it.
Add O_TMPFILE, only available on Linux Kernel 3.11
  or newer.
Open a new pseudo-terminal pair. Return a pair of file descriptors
(master, slave) for the pty and the tty, respectively. The new file
descriptors are non-inheritable. For a (slightly) more
portable approach, use the pty module.
Availability: some flavors of Unix.
Changed in version 3.4: The new file descriptors are now non-inheritable.
Create a pipe.  Return a pair of file descriptors (r, w) usable for
reading and writing, respectively. The new file descriptor is
non-inheritable.
Availability: Unix, Windows.
Changed in version 3.4: The new file descriptors are now non-inheritable.
Create a pipe with flags set atomically.
flags can be constructed by ORing together one or more of these values:
O_NONBLOCK, O_CLOEXEC.
Return a pair of file descriptors (r, w) usable for reading and writing,
respectively.
Availability: some flavors of Unix.
New in version 3.3.
Ensures that enough disk space is allocated for the file specified by fd
starting from offset and continuing for len bytes.
Availability: Unix.
New in version 3.3.
Announces an intention to access data in a specific pattern thus allowing
the kernel to make optimizations.
The advice applies to the region of the file specified by fd starting at
offset and continuing for len bytes.
advice is one of POSIX_FADV_NORMAL, POSIX_FADV_SEQUENTIAL,
POSIX_FADV_RANDOM, POSIX_FADV_NOREUSE,
POSIX_FADV_WILLNEED or POSIX_FADV_DONTNEED.
Availability: Unix.
New in version 3.3.
Flags that can be used in advice in posix_fadvise() that specify
the access pattern that is likely to be used.
Availability: Unix.
New in version 3.3.
Read from a file descriptor, fd, at a position of offset. It will read up
to buffersize number of bytes. The file offset remains unchanged.
Availability: Unix.
New in version 3.3.
Write bytestring to a file descriptor, fd, from offset,
leaving the file offset unchanged.
Availability: Unix.
New in version 3.3.
Read at most n bytes from file descriptor fd. Return a bytestring containing the
bytes read.  If the end of the file referred to by fd has been reached, an
empty bytes object is returned.
Note
This function is intended for low-level I/O and must be applied to a file
descriptor as returned by os.open() or pipe().  To read a
“file object” returned by the built-in function open() or by
popen() or fdopen(), or sys.stdin, use its
read() or readline() methods.
Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an
exception, the function now retries the system call instead of raising an
InterruptedError exception (see PEP 475 for the rationale).
Copy count bytes from file descriptor in to file descriptor out
starting at offset.
Return the number of bytes sent. When EOF is reached return 0.
The first function notation is supported by all platforms that define
sendfile().
On Linux, if offset is given as None, the bytes are read from the
current position of in and the position of in is updated.
The second case may be used on Mac OS X and FreeBSD where headers and
trailers are arbitrary sequences of buffers that are written before and
after the data from in is written. It returns the same as the first case.
On Mac OS X and FreeBSD, a value of 0 for count specifies to send until
the end of in is reached.
All platforms support sockets as out file descriptor, and some platforms
allow other types (e.g. regular file, pipe) as well.
Cross-platform applications should not use headers, trailers and flags
arguments.
Availability: Unix.
Note
For a higher-level wrapper of sendfile(), see
socket.socket.sendfile().
New in version 3.3.
Set the blocking mode of the specified file descriptor. Set the
O_NONBLOCK flag if blocking is False, clear the flag otherwise.
See also get_blocking() and socket.socket.setblocking().
Availability: Unix.
New in version 3.5.
Parameters to the sendfile() function, if the implementation supports
them.
Availability: Unix.
New in version 3.3.
Read from a file descriptor fd into a number of mutable bytes-like
objects buffers. readv() will transfer data
into each buffer until it is full and then move on to the next buffer in the
sequence to hold the rest of the data. readv() returns the total
number of bytes read (which may be less than the total capacity of all the
objects).
Availability: Unix.
New in version 3.3.
Return the process group associated with the terminal given by fd (an open
file descriptor as returned by os.open()).
Availability: Unix.
Set the process group associated with the terminal given by fd (an open file
descriptor as returned by os.open()) to pg.
Availability: Unix.
Return a string which specifies the terminal device associated with
file descriptor fd.  If fd is not associated with a terminal device, an
exception is raised.
Availability: Unix.
Write the bytestring in str to file descriptor fd. Return the number of
bytes actually written.
Note
This function is intended for low-level I/O and must be applied to a file
descriptor as returned by os.open() or pipe().  To write a “file
object” returned by the built-in function open() or by popen() or
fdopen(), or sys.stdout or sys.stderr, use its
write() method.
Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an
exception, the function now retries the system call instead of raising an
InterruptedError exception (see PEP 475 for the rationale).
Write the contents of buffers to file descriptor fd. buffers must be a
sequence of bytes-like objects. Buffers are
processed in array order. Entire contents of first buffer is written before
proceeding to second, and so on. The operating system may set a limit
(sysconf() value SC_IOV_MAX) on the number of buffers that can be used.
writev() writes the contents of each object to the file descriptor
and returns the total number of bytes written.
Availability: Unix.
New in version 3.3.
New in version 3.3.
Return the size of the terminal window as (columns, lines),
tuple of type terminal_size.
The optional argument fd (default STDOUT_FILENO, or standard
output) specifies which file descriptor should be queried.
If the file descriptor is not connected to a terminal, an OSError
is raised.
shutil.get_terminal_size() is the high-level function which
should normally be used, os.get_terminal_size is the low-level
implementation.
Availability: Unix, Windows.
A subclass of tuple, holding (columns, lines) of the terminal window size.
Width of the terminal window in characters.
Height of the terminal window in characters.
New in version 3.4.
A file descriptor has an “inheritable” flag which indicates if the file descriptor
can be inherited by child processes.  Since Python 3.4, file descriptors
created by Python are non-inheritable by default.
On UNIX, non-inheritable file descriptors are closed in child processes at the
execution of a new program, other file descriptors are inherited.
On Windows, non-inheritable handles and file descriptors are closed in child
processes, except for standard streams (file descriptors 0, 1 and 2: stdin, stdout
and stderr), which are always inherited.  Using spawn* functions,
all inheritable handles and all inheritable file descriptors are inherited.
Using the subprocess module, all file descriptors except standard
streams are closed, and inheritable handles are only inherited if the
close_fds parameter is False.
Get the “inheritable” flag of the specified file descriptor (a boolean).
Set the “inheritable” flag of the specified file descriptor.
Get the “inheritable” flag of the specified handle (a boolean).
Availability: Windows.
Set the “inheritable” flag of the specified handle.
Availability: Windows.
On some Unix platforms, many of these functions support one or more of these
features:
specifying a file descriptor:
For some functions, the path argument can be not only a string giving a path
name, but also a file descriptor.  The function will then operate on the file
referred to by the descriptor.  (For POSIX systems, Python will call the
f... version of the function.)
You can check whether or not path can be specified as a file descriptor on
your platform using os.supports_fd.  If it is unavailable, using it
will raise a NotImplementedError.
If the function also supports dir_fd or follow_symlinks arguments, it is
an error to specify one of those when supplying path as a file descriptor.
paths relative to directory descriptors: If dir_fd is not None, it
should be a file descriptor referring to a directory, and the path to operate
on should be relative; path will then be relative to that directory.  If the
path is absolute, dir_fd is ignored.  (For POSIX systems, Python will call
the ...at or f...at version of the function.)
You can check whether or not dir_fd is supported on your platform using
os.supports_dir_fd.  If it is unavailable, using it will raise a
NotImplementedError.
not following symlinks: If follow_symlinks is
False, and the last element of the path to operate on is a symbolic link,
the function will operate on the symbolic link itself instead of the file the
link points to.  (For POSIX systems, Python will call the l... version of
the function.)
You can check whether or not follow_symlinks is supported on your platform
using os.supports_follow_symlinks.  If it is unavailable, using it
will raise a NotImplementedError.
Use the real uid/gid to test for access to path.  Note that most operations
will use the effective uid/gid, therefore this routine can be used in a
suid/sgid environment to test if the invoking user has the specified access to
path.  mode should be F_OK to test the existence of path, or it
can be the inclusive OR of one or more of R_OK, W_OK, and
X_OK to test permissions.  Return True if access is allowed,
False if not. See the Unix man page access(2) for more
information.
This function can support specifying paths relative to directory
descriptors and not following symlinks.
If effective_ids is True, access() will perform its access
checks using the effective uid/gid instead of the real uid/gid.
effective_ids may not be supported on your platform; you can check whether
or not it is available using os.supports_effective_ids.  If it is
unavailable, using it will raise a NotImplementedError.
Note
Using access() to check if a user is authorized to e.g. open a file
before actually doing so using open() creates a security hole,
because the user might exploit the short time interval between checking
and opening the file to manipulate it. It’s preferable to use EAFP
techniques. For example:
is better written as:
Note
I/O operations may fail even when access() indicates that they would
succeed, particularly for operations on network filesystems which may have
permissions semantics beyond the usual POSIX permission-bit model.
Changed in version 3.3: Added the dir_fd, effective_ids, and follow_symlinks parameters.
Values to pass as the mode parameter of access() to test the
existence, readability, writability and executability of path,
respectively.
Change the current working directory to path.
This function can support specifying a file descriptor.  The
descriptor must refer to an opened directory, not an open file.
New in version 3.3: Added support for specifying path as a file descriptor
on some platforms.
Set the flags of path to the numeric flags. flags may take a combination
(bitwise OR) of the following values (as defined in the stat module):
This function can support not following symlinks.
Availability: Unix.
New in version 3.3: The follow_symlinks argument.
Change the mode of path to the numeric mode. mode may take one of the
following values (as defined in the stat module) or bitwise ORed
combinations of them:
This function can support specifying a file descriptor,
paths relative to directory descriptors and not
following symlinks.
Note
Although Windows supports chmod(), you can only set the file’s
read-only flag with it (via the stat.S_IWRITE and stat.S_IREAD
constants or a corresponding integer value).  All other bits are ignored.
New in version 3.3: Added support for specifying path as an open file descriptor,
and the dir_fd and follow_symlinks arguments.
Change the owner and group id of path to the numeric uid and gid.  To
leave one of the ids unchanged, set it to -1.
This function can support specifying a file descriptor,
paths relative to directory descriptors and not
following symlinks.
See shutil.chown() for a higher-level function that accepts names in
addition to numeric ids.
Availability: Unix.
New in version 3.3: Added support for specifying an open file descriptor for path,
and the dir_fd and follow_symlinks arguments.
Change the root directory of the current process to path.
Availability: Unix.
Change the current working directory to the directory represented by the file
descriptor fd.  The descriptor must refer to an opened directory, not an
open file.  As of Python 3.3, this is equivalent to os.chdir(fd).
Availability: Unix.
Return a string representing the current working directory.
Return a bytestring representing the current working directory.
Set the flags of path to the numeric flags, like chflags(), but do
not follow symbolic links.  As of Python 3.3, this is equivalent to
os.chflags(path, flags, follow_symlinks=False).
Availability: Unix.
Change the mode of path to the numeric mode. If path is a symlink, this
affects the symlink rather than the target.  See the docs for chmod()
for possible values of mode.  As of Python 3.3, this is equivalent to
os.chmod(path, mode, follow_symlinks=False).
Availability: Unix.
Change the owner and group id of path to the numeric uid and gid.  This
function will not follow symbolic links.  As of Python 3.3, this is equivalent
to os.chown(path, uid, gid, follow_symlinks=False).
Availability: Unix.
Create a hard link pointing to src named dst.
This function can support specifying src_dir_fd and/or dst_dir_fd to
supply paths relative to directory descriptors, and not
following symlinks.
Availability: Unix, Windows.
Changed in version 3.2: Added Windows support.
New in version 3.3: Added the src_dir_fd, dst_dir_fd, and follow_symlinks arguments.
Return a list containing the names of the entries in the directory given by
path.  The list is in arbitrary order, and does not include the special
entries '.' and '..' even if they are present in the directory.
path may be either of type str or of type bytes.  If path
is of type bytes, the filenames returned will also be of type bytes;
in all other circumstances, they will be of type str.
This function can also support specifying a file descriptor; the file descriptor must refer to a directory.
Note
To encode str filenames to bytes, use fsencode().
See also
The scandir() function returns directory entries along with
file attribute information, giving better performance for many
common use cases.
Changed in version 3.2: The path parameter became optional.
New in version 3.3: Added support for specifying an open file descriptor for path.
Perform the equivalent of an lstat() system call on the given path.
Similar to stat(), but does not follow symbolic links. Return a
stat_result object.
On platforms that do not support symbolic links, this is an alias for
stat().
As of Python 3.3, this is equivalent to os.stat(path, dir_fd=dir_fd,
follow_symlinks=False).
This function can also support paths relative to directory descriptors.
See also
The stat() function.
Changed in version 3.2: Added support for Windows 6.0 (Vista) symbolic links.
Changed in version 3.3: Added the dir_fd parameter.
Create a directory named path with numeric mode mode.
If the directory already exists, FileExistsError is raised.
On some systems, mode is ignored.  Where it is used, the current umask
value is first masked out.  If bits other than the last 9 (i.e. the last 3
digits of the octal representation of the mode) are set, their meaning is
platform-dependent.  On some platforms, they are ignored and you should call
chmod() explicitly to set them.
This function can also support paths relative to directory descriptors.
It is also possible to create temporary directories; see the
tempfile module’s tempfile.mkdtemp() function.
New in version 3.3: The dir_fd argument.
Recursive directory creation function.  Like mkdir(), but makes all
intermediate-level directories needed to contain the leaf directory.
The mode parameter is passed to mkdir(); see the mkdir()
description for how it is interpreted.
If exist_ok is False (the default), an OSError is raised if the
target directory already exists.
Note
makedirs() will become confused if the path elements to create
include pardir (eg. ”..” on UNIX systems).
This function handles UNC paths correctly.
New in version 3.2: The exist_ok parameter.
Changed in version 3.4.1: Before Python 3.4.1, if exist_ok was True and the directory existed,
makedirs() would still raise an error if mode did not match the
mode of the existing directory. Since this behavior was impossible to
implement safely, it was removed in Python 3.4.1. See issue 21082.
Create a FIFO (a named pipe) named path with numeric mode mode.
The current umask value is first masked out from the mode.
This function can also support paths relative to directory descriptors.
FIFOs are pipes that can be accessed like regular files.  FIFOs exist until they
are deleted (for example with os.unlink()). Generally, FIFOs are used as
rendezvous between “client” and “server” type processes: the server opens the
FIFO for reading, and the client opens it for writing.  Note that mkfifo()
doesn’t open the FIFO — it just creates the rendezvous point.
Availability: Unix.
New in version 3.3: The dir_fd argument.
Create a filesystem node (file, device special file or named pipe) named
path. mode specifies both the permissions to use and the type of node
to be created, being combined (bitwise OR) with one of stat.S_IFREG,
stat.S_IFCHR, stat.S_IFBLK, and stat.S_IFIFO (those constants are
available in stat).  For stat.S_IFCHR and stat.S_IFBLK,
device defines the newly created device special file (probably using
os.makedev()), otherwise it is ignored.
This function can also support paths relative to directory descriptors.
New in version 3.3: The dir_fd argument.
Extract the device major number from a raw device number (usually the
st_dev or st_rdev field from stat).
Extract the device minor number from a raw device number (usually the
st_dev or st_rdev field from stat).
Compose a raw device number from the major and minor device numbers.
Return system configuration information relevant to a named file. name
specifies the configuration value to retrieve; it may be a string which is the
name of a defined system value; these names are specified in a number of
standards (POSIX.1, Unix 95, Unix 98, and others).  Some platforms define
additional names as well.  The names known to the host operating system are
given in the pathconf_names dictionary.  For configuration variables not
included in that mapping, passing an integer for name is also accepted.
If name is a string and is not known, ValueError is raised.  If a
specific value for name is not supported by the host system, even if it is
included in pathconf_names, an OSError is raised with
errno.EINVAL for the error number.
This function can support specifying a file descriptor.
Availability: Unix.
Dictionary mapping names accepted by pathconf() and fpathconf() to
the integer values defined for those names by the host operating system.  This
can be used to determine the set of names known to the system.
Availability: Unix.
Return a string representing the path to which the symbolic link points.  The
result may be either an absolute or relative pathname; if it is relative, it
may be converted to an absolute pathname using
os.path.join(os.path.dirname(path), result).
If the path is a string object, the result will also be a string object,
and the call may raise a UnicodeDecodeError. If the path is a bytes
object, the result will be a bytes object.
This function can also support paths relative to directory descriptors.
Availability: Unix, Windows
Changed in version 3.2: Added support for Windows 6.0 (Vista) symbolic links.
New in version 3.3: The dir_fd argument.
Remove (delete) the file path.  If path is a directory, OSError is
raised.  Use rmdir() to remove directories.
This function can support paths relative to directory descriptors.
On Windows, attempting to remove a file that is in use causes an exception to
be raised; on Unix, the directory entry is removed but the storage allocated
to the file is not made available until the original file is no longer in use.
This function is semantically identical to unlink().
New in version 3.3: The dir_fd argument.
Remove directories recursively.  Works like rmdir() except that, if the
leaf directory is successfully removed, removedirs()  tries to
successively remove every parent directory mentioned in  path until an error
is raised (which is ignored, because it generally means that a parent directory
is not empty). For example, os.removedirs('foo/bar/baz') will first remove
the directory 'foo/bar/baz', and then remove 'foo/bar' and 'foo' if
they are empty. Raises OSError if the leaf directory could not be
successfully removed.
Rename the file or directory src to dst.  If dst is a directory,
OSError will be raised.  On Unix, if dst exists and is a file, it will
be replaced silently if the user has permission.  The operation may fail on some
Unix flavors if src and dst are on different filesystems.  If successful,
the renaming will be an atomic operation (this is a POSIX requirement).  On
Windows, if dst already exists, OSError will be raised even if it is a
file.
This function can support specifying src_dir_fd and/or dst_dir_fd to
supply paths relative to directory descriptors.
If you want cross-platform overwriting of the destination, use replace().
New in version 3.3: The src_dir_fd and dst_dir_fd arguments.
Recursive directory or file renaming function. Works like rename(), except
creation of any intermediate directories needed to make the new pathname good is
attempted first. After the rename, directories corresponding to rightmost path
segments of the old name will be pruned away using removedirs().
Note
This function can fail with the new directory structure made if you lack
permissions needed to remove the leaf directory or file.
Rename the file or directory src to dst.  If dst is a directory,
OSError will be raised.  If dst exists and is a file, it will
be replaced silently if the user has permission.  The operation may fail
if src and dst are on different filesystems.  If successful,
the renaming will be an atomic operation (this is a POSIX requirement).
This function can support specifying src_dir_fd and/or dst_dir_fd to
supply paths relative to directory descriptors.
New in version 3.3.
Remove (delete) the directory path.  Only works when the directory is
empty, otherwise, OSError is raised.  In order to remove whole
directory trees, shutil.rmtree() can be used.
This function can support paths relative to directory descriptors.
New in version 3.3: The dir_fd parameter.
Return an iterator of DirEntry objects corresponding to the entries
in the directory given by path. The entries are yielded in arbitrary
order, and the special entries '.' and '..' are not included.
Using scandir() instead of listdir() can significantly
increase the performance of code that also needs file type or file
attribute information, because DirEntry objects expose this
information if the operating system provides it when scanning a directory.
All DirEntry methods may perform a system call, but
is_dir() and is_file() usually only
require a system call for symbolic links; DirEntry.stat()
always requires a system call on Unix but only requires one for
symbolic links on Windows.
On Unix, path can be of type str or bytes (use
fsencode() and fsdecode() to encode and decode
bytes paths). On Windows, path must be of type str.
On both systems, the type of the name and
path attributes of each DirEntry will be of
the same type as path.
The following example shows a simple use of scandir() to display all
the files (excluding directories) in the given path that don’t start with
'.'. The entry.is_file() call will generally not make an additional
system call:
Note
On Unix-based systems, scandir() uses the system’s
opendir()
and
readdir()
functions. On Windows, it uses the Win32
FindFirstFileW
and
FindNextFileW
functions.
New in version 3.5.
Object yielded by scandir() to expose the file path and other file
attributes of a directory entry.
scandir() will provide as much of this information as possible without
making additional system calls. When a stat() or lstat() system call
is made, the DirEntry object will cache the result.
DirEntry instances are not intended to be stored in long-lived data
structures; if you know the file metadata has changed or if a long time has
elapsed since calling scandir(), call os.stat(entry.path) to fetch
up-to-date information.
Because the DirEntry methods can make operating system calls, they may
also raise OSError. If you need very fine-grained
control over errors, you can catch OSError when calling one of the
DirEntry methods and handle as appropriate.
Attributes and methods on a DirEntry instance are as follows:
The entry’s base filename, relative to the scandir() path
argument.
The name attribute will be of the same type (str or
bytes) as the scandir() path argument. Use
fsdecode() to decode byte filenames.
The entry’s full path name: equivalent to os.path.join(scandir_path,
entry.name) where scandir_path is the scandir() path
argument.  The path is only absolute if the scandir() path
argument was absolute.
The path attribute will be of the same type (str or
bytes) as the scandir() path argument. Use
fsdecode() to decode byte filenames.
Return the inode number of the entry.
The result is cached on the DirEntry object. Use os.stat(entry.path,
follow_symlinks=False).st_ino to fetch up-to-date information.
On the first, uncached call, a system call is required on Windows but
not on Unix.
Return True if this entry is a directory or a symbolic link pointing
to a directory; return False if the entry is or points to any other
kind of file, or if it doesn’t exist anymore.
If follow_symlinks is False, return True only if this entry
is a directory (without following symlinks); return False if the
entry is any other kind of file or if it doesn’t exist anymore.
The result is cached on the DirEntry object, with a separate cache
for follow_symlinks True and False. Call os.stat() along
with stat.S_ISDIR() to fetch up-to-date information.
On the first, uncached call, no system call is required in most cases.
Specifically, for non-symlinks, neither Windows or Unix require a system
call, except on certain Unix file systems, such as network file systems,
that return dirent.d_type == DT_UNKNOWN. If the entry is a symlink,
a system call will be required to follow the symlink unless
follow_symlinks is False.
This method can raise OSError, such as PermissionError,
but FileNotFoundError is caught and not raised.
Return True if this entry is a file or a symbolic link pointing to a
file; return False if the entry is or points to a directory or other
non-file entry, or if it doesn’t exist anymore.
If follow_symlinks is False, return True only if this entry
is a file (without following symlinks); return False if the entry is
a directory or other non-file entry, or if it doesn’t exist anymore.
The result is cached on the DirEntry object. Caching, system calls
made, and exceptions raised are as per is_dir().
Return True if this entry is a symbolic link (even if broken);
return False if the entry points to a directory or any kind of file,
or if it doesn’t exist anymore.
The result is cached on the DirEntry object. Call
os.path.islink() to fetch up-to-date information.
On the first, uncached call, no system call is required in most cases.
Specifically, neither Windows or Unix require a system call, except on
certain Unix file systems, such as network file systems, that return
dirent.d_type == DT_UNKNOWN.
This method can raise OSError, such as PermissionError,
but FileNotFoundError is caught and not raised.
Return a stat_result object for this entry. This method
follows symbolic links by default; to stat a symbolic link add the
follow_symlinks=False argument.
On Unix, this method always requires a system call. On Windows, it
only requires a system call if follow_symlinks is True and the
entry is a symbolic link.
On Windows, the st_ino, st_dev and st_nlink attributes of the
stat_result are always set to zero. Call os.stat() to
get these attributes.
The result is cached on the DirEntry object, with a separate cache
for follow_symlinks True and False. Call os.stat() to
fetch up-to-date information.
Note that there is a nice correspondence between several attributes
and methods of DirEntry and of pathlib.Path.  In
particular, the name attribute has the same meaning, as do the
is_dir(), is_file(), is_symlink() and stat() methods.
New in version 3.5.
Get the status of a file or a file descriptor. Perform the equivalent of a
stat() system call on the given path. path may be specified as
either a string or as an open file descriptor. Return a stat_result
object.
This function normally follows symlinks; to stat a symlink add the argument
follow_symlinks=False, or use lstat().
This function can support specifying a file descriptor and
not following symlinks.
Example:
See also
fstat() and lstat() functions.
New in version 3.3: Added the dir_fd and follow_symlinks arguments, specifying a file
descriptor instead of a path.
Object whose attributes correspond roughly to the members of the
stat structure. It is used for the result of os.stat(),
os.fstat() and os.lstat().
Attributes:
File mode: file type and file mode bits (permissions).
Inode number.
Identifier of the device on which this file resides.
Number of hard links.
User identifier of the file owner.
Group identifier of the file owner.
Size of the file in bytes, if it is a regular file or a symbolic link.
The size of a symbolic link is the length of the pathname it contains,
without a terminating null byte.
Timestamps:
Time of most recent access expressed in seconds.
Time of most recent content modification expressed in seconds.
Platform dependent:
Time of most recent access expressed in nanoseconds as an integer.
Time of most recent content modification expressed in nanoseconds as an
integer.
Platform dependent:
See also the stat_float_times() function.
Note
The exact meaning and resolution of the st_atime,
st_mtime, and st_ctime attributes depend on the operating
system and the file system. For example, on Windows systems using the FAT
or FAT32 file systems, st_mtime has 2-second resolution, and
st_atime has only 1-day resolution.  See your operating system
documentation for details.
Similarly, although st_atime_ns, st_mtime_ns,
and st_ctime_ns are always expressed in nanoseconds, many
systems do not provide nanosecond precision.  On systems that do
provide nanosecond precision, the floating-point object used to
store st_atime, st_mtime, and st_ctime
cannot preserve all of it, and as such will be slightly inexact.
If you need the exact timestamps you should always use
st_atime_ns, st_mtime_ns, and st_ctime_ns.
On some Unix systems (such as Linux), the following attributes may also be
available:
Number of 512-byte blocks allocated for file.
This may be smaller than st_size/512 when the file has holes.
“Preferred” blocksize for efficient file system I/O. Writing to a file in
smaller chunks may cause an inefficient read-modify-rewrite.
Type of device if an inode device.
User defined flags for file.
On other Unix systems (such as FreeBSD), the following attributes may be
available (but may be only filled out if root tries to use them):
File generation number.
Time of file creation.
On Mac OS systems, the following attributes may also be available:
Real size of the file.
Creator of the file.
File type.
On Windows systems, the following attribute is also available:
Windows file attributes: dwFileAttributes member of the
BY_HANDLE_FILE_INFORMATION structure returned by
GetFileInformationByHandle(). See the FILE_ATTRIBUTE_*
constants in the stat module.
The standard module stat defines functions and constants that are
useful for extracting information from a stat structure. (On
Windows, some items are filled with dummy values.)
For backward compatibility, a stat_result instance is also
accessible as a tuple of at least 10 integers giving the most important (and
portable) members of the stat structure, in the order
st_mode, st_ino, st_dev, st_nlink,
st_uid, st_gid, st_size, st_atime,
st_mtime, st_ctime. More items may be added at the end by
some implementations. For compatibility with older Python versions,
accessing stat_result as a tuple always returns integers.
New in version 3.3: Added the st_atime_ns, st_mtime_ns, and
st_ctime_ns members.
New in version 3.5: Added the st_file_attributes member on Windows.
Determine whether stat_result represents time stamps as float objects.
If newvalue is True, future calls to stat() return floats, if it is
False, future calls return ints. If newvalue is omitted, return the
current setting.
For compatibility with older Python versions, accessing stat_result as
a tuple always returns integers.
Python now returns float values by default. Applications which do not work
correctly with floating point time stamps can use this function to restore the
old behaviour.
The resolution of the timestamps (that is the smallest possible fraction)
depends on the system. Some systems only support second resolution; on these
systems, the fraction will always be zero.
It is recommended that this setting is only changed at program startup time in
the __main__ module; libraries should never change this setting. If an
application uses a library that works incorrectly if floating point time stamps
are processed, this application should turn the feature off until the library
has been corrected.
Deprecated since version 3.3.
Perform a statvfs() system call on the given path.  The return value is
an object whose attributes describe the filesystem on the given path, and
correspond to the members of the statvfs structure, namely:
f_bsize, f_frsize, f_blocks, f_bfree,
f_bavail, f_files, f_ffree, f_favail,
f_flag, f_namemax.
Two module-level constants are defined for the f_flag attribute’s
bit-flags: if ST_RDONLY is set, the filesystem is mounted
read-only, and if ST_NOSUID is set, the semantics of
setuid/setgid bits are disabled or not supported.
Additional module-level constants are defined for GNU/glibc based systems.
These are ST_NODEV (disallow access to device special files),
ST_NOEXEC (disallow program execution), ST_SYNCHRONOUS
(writes are synced at once), ST_MANDLOCK (allow mandatory locks on an FS),
ST_WRITE (write on file/directory/symlink), ST_APPEND
(append-only file), ST_IMMUTABLE (immutable file), ST_NOATIME
(do not update access times), ST_NODIRATIME (do not update directory access
times), ST_RELATIME (update atime relative to mtime/ctime).
This function can support specifying a file descriptor.
Changed in version 3.2: The ST_RDONLY and ST_NOSUID constants were added.
Changed in version 3.4: The ST_NODEV, ST_NOEXEC, ST_SYNCHRONOUS,
ST_MANDLOCK, ST_WRITE, ST_APPEND,
ST_IMMUTABLE, ST_NOATIME, ST_NODIRATIME,
and ST_RELATIME constants were added.
Availability: Unix.
New in version 3.3: Added support for specifying an open file descriptor for path.
A Set object indicating which functions in the
os module permit use of their dir_fd parameter.  Different platforms
provide different functionality, and an option that might work on one might
be unsupported on another.  For consistency’s sakes, functions that support
dir_fd always allow specifying the parameter, but will raise an exception
if the functionality is not actually available.
To check whether a particular function permits use of its dir_fd
parameter, use the in operator on supports_dir_fd.  As an example,
this expression determines whether the dir_fd parameter of os.stat()
is locally available:
Currently dir_fd parameters only work on Unix platforms; none of them work
on Windows.
New in version 3.3.
A Set object indicating which functions in the
os module permit use of the effective_ids parameter for
os.access().  If the local platform supports it, the collection will
contain os.access(), otherwise it will be empty.
To check whether you can use the effective_ids parameter for
os.access(), use the in operator on supports_effective_ids,
like so:
Currently effective_ids only works on Unix platforms; it does not work on
Windows.
New in version 3.3.
A Set object indicating which functions in the
os module permit specifying their path parameter as an open file
descriptor.  Different platforms provide different functionality, and an
option that might work on one might be unsupported on another.  For
consistency’s sakes, functions that support fd always allow specifying
the parameter, but will raise an exception if the functionality is not
actually available.
To check whether a particular function permits specifying an open file
descriptor for its path parameter, use the in operator on
supports_fd. As an example, this expression determines whether
os.chdir() accepts open file descriptors when called on your local
platform:
New in version 3.3.
A Set object indicating which functions in the
os module permit use of their follow_symlinks parameter.  Different
platforms provide different functionality, and an option that might work on
one might be unsupported on another.  For consistency’s sakes, functions that
support follow_symlinks always allow specifying the parameter, but will
raise an exception if the functionality is not actually available.
To check whether a particular function permits use of its follow_symlinks
parameter, use the in operator on supports_follow_symlinks.  As an
example, this expression determines whether the follow_symlinks parameter
of os.stat() is locally available:
New in version 3.3.
Create a symbolic link pointing to src named dst.
On Windows, a symlink represents either a file or a directory, and does not
morph to the target dynamically.  If the target is present, the type of the
symlink will be created to match. Otherwise, the symlink will be created
as a directory if target_is_directory is True or a file symlink (the
default) otherwise.  On non-Window platforms, target_is_directory is ignored.
Symbolic link support was introduced in Windows 6.0 (Vista).  symlink()
will raise a NotImplementedError on Windows versions earlier than 6.0.
This function can support paths relative to directory descriptors.
Note
On Windows, the SeCreateSymbolicLinkPrivilege is required in order to
successfully create symlinks. This privilege is not typically granted to
regular users but is available to accounts which can escalate privileges
to the administrator level. Either obtaining the privilege or running your
application as an administrator are ways to successfully create symlinks.
OSError is raised when the function is called by an unprivileged
user.
Availability: Unix, Windows.
Changed in version 3.2: Added support for Windows 6.0 (Vista) symbolic links.
New in version 3.3: Added the dir_fd argument, and now allow target_is_directory
on non-Windows platforms.
Force write of everything to disk.
Availability: Unix.
New in version 3.3.
Truncate the file corresponding to path, so that it is at most
length bytes in size.
This function can support specifying a file descriptor.
Availability: Unix, Windows.
New in version 3.3.
Changed in version 3.5: Added support for Windows
Remove (delete) the file path.  This function is semantically
identical to remove(); the unlink name is its
traditional Unix name.  Please see the documentation for
remove() for further information.
New in version 3.3: The dir_fd parameter.
Set the access and modified times of the file specified by path.
utime() takes two optional parameters, times and ns.
These specify the times set on path and are used as follows:
It is an error to specify tuples for both times and ns.
Whether a directory can be given for path
depends on whether the operating system implements directories as files
(for example, Windows does not).  Note that the exact times you set here may
not be returned by a subsequent stat() call, depending on the
resolution with which your operating system records access and modification
times; see stat().  The best way to preserve exact times is to
use the st_atime_ns and st_mtime_ns fields from the os.stat()
result object with the ns parameter to utime.
This function can support specifying a file descriptor,
paths relative to directory descriptors and not
following symlinks.
New in version 3.3: Added support for specifying an open file descriptor for path,
and the dir_fd, follow_symlinks, and ns parameters.
Generate the file names in a directory tree by walking the tree
either top-down or bottom-up. For each directory in the tree rooted at directory
top (including top itself), it yields a 3-tuple (dirpath, dirnames,
filenames).
dirpath is a string, the path to the directory.  dirnames is a list of the
names of the subdirectories in dirpath (excluding '.' and '..').
filenames is a list of the names of the non-directory files in dirpath.
Note that the names in the lists contain no path components.  To get a full path
(which begins with top) to a file or directory in dirpath, do
os.path.join(dirpath, name).
If optional argument topdown is True or not specified, the triple for a
directory is generated before the triples for any of its subdirectories
(directories are generated top-down).  If topdown is False, the triple
for a directory is generated after the triples for all of its subdirectories
(directories are generated bottom-up). No matter the value of topdown, the
list of subdirectories is retrieved before the tuples for the directory and
its subdirectories are generated.
When topdown is True, the caller can modify the dirnames list in-place
(perhaps using del or slice assignment), and walk() will only
recurse into the subdirectories whose names remain in dirnames; this can be
used to prune the search, impose a specific order of visiting, or even to inform
walk() about directories the caller creates or renames before it resumes
walk() again.  Modifying dirnames when topdown is False has
no effect on the behavior of the walk, because in bottom-up mode the directories
in dirnames are generated before dirpath itself is generated.
By default, errors from the listdir() call are ignored.  If optional
argument onerror is specified, it should be a function; it will be called with
one argument, an OSError instance.  It can report the error to continue
with the walk, or raise the exception to abort the walk.  Note that the filename
is available as the filename attribute of the exception object.
By default, walk() will not walk down into symbolic links that resolve to
directories. Set followlinks to True to visit directories pointed to by
symlinks, on systems that support them.
Note
Be aware that setting followlinks to True can lead to infinite
recursion if a link points to a parent directory of itself. walk()
does not keep track of the directories it visited already.
Note
If you pass a relative pathname, don’t change the current working directory
between resumptions of walk().  walk() never changes the current
directory, and assumes that its caller doesn’t either.
This example displays the number of bytes taken by non-directory files in each
directory under the starting directory, except that it doesn’t look under any
CVS subdirectory:
In the next example (simple implementation of shutil.rmtree()),
walking the tree bottom-up is essential, rmdir() doesn’t allow
deleting a directory before the directory is empty:
Changed in version 3.5: This function now calls os.scandir() instead of os.listdir(),
making it faster by reducing the number of calls to os.stat().
This behaves exactly like walk(), except that it yields a 4-tuple
(dirpath, dirnames, filenames, dirfd), and it supports dir_fd.
dirpath, dirnames and filenames are identical to walk() output,
and dirfd is a file descriptor referring to the directory dirpath.
This function always supports paths relative to directory descriptors and not following symlinks.  Note however
that, unlike other functions, the fwalk() default value for
follow_symlinks is False.
Note
Since fwalk() yields file descriptors, those are only valid until
the next iteration step, so you should duplicate them (e.g. with
dup()) if you want to keep them longer.
This example displays the number of bytes taken by non-directory files in each
directory under the starting directory, except that it doesn’t look under any
CVS subdirectory:
In the next example, walking the tree bottom-up is essential:
rmdir() doesn’t allow deleting a directory before the directory is
empty:
Availability: Unix.
New in version 3.3.
New in version 3.3.
These functions are all available on Linux only.
Return the value of the extended filesystem attribute attribute for
path. attribute can be bytes or str. If it is str, it is encoded
with the filesystem encoding.
This function can support specifying a file descriptor and
not following symlinks.
Return a list of the extended filesystem attributes on path.  The
attributes in the list are represented as strings decoded with the filesystem
encoding.  If path is None, listxattr() will examine the current
directory.
This function can support specifying a file descriptor and
not following symlinks.
Removes the extended filesystem attribute attribute from path.
attribute should be bytes or str. If it is a string, it is encoded
with the filesystem encoding.
This function can support specifying a file descriptor and
not following symlinks.
Set the extended filesystem attribute attribute on path to value.
attribute must be a bytes or str with no embedded NULs. If it is a str,
it is encoded with the filesystem encoding.  flags may be
XATTR_REPLACE or XATTR_CREATE. If XATTR_REPLACE is
given and the attribute does not exist, EEXISTS will be raised.
If XATTR_CREATE is given and the attribute already exists, the
attribute will not be created and ENODATA will be raised.
This function can support specifying a file descriptor and
not following symlinks.
Note
A bug in Linux kernel versions less than 2.6.39 caused the flags argument
to be ignored on some filesystems.
The maximum size the value of an extended attribute can be. Currently, this
is 64 KiB on Linux.
This is a possible value for the flags argument in setxattr(). It
indicates the operation must create an attribute.
This is a possible value for the flags argument in setxattr(). It
indicates the operation must replace an existing attribute.
These functions may be used to create and manage processes.
The various exec* functions take a list of arguments for the new
program loaded into the process.  In each case, the first of these arguments is
passed to the new program as its own name rather than as an argument a user may
have typed on a command line.  For the C programmer, this is the argv[0]
passed to a program’s main().  For example, os.execv('/bin/echo',
['foo', 'bar']) will only print bar on standard output; foo will seem
to be ignored.
Generate a SIGABRT signal to the current process.  On Unix, the default
behavior is to produce a core dump; on Windows, the process immediately returns
an exit code of 3.  Be aware that calling this function will not call the
Python signal handler registered for SIGABRT with
signal.signal().
These functions all execute a new program, replacing the current process; they
do not return.  On Unix, the new executable is loaded into the current process,
and will have the same process id as the caller.  Errors will be reported as
OSError exceptions.
The current process is replaced immediately. Open file objects and
descriptors are not flushed, so if there may be data buffered
on these open files, you should flush them using
sys.stdout.flush() or os.fsync() before calling an
exec* function.
The “l” and “v” variants of the exec* functions differ in how
command-line arguments are passed.  The “l” variants are perhaps the easiest
to work with if the number of parameters is fixed when the code is written; the
individual parameters simply become additional parameters to the execl*()
functions.  The “v” variants are good when the number of parameters is
variable, with the arguments being passed in a list or tuple as the args
parameter.  In either case, the arguments to the child process should start with
the name of the command being run, but this is not enforced.
The variants which include a “p” near the end (execlp(),
execlpe(), execvp(), and execvpe()) will use the
PATH environment variable to locate the program file.  When the
environment is being replaced (using one of the exec*e variants,
discussed in the next paragraph), the new environment is used as the source of
the PATH variable. The other variants, execl(), execle(),
execv(), and execve(), will not use the PATH variable to
locate the executable; path must contain an appropriate absolute or relative
path.
For execle(), execlpe(), execve(), and execvpe() (note
that these all end in “e”), the env parameter must be a mapping which is
used to define the environment variables for the new process (these are used
instead of the current process’ environment); the functions execl(),
execlp(), execv(), and execvp() all cause the new process to
inherit the environment of the current process.
For execve() on some platforms, path may also be specified as an open
file descriptor.  This functionality may not be supported on your platform;
you can check whether or not it is available using os.supports_fd.
If it is unavailable, using it will raise a NotImplementedError.
Availability: Unix, Windows.
New in version 3.3: Added support for specifying an open file descriptor for path
for execve().
Exit the process with status n, without calling cleanup handlers, flushing
stdio buffers, etc.
Note
The standard way to exit is sys.exit(n).  _exit() should
normally only be used in the child process after a fork().
The following exit codes are defined and can be used with _exit(),
although they are not required.  These are typically used for system programs
written in Python, such as a mail server’s external command delivery program.
Note
Some of these may not be available on all Unix platforms, since there is some
variation.  These constants are defined where they are defined by the underlying
platform.
Exit code that means no error occurred.
Availability: Unix.
Exit code that means the command was used incorrectly, such as when the wrong
number of arguments are given.
Availability: Unix.
Exit code that means the input data was incorrect.
Availability: Unix.
Exit code that means an input file did not exist or was not readable.
Availability: Unix.
Exit code that means a specified user did not exist.
Availability: Unix.
Exit code that means a specified host did not exist.
Availability: Unix.
Exit code that means that a required service is unavailable.
Availability: Unix.
Exit code that means an internal software error was detected.
Availability: Unix.
Exit code that means an operating system error was detected, such as the
inability to fork or create a pipe.
Availability: Unix.
Exit code that means some system file did not exist, could not be opened, or had
some other kind of error.
Availability: Unix.
Exit code that means a user specified output file could not be created.
Availability: Unix.
Exit code that means that an error occurred while doing I/O on some file.
Availability: Unix.
Exit code that means a temporary failure occurred.  This indicates something
that may not really be an error, such as a network connection that couldn’t be
made during a retryable operation.
Availability: Unix.
Exit code that means that a protocol exchange was illegal, invalid, or not
understood.
Availability: Unix.
Exit code that means that there were insufficient permissions to perform the
operation (but not intended for file system problems).
Availability: Unix.
Exit code that means that some kind of configuration error occurred.
Availability: Unix.
Exit code that means something like “an entry was not found”.
Availability: Unix.
Fork a child process.  Return 0 in the child and the child’s process id in the
parent.  If an error occurs OSError is raised.
Note that some platforms including FreeBSD <= 6.3 and Cygwin have
known issues when using fork() from a thread.
Warning
See ssl for applications that use the SSL module with fork().
Availability: Unix.
Fork a child process, using a new pseudo-terminal as the child’s controlling
terminal. Return a pair of (pid, fd), where pid is 0 in the child, the
new child’s process id in the parent, and fd is the file descriptor of the
master end of the pseudo-terminal.  For a more portable approach, use the
pty module.  If an error occurs OSError is raised.
Availability: some flavors of Unix.
Send signal sig to the process pid.  Constants for the specific signals
available on the host platform are defined in the signal module.
Windows: The signal.CTRL_C_EVENT and
signal.CTRL_BREAK_EVENT signals are special signals which can
only be sent to console processes which share a common console window,
e.g., some subprocesses. Any other value for sig will cause the process
to be unconditionally killed by the TerminateProcess API, and the exit code
will be set to sig. The Windows version of kill() additionally takes
process handles to be killed.
See also signal.pthread_kill().
New in version 3.2: Windows support.
Send the signal sig to the process group pgid.
Availability: Unix.
Add increment to the process’s “niceness”.  Return the new niceness.
Availability: Unix.
Lock program segments into memory.  The value of op (defined in
<sys/lock.h>) determines which segments are locked.
Availability: Unix.
Open a pipe to or from command cmd.
The return value is an open file object
connected to the pipe, which can be read or written depending on whether mode
is 'r' (default) or 'w'. The buffering argument has the same meaning as
the corresponding argument to the built-in open() function. The
returned file object reads or writes text strings rather than bytes.
The close method returns None if the subprocess exited
successfully, or the subprocess’s return code if there was an
error. On POSIX systems, if the return code is positive it
represents the return value of the process left-shifted by one
byte.  If the return code is negative, the process was terminated
by the signal given by the negated value of the return code.  (For
example, the return value might be - signal.SIGKILL if the
subprocess was killed.)  On Windows systems, the return value
contains the signed integer return code from the child process.
This is implemented using subprocess.Popen; see that class’s
documentation for more powerful ways to manage and communicate with
subprocesses.
Execute the program path in a new process.
(Note that the subprocess module provides more powerful facilities for
spawning new processes and retrieving their results; using that module is
preferable to using these functions.  Check especially the
Replacing Older Functions with the subprocess Module section.)
If mode is P_NOWAIT, this function returns the process id of the new
process; if mode is P_WAIT, returns the process’s exit code if it
exits normally, or -signal, where signal is the signal that killed the
process.  On Windows, the process id will actually be the process handle, so can
be used with the waitpid() function.
The “l” and “v” variants of the spawn* functions differ in how
command-line arguments are passed.  The “l” variants are perhaps the easiest
to work with if the number of parameters is fixed when the code is written; the
individual parameters simply become additional parameters to the
spawnl*() functions.  The “v” variants are good when the number of
parameters is variable, with the arguments being passed in a list or tuple as
the args parameter.  In either case, the arguments to the child process must
start with the name of the command being run.
The variants which include a second “p” near the end (spawnlp(),
spawnlpe(), spawnvp(), and spawnvpe()) will use the
PATH environment variable to locate the program file.  When the
environment is being replaced (using one of the spawn*e variants,
discussed in the next paragraph), the new environment is used as the source of
the PATH variable.  The other variants, spawnl(),
spawnle(), spawnv(), and spawnve(), will not use the
PATH variable to locate the executable; path must contain an
appropriate absolute or relative path.
For spawnle(), spawnlpe(), spawnve(), and spawnvpe()
(note that these all end in “e”), the env parameter must be a mapping
which is used to define the environment variables for the new process (they are
used instead of the current process’ environment); the functions
spawnl(), spawnlp(), spawnv(), and spawnvp() all cause
the new process to inherit the environment of the current process.  Note that
keys and values in the env dictionary must be strings; invalid keys or
values will cause the function to fail, with a return value of 127.
As an example, the following calls to spawnlp() and spawnvpe() are
equivalent:
Availability: Unix, Windows.  spawnlp(), spawnlpe(), spawnvp()
and spawnvpe() are not available on Windows.  spawnle() and
spawnve() are not thread-safe on Windows; we advise you to use the
subprocess module instead.
Possible values for the mode parameter to the spawn* family of
functions.  If either of these values is given, the spawn*() functions
will return as soon as the new process has been created, with the process id as
the return value.
Availability: Unix, Windows.
Possible value for the mode parameter to the spawn* family of
functions.  If this is given as mode, the spawn*() functions will not
return until the new process has run to completion and will return the exit code
of the process the run is successful, or -signal if a signal kills the
process.
Availability: Unix, Windows.
Possible values for the mode parameter to the spawn* family of
functions.  These are less portable than those listed above. P_DETACH
is similar to P_NOWAIT, but the new process is detached from the
console of the calling process. If P_OVERLAY is used, the current
process will be replaced; the spawn* function will not return.
Availability: Windows.
Start a file with its associated application.
When operation is not specified or 'open', this acts like double-clicking
the file in Windows Explorer, or giving the file name as an argument to the
start command from the interactive command shell: the file is opened
with whatever application (if any) its extension is associated.
When another operation is given, it must be a “command verb” that specifies
what should be done with the file. Common verbs documented by Microsoft are
'print' and  'edit' (to be used on files) as well as 'explore' and
'find' (to be used on directories).
startfile() returns as soon as the associated application is launched.
There is no option to wait for the application to close, and no way to retrieve
the application’s exit status.  The path parameter is relative to the current
directory.  If you want to use an absolute path, make sure the first character
is not a slash ('/'); the underlying Win32 ShellExecute() function
doesn’t work if it is.  Use the os.path.normpath() function to ensure that
the path is properly encoded for Win32.
To reduce interpreter startup overhead, the Win32 ShellExecute()
function is not resolved until this function is first called.  If the function
cannot be resolved, NotImplementedError will be raised.
Availability: Windows.
Execute the command (a string) in a subshell.  This is implemented by calling
the Standard C function system(), and has the same limitations.
Changes to sys.stdin, etc. are not reflected in the environment of
the executed command. If command generates any output, it will be sent to
the interpreter standard output stream.
On Unix, the return value is the exit status of the process encoded in the
format specified for wait().  Note that POSIX does not specify the
meaning of the return value of the C system() function, so the return
value of the Python function is system-dependent.
On Windows, the return value is that returned by the system shell after
running command.  The shell is given by the Windows environment variable
COMSPEC: it is usually cmd.exe, which returns the exit
status of the command run; on systems using a non-native shell, consult your
shell documentation.
The subprocess module provides more powerful facilities for spawning
new processes and retrieving their results; using that module is preferable
to using this function.  See the Replacing Older Functions with the subprocess Module section in
the subprocess documentation for some helpful recipes.
Availability: Unix, Windows.
Returns the current global process times.
The return value is an object with five attributes:
For backwards compatibility, this object also behaves like a five-tuple
containing user, system, children_user,
children_system, and elapsed in that order.
See the Unix manual page
times(2) or the corresponding Windows Platform API documentation.
On Windows, only user and system are known; the other
attributes are zero.
Availability: Unix, Windows.
Changed in version 3.3: Return type changed from a tuple to a tuple-like object
with named attributes.
Wait for completion of a child process, and return a tuple containing its pid
and exit status indication: a 16-bit number, whose low byte is the signal number
that killed the process, and whose high byte is the exit status (if the signal
number is zero); the high bit of the low byte is set if a core file was
produced.
Availability: Unix.
Wait for the completion of one or more child processes.
idtype can be P_PID, P_PGID or P_ALL.
id specifies the pid to wait on.
options is constructed from the ORing of one or more of WEXITED,
WSTOPPED or WCONTINUED and additionally may be ORed with
WNOHANG or WNOWAIT. The return value is an object
representing the data contained in the siginfo_t structure, namely:
si_pid, si_uid, si_signo, si_status,
si_code or None if WNOHANG is specified and there are no
children in a waitable state.
Availability: Unix.
New in version 3.3.
These are the possible values for idtype in waitid(). They affect
how id is interpreted.
Availability: Unix.
New in version 3.3.
Flags that can be used in options in waitid() that specify what
child signal to wait for.
Availability: Unix.
New in version 3.3.
These are the possible values for si_code in the result returned by
waitid().
Availability: Unix.
New in version 3.3.
The details of this function differ on Unix and Windows.
On Unix: Wait for completion of a child process given by process id pid, and
return a tuple containing its process id and exit status indication (encoded as
for wait()).  The semantics of the call are affected by the value of the
integer options, which should be 0 for normal operation.
If pid is greater than 0, waitpid() requests status information for
that specific process.  If pid is 0, the request is for the status of any
child in the process group of the current process.  If pid is -1, the
request pertains to any child of the current process.  If pid is less than
-1, status is requested for any process in the process group -pid (the
absolute value of pid).
An OSError is raised with the value of errno when the syscall
returns -1.
On Windows: Wait for completion of a process given by process handle pid, and
return a tuple containing pid, and its exit status shifted left by 8 bits
(shifting makes cross-platform use of the function easier). A pid less than or
equal to 0 has no special meaning on Windows, and raises an exception. The
value of integer options has no effect. pid can refer to any process whose
id is known, not necessarily a child process. The spawn*
functions called with P_NOWAIT return suitable process handles.
Changed in version 3.5: If the system call is interrupted and the signal handler does not raise an
exception, the function now retries the system call instead of raising an
InterruptedError exception (see PEP 475 for the rationale).
Similar to waitpid(), except no process id argument is given and a
3-element tuple containing the child’s process id, exit status indication, and
resource usage information is returned.  Refer to resource.getrusage() for details on resource usage information.  The
option argument is the same as that provided to waitpid() and
wait4().
Availability: Unix.
Similar to waitpid(), except a 3-element tuple, containing the child’s
process id, exit status indication, and resource usage information is returned.
Refer to resource.getrusage() for details on
resource usage information.  The arguments to wait4() are the same
as those provided to waitpid().
Availability: Unix.
The option for waitpid() to return immediately if no child process status
is available immediately. The function returns (0, 0) in this case.
Availability: Unix.
This option causes child processes to be reported if they have been continued
from a job control stop since their status was last reported.
Availability: some Unix systems.
This option causes child processes to be reported if they have been stopped but
their current state has not been reported since they were stopped.
Availability: Unix.
The following functions take a process status code as returned by
system(), wait(), or waitpid() as a parameter.  They may be
used to determine the disposition of a process.
Return True if a core dump was generated for the process, otherwise
return False.
Availability: Unix.
Return True if the process has been continued from a job control stop,
otherwise return False.
Availability: Unix.
Return True if the process has been stopped, otherwise return
False.
Availability: Unix.
Return True if the process exited due to a signal, otherwise return
False.
Availability: Unix.
Return True if the process exited using the exit(2) system call,
otherwise return False.
Availability: Unix.
If WIFEXITED(status) is true, return the integer parameter to the
exit(2) system call.  Otherwise, the return value is meaningless.
Availability: Unix.
Return the signal which caused the process to stop.
Availability: Unix.
Return the signal which caused the process to exit.
Availability: Unix.
These functions control how a process is allocated CPU time by the operating
system. They are only available on some Unix platforms. For more detailed
information, consult your Unix manpages.
New in version 3.3.
The following scheduling policies are exposed if they are supported by the
operating system.
The default scheduling policy.
Scheduling policy for CPU-intensive processes that tries to preserve
interactivity on the rest of the computer.
Scheduling policy for extremely low priority background tasks.
Scheduling policy for sporadic server programs.
A First In First Out scheduling policy.
A round-robin scheduling policy.
This flag can be OR’ed with any other scheduling policy. When a process with
this flag set forks, its child’s scheduling policy and priority are reset to
the default.
This class represents tunable scheduling parameters used in
sched_setparam(), sched_setscheduler(), and
sched_getparam(). It is immutable.
At the moment, there is only one possible parameter:
The scheduling priority for a scheduling policy.
Get the minimum priority value for policy. policy is one of the
scheduling policy constants above.
Get the maximum priority value for policy. policy is one of the
scheduling policy constants above.
Set the scheduling policy for the process with PID pid. A pid of 0 means
the calling process. policy is one of the scheduling policy constants
above. param is a sched_param instance.
Return the scheduling policy for the process with PID pid. A pid of 0
means the calling process. The result is one of the scheduling policy
constants above.
Set a scheduling parameters for the process with PID pid. A pid of 0 means
the calling process. param is a sched_param instance.
Return the scheduling parameters as a sched_param instance for the
process with PID pid. A pid of 0 means the calling process.
Return the round-robin quantum in seconds for the process with PID pid. A
pid of 0 means the calling process.
Voluntarily relinquish the CPU.
Restrict the process with PID pid (or the current process if zero) to a
set of CPUs.  mask is an iterable of integers representing the set of
CPUs to which the process should be restricted.
Return the set of CPUs the process with PID pid (or the current process
if zero) is restricted to.
Return string-valued system configuration values. name specifies the
configuration value to retrieve; it may be a string which is the name of a
defined system value; these names are specified in a number of standards (POSIX,
Unix 95, Unix 98, and others).  Some platforms define additional names as well.
The names known to the host operating system are given as the keys of the
confstr_names dictionary.  For configuration variables not included in that
mapping, passing an integer for name is also accepted.
If the configuration value specified by name isn’t defined, None is
returned.
If name is a string and is not known, ValueError is raised.  If a
specific value for name is not supported by the host system, even if it is
included in confstr_names, an OSError is raised with
errno.EINVAL for the error number.
Availability: Unix.
Dictionary mapping names accepted by confstr() to the integer values
defined for those names by the host operating system. This can be used to
determine the set of names known to the system.
Availability: Unix.
Return the number of CPUs in the system. Returns None if undetermined.
New in version 3.4.
Return the number of processes in the system run queue averaged over the last
1, 5, and 15 minutes or raises OSError if the load average was
unobtainable.
Availability: Unix.
Return integer-valued system configuration values. If the configuration value
specified by name isn’t defined, -1 is returned.  The comments regarding
the name parameter for confstr() apply here as well; the dictionary that
provides information on the known names is given by sysconf_names.
Availability: Unix.
Dictionary mapping names accepted by sysconf() to the integer values
defined for those names by the host operating system. This can be used to
determine the set of names known to the system.
Availability: Unix.
The following data values are used to support path manipulation operations.  These
are defined for all platforms.
Higher-level operations on pathnames are defined in the os.path module.
The constant string used by the operating system to refer to the current
directory. This is '.' for Windows and POSIX. Also available via
os.path.
The constant string used by the operating system to refer to the parent
directory. This is '..' for Windows and POSIX. Also available via
os.path.
The character used by the operating system to separate pathname components.
This is '/' for POSIX and '\\' for Windows.  Note that knowing this
is not sufficient to be able to parse or concatenate pathnames — use
os.path.split() and os.path.join() — but it is occasionally
useful. Also available via os.path.
An alternative character used by the operating system to separate pathname
components, or None if only one separator character exists.  This is set to
'/' on Windows systems where sep is a backslash. Also available via
os.path.
The character which separates the base filename from the extension; for example,
the '.' in os.py. Also available via os.path.
The character conventionally used by the operating system to separate search
path components (as in PATH), such as ':' for POSIX or ';' for
Windows. Also available via os.path.
The default search path used by exec*p* and
spawn*p* if the environment doesn’t have a 'PATH'
key. Also available via os.path.
The string used to separate (or, rather, terminate) lines on the current
platform.  This may be a single character, such as '\n' for POSIX, or
multiple characters, for example, '\r\n' for Windows. Do not use
os.linesep as a line terminator when writing files opened in text mode (the
default); use a single '\n' instead, on all platforms.
The file path of the null device. For example: '/dev/null' for
POSIX, 'nul' for Windows.  Also available via os.path.
Flags for use with the setdlopenflags() and
getdlopenflags() functions.  See the Unix manual page
dlopen(3) for what the different flags mean.
New in version 3.3.
Return a string of n random bytes suitable for cryptographic use.
This function returns random bytes from an OS-specific randomness source.  The
returned data should be unpredictable enough for cryptographic applications,
though its exact quality depends on the OS implementation.
On Linux, getrandom() syscall is used if available and the urandom
entropy pool is initialized (getrandom() does not block).
On a Unix-like system this will query /dev/urandom. On Windows, it
will use CryptGenRandom().  If a randomness source is not found,
NotImplementedError will be raised.
For an easy-to-use interface to the random number generator
provided by your platform, please see random.SystemRandom.
Changed in version 3.5.2: On Linux, if getrandom() blocks (the urandom entropy pool is not
initialized yet), fall back on reading /dev/urandom.
Changed in version 3.5: On Linux 3.17 and newer, the getrandom() syscall is now used
when available.  On OpenBSD 5.6 and newer, the C getentropy()
function is now used. These functions avoid the usage of an internal file
descriptor.
16. Generic Operating System Services
16.2. io — Core tools for working with streams

    Enter search terms or a module, class or function name.
    

