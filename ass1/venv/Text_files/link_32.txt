URL: https://docs.python.org/3/tutorial/datastructures.html

Title: 5. Data Structures — Python 3.5.2 documentation

Doc Id: 32

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :This chapter describes some things you’ve learned about already in more detail,
and adds some new things as well.
The list data type has some more methods.  Here are all of the methods of list
objects:
Add an item to the end of the list.  Equivalent to a[len(a):] = [x].
Extend the list by appending all the items in the given list.  Equivalent to
a[len(a):] = L.
Insert an item at a given position.  The first argument is the index of the
element before which to insert, so a.insert(0, x) inserts at the front of
the list, and a.insert(len(a), x) is equivalent to a.append(x).
Remove the first item from the list whose value is x.  It is an error if
there is no such item.
Remove the item at the given position in the list, and return it.  If no index
is specified, a.pop() removes and returns the last item in the list.  (The
square brackets around the i in the method signature denote that the parameter
is optional, not that you should type square brackets at that position.  You
will see this notation frequently in the Python Library Reference.)
Remove all items from the list.  Equivalent to del a[:].
Return the index in the list of the first item whose value is x. It is an
error if there is no such item.
Return the number of times x appears in the list.
Sort the items of the list in place (the arguments can be used for sort
customization, see sorted() for their explanation).
Reverse the elements of the list in place.
Return a shallow copy of the list.  Equivalent to a[:].
An example that uses most of the list methods:
You might have noticed that methods like insert, remove or sort that
only modify the list have no return value printed – they return the default
None. [1]  This is a design principle for all mutable data structures in
Python.
The list methods make it very easy to use a list as a stack, where the last
element added is the first element retrieved (“last-in, first-out”).  To add an
item to the top of the stack, use append().  To retrieve an item from the
top of the stack, use pop() without an explicit index.  For example:
It is also possible to use a list as a queue, where the first element added is
the first element retrieved (“first-in, first-out”); however, lists are not
efficient for this purpose.  While appends and pops from the end of list are
fast, doing inserts or pops from the beginning of a list is slow (because all
of the other elements have to be shifted by one).
To implement a queue, use collections.deque which was designed to
have fast appends and pops from both ends.  For example:
List comprehensions provide a concise way to create lists.
Common applications are to make new lists where each element is the result of
some operations applied to each member of another sequence or iterable, or to
create a subsequence of those elements that satisfy a certain condition.
For example, assume we want to create a list of squares, like:
Note that this creates (or overwrites) a variable named x that still exists
after the loop completes.  We can calculate the list of squares without any
side effects using:
or, equivalently:
which is more concise and readable.
A list comprehension consists of brackets containing an expression followed
by a for clause, then zero or more for or if
clauses.  The result will be a new list resulting from evaluating the expression
in the context of the for and if clauses which follow it.
For example, this listcomp combines the elements of two lists if they are not
equal:
and it’s equivalent to:
Note how the order of the for and if statements is the
same in both these snippets.
If the expression is a tuple (e.g. the (x, y) in the previous example),
it must be parenthesized.
List comprehensions can contain complex expressions and nested functions:
The initial expression in a list comprehension can be any arbitrary expression,
including another list comprehension.
Consider the following example of a 3x4 matrix implemented as a list of
3 lists of length 4:
The following list comprehension will transpose rows and columns:
As we saw in the previous section, the nested listcomp is evaluated in
the context of the for that follows it, so this example is
equivalent to:
which, in turn, is the same as:
In the real world, you should prefer built-in functions to complex flow statements.
The zip() function would do a great job for this use case:
See Unpacking Argument Lists for details on the asterisk in this line.
There is a way to remove an item from a list given its index instead of its
value: the del statement.  This differs from the pop() method
which returns a value.  The del statement can also be used to remove
slices from a list or clear the entire list (which we did earlier by assignment
of an empty list to the slice).  For example:
del can also be used to delete entire variables:
Referencing the name a hereafter is an error (at least until another value
is assigned to it).  We’ll find other uses for del later.
We saw that lists and strings have many common properties, such as indexing and
slicing operations.  They are two examples of sequence data types (see
Sequence Types — list, tuple, range).  Since Python is an evolving language, other sequence data
types may be added.  There is also another standard sequence data type: the
tuple.
A tuple consists of a number of values separated by commas, for instance:
As you see, on output tuples are always enclosed in parentheses, so that nested
tuples are interpreted correctly; they may be input with or without surrounding
parentheses, although often parentheses are necessary anyway (if the tuple is
part of a larger expression).  It is not possible to assign to the individual
items of a tuple, however it is possible to create tuples which contain mutable
objects, such as lists.
Though tuples may seem similar to lists, they are often used in different
situations and for different purposes.
Tuples are immutable, and usually contain a heterogeneous sequence of
elements that are accessed via unpacking (see later in this section) or indexing
(or even by attribute in the case of namedtuples).
Lists are mutable, and their elements are usually homogeneous and are
accessed by iterating over the list.
A special problem is the construction of tuples containing 0 or 1 items: the
syntax has some extra quirks to accommodate these.  Empty tuples are constructed
by an empty pair of parentheses; a tuple with one item is constructed by
following a value with a comma (it is not sufficient to enclose a single value
in parentheses). Ugly, but effective.  For example:
The statement t = 12345, 54321, 'hello!' is an example of tuple packing:
the values 12345, 54321 and 'hello!' are packed together in a tuple.
The reverse operation is also possible:
This is called, appropriately enough, sequence unpacking and works for any
sequence on the right-hand side.  Sequence unpacking requires that there are as
many variables on the left side of the equals sign as there are elements in the
sequence.  Note that multiple assignment is really just a combination of tuple
packing and sequence unpacking.
Python also includes a data type for sets.  A set is an unordered collection
with no duplicate elements.  Basic uses include membership testing and
eliminating duplicate entries.  Set objects also support mathematical operations
like union, intersection, difference, and symmetric difference.
Curly braces or the set() function can be used to create sets.  Note: to
create an empty set you have to use set(), not {}; the latter creates an
empty dictionary, a data structure that we discuss in the next section.
Here is a brief demonstration:
Similarly to list comprehensions, set comprehensions
are also supported:
Another useful data type built into Python is the dictionary (see
Mapping Types — dict). Dictionaries are sometimes found in other languages as
“associative memories” or “associative arrays”.  Unlike sequences, which are
indexed by a range of numbers, dictionaries are indexed by keys, which can be
any immutable type; strings and numbers can always be keys.  Tuples can be used
as keys if they contain only strings, numbers, or tuples; if a tuple contains
any mutable object either directly or indirectly, it cannot be used as a key.
You can’t use lists as keys, since lists can be modified in place using index
assignments, slice assignments, or methods like append() and
extend().
It is best to think of a dictionary as an unordered set of key: value pairs,
with the requirement that the keys are unique (within one dictionary). A pair of
braces creates an empty dictionary: {}. Placing a comma-separated list of
key:value pairs within the braces adds initial key:value pairs to the
dictionary; this is also the way dictionaries are written on output.
The main operations on a dictionary are storing a value with some key and
extracting the value given the key.  It is also possible to delete a key:value
pair with del. If you store using a key that is already in use, the old
value associated with that key is forgotten.  It is an error to extract a value
using a non-existent key.
Performing list(d.keys()) on a dictionary returns a list of all the keys
used in the dictionary, in arbitrary order (if you want it sorted, just use
sorted(d.keys()) instead). [2]  To check whether a single key is in the
dictionary, use the in keyword.
Here is a small example using a dictionary:
The dict() constructor builds dictionaries directly from sequences of
key-value pairs:
In addition, dict comprehensions can be used to create dictionaries from
arbitrary key and value expressions:
When the keys are simple strings, it is sometimes easier to specify pairs using
keyword arguments:
When looping through dictionaries, the key and corresponding value can be
retrieved at the same time using the items() method.
When looping through a sequence, the position index and corresponding value can
be retrieved at the same time using the enumerate() function.
To loop over two or more sequences at the same time, the entries can be paired
with the zip() function.
To loop over a sequence in reverse, first specify the sequence in a forward
direction and then call the reversed() function.
To loop over a sequence in sorted order, use the sorted() function which
returns a new sorted list while leaving the source unaltered.
It is sometimes tempting to change a list while you are looping over it;
however, it is often simpler and safer to create a new list instead.
The conditions used in while and if statements can contain any
operators, not just comparisons.
The comparison operators in and not in check whether a value occurs
(does not occur) in a sequence.  The operators is and is not compare
whether two objects are really the same object; this only matters for mutable
objects like lists.  All comparison operators have the same priority, which is
lower than that of all numerical operators.
Comparisons can be chained.  For example, a < b == c tests whether a is
less than b and moreover b equals c.
Comparisons may be combined using the Boolean operators and and or, and
the outcome of a comparison (or of any other Boolean expression) may be negated
with not.  These have lower priorities than comparison operators; between
them, not has the highest priority and or the lowest, so that A and
not B or C is equivalent to (A and (not B)) or C. As always, parentheses
can be used to express the desired composition.
The Boolean operators and and or are so-called short-circuit
operators: their arguments are evaluated from left to right, and evaluation
stops as soon as the outcome is determined.  For example, if A and C are
true but B is false, A and B and C does not evaluate the expression
C.  When used as a general value and not as a Boolean, the return value of a
short-circuit operator is the last evaluated argument.
It is possible to assign the result of a comparison or other Boolean expression
to a variable.  For example,
Note that in Python, unlike C, assignment cannot occur inside expressions. C
programmers may grumble about this, but it avoids a common class of problems
encountered in C programs: typing = in an expression when == was
intended.
Sequence objects may be compared to other objects with the same sequence type.
The comparison uses lexicographical ordering: first the first two items are
compared, and if they differ this determines the outcome of the comparison; if
they are equal, the next two items are compared, and so on, until either
sequence is exhausted. If two items to be compared are themselves sequences of
the same type, the lexicographical comparison is carried out recursively.  If
all items of two sequences compare equal, the sequences are considered equal.
If one sequence is an initial sub-sequence of the other, the shorter sequence is
the smaller (lesser) one.  Lexicographical ordering for strings uses the Unicode
code point number to order individual characters.  Some examples of comparisons
between sequences of the same type:
Note that comparing objects of different types with < or > is legal
provided that the objects have appropriate comparison methods.  For example,
mixed numeric types are compared according to their numeric value, so 0 equals
0.0, etc.  Otherwise, rather than providing an arbitrary ordering, the
interpreter will raise a TypeError exception.
Footnotes
4. More Control Flow Tools
6. Modules

    Enter search terms or a module, class or function name.
    

