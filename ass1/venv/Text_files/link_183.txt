URL: https://docs.python.org/3/library/ipaddress.html

Title: 21.28. ipaddress — IPv4/IPv6 manipulation library — Python 3.5.2 documentation

Doc Id: 183

Meta Tags : No meta tag found in document

Date :Aug 04, 2016

Content :Source code: Lib/ipaddress.py
ipaddress provides the capabilities to create, manipulate and
operate on IPv4 and IPv6 addresses and networks.
The functions and classes in this module make it straightforward to handle
various tasks related to IP addresses, including checking whether or not two
hosts are on the same subnet, iterating over all hosts in a particular
subnet, checking whether or not a string represents a valid IP address or
network definition, and so on.
This is the full module API reference—for an overview and introduction, see
An introduction to the ipaddress module.
New in version 3.3.
The ipaddress module provides factory functions to conveniently create
IP addresses, networks and interfaces:
Return an IPv4Address or IPv6Address object depending on
the IP address passed as argument.  Either IPv4 or IPv6 addresses may be
supplied; integers less than 2**32 will be considered to be IPv4 by default.
A ValueError is raised if address does not represent a valid IPv4
or IPv6 address.
Return an IPv4Network or IPv6Network object depending on
the IP address passed as argument.  address is a string or integer
representing the IP network.  Either IPv4 or IPv6 networks may be supplied;
integers less than 2**32 will be considered to be IPv4 by default.  strict
is passed to IPv4Network or IPv6Network constructor.  A
ValueError is raised if address does not represent a valid IPv4 or
IPv6 address, or if the network has host bits set.
Return an IPv4Interface or IPv6Interface object depending
on the IP address passed as argument.  address is a string or integer
representing the IP address.  Either IPv4 or IPv6 addresses may be supplied;
integers less than 2**32 will be considered to be IPv4 by default.  A
ValueError is raised if address does not represent a valid IPv4 or
IPv6 address.
One downside of these convenience functions is that the need to handle both
IPv4 and IPv6 formats means that error messages provide minimal
information on the precise error, as the functions don’t know whether the
IPv4 or IPv6 format was intended. More detailed error reporting can be
obtained by calling the appropriate version specific class constructors
directly.
The IPv4Address and IPv6Address objects share a lot of common
attributes.  Some attributes that are only meaningful for IPv6 addresses are
also implemented by IPv4Address objects, in order to make it easier to
write code that handles both IP versions correctly.
Construct an IPv4 address.  An AddressValueError is raised if
address is not a valid IPv4 address.
The following constitutes a valid IPv4 address:
The appropriate version number: 4 for IPv4, 6 for IPv6.
The total number of bits in the address representation for this
version: 32 for IPv4, 128 for IPv6.
The prefix defines the number of leading bits in an  address that
are compared to determine whether or not an address is part of a
network.
The string representation in dotted decimal notation. Leading zeroes
are never included in the representation.
As IPv4 does not define a shorthand notation for addresses with octets
set to zero, these two attributes are always the same as str(addr)
for IPv4 addresses. Exposing these attributes makes it easier to
write display code that can handle both IPv4 and IPv6 addresses.
The binary representation of this address - a bytes object of
the appropriate length (most significant octet first). This is 4 bytes
for IPv4 and 16 bytes for IPv6.
The name of the reverse DNS PTR record for the IP address, e.g.:
This is the name that could be used for performing a PTR lookup, not the
resolved hostname itself.
New in version 3.5.
True if the address is reserved for multicast use.  See
RFC 3171 (for IPv4) or RFC 2373 (for IPv6).
True if the address is allocated for private networks.  See
iana-ipv4-special-registry (for IPv4) or iana-ipv6-special-registry
(for IPv6).
True if the address is allocated for public networks.  See
iana-ipv4-special-registry (for IPv4) or iana-ipv6-special-registry
(for IPv6).
New in version 3.4.
True if the address is unspecified.  See RFC 5735 (for IPv4)
or RFC 2373 (for IPv6).
True if the address is otherwise IETF reserved.
True if this is a loopback address.  See RFC 3330 (for IPv4)
or RFC 2373 (for IPv6).
True if the address is reserved for link-local usage.  See
RFC 3927.
Construct an IPv6 address.  An AddressValueError is raised if
address is not a valid IPv6 address.
The following constitutes a valid IPv6 address:
The short form of the address representation, with leading zeroes in
groups omitted and the longest sequence of groups consisting entirely of
zeroes collapsed to a single empty group.
This is also the value returned by str(addr) for IPv6 addresses.
The long form of the address representation, with all leading zeroes and
groups consisting entirely of zeroes included.
For the following attributes, see the corresponding documention of the
IPv4Address class:
New in version 3.4: is_global
True if the address is reserved for site-local usage.  Note that
the site-local address space has been deprecated by RFC 3879. Use
is_private to test if this address is in the
space of unique local addresses as defined by RFC 4193.
For addresses that appear to be IPv4 mapped addresses (starting with
::FFFF/96), this property will report the embedded IPv4 address.
For any other address, this property will be None.
For addresses that appear to be 6to4 addresses  (starting with
2002::/16) as defined by RFC 3056, this property will report
the embedded IPv4 address.  For any other address, this property will
be None.
For addresses that appear to be Teredo addresses (starting with
2001::/32) as defined by RFC 4380, this property will report
the embedded (server, client) IP address pair.  For any other
address, this property will be None.
To interoperate with networking interfaces such as the socket module,
addresses must be converted to strings or integers. This is handled using
the str() and int() builtin functions:
Address objects support some operators.  Unless stated otherwise, operators can
only be applied between compatible objects (i.e. IPv4 with IPv4, IPv6 with
IPv6).
Address objects can be compared with the usual set of comparison operators.  Some
examples:
Integers can be added to or subtracted from address objects.  Some examples:
The IPv4Network and IPv6Network objects provide a mechanism
for defining and inspecting IP network definitions.  A network definition
consists of a mask and a network address, and as such defines a range of
IP addresses that equal the network address when masked (binary AND) with the
mask.  For example, a network definition with the mask 255.255.255.0 and
the network address 192.168.1.0 consists of IP addresses in the inclusive
range 192.168.1.0 to 192.168.1.255.
There are several equivalent ways to specify IP network masks.  A prefix
/<nbits> is a notation that denotes how many high-order bits are set in
the network mask.  A net mask is an IP address with some number of
high-order bits set.  Thus the prefix /24 is equivalent to the net mask
255.255.255.0 in IPv4, or ffff:ff00:: in IPv6.  In addition, a
host mask is the logical inverse of a net mask, and is sometimes used
(for example in Cisco access control lists) to denote a network mask.  The
host mask equivalent to /24 in IPv4 is 0.0.0.255.
All attributes implemented by address objects are implemented by network
objects as well.  In addition, network objects implement additional attributes.
All of these are common between IPv4Network and IPv6Network,
so to avoid duplication they are only documented for IPv4Network.
Construct an IPv4 network definition.  address can be one of the following:
A string consisting of an IP address and an optional mask, separated by
a slash (/).  The IP address is the network address, and the mask
can be either a single number, which means it’s a prefix, or a string
representation of an IPv4 address.  If it’s the latter, the mask is
interpreted as a net mask if it starts with a non-zero field, or as
a host mask if it starts with a zero field.  If no mask is provided,
it’s considered to be /32.
For example, the following address specifications are equivalent:
192.168.1.0/24, 192.168.1.0/255.255.255.0 and
192.168.1.0/0.0.0.255.
An integer that fits into 32 bits.  This is equivalent to a
single-address network, with the network address being address and
the mask being /32.
An integer packed into a bytes object of length 4, big-endian.
The interpretation is similar to an integer address.
A two-tuple of an address description and a netmask, where the address
description is either a string, a 32-bits integer, a 4-bytes packed
integer, or an existing IPv4Address object; and the netmask is either
an integer representing the prefix length (e.g. 24) or a string
representing the prefix mask (e.g. 255.255.255.0).
An AddressValueError is raised if address is not a valid IPv4
address.  A NetmaskValueError is raised if the mask is not valid for
an IPv4 address.
If strict is True and host bits are set in the supplied address,
then ValueError is raised.  Otherwise, the host bits are masked out
to determine the appropriate network address.
Unless stated otherwise, all network methods accepting other network/address
objects will raise TypeError if the argument’s IP version is
incompatible to self
Changed in version 3.5: Added the two-tuple form for the address constructor parameter.
Refer to the corresponding attribute documentation in
IPv4Address
These attributes are true for the network as a whole if they are true
for both the network address and the broadcast address
The network address for the network. The network address and the
prefix length together uniquely define a network.
The broadcast address for the network. Packets sent to the broadcast
address should be received by every host on the network.
The host mask, as a string.
A string representation of the network, with the mask in prefix
notation.
with_prefixlen and compressed are always the same as
str(network).
exploded uses the exploded form the network address.
A string representation of the network, with the mask in net mask
notation.
A string representation of the network, with the mask in host mask
notation.
The total number of addresses in the network.
Length of the network prefix, in bits.
Returns an iterator over the usable hosts in the network.  The usable
hosts are all the IP addresses that belong to the network, except the
network address itself and the network broadcast address.
True if this network is partly or wholly contained in other or
other is wholly contained in this network.
Computes the network definitions resulting from removing the given
network from this one.  Returns an iterator of network objects.
Raises ValueError if network is not completely contained in
this network.
The subnets that join to make the current network definition, depending
on the argument values.  prefixlen_diff is the amount our prefix
length should be increased by.  new_prefix is the desired new
prefix of the subnets; it must be larger than our prefix.  One and
only one of prefixlen_diff and new_prefix must be set.  Returns an
iterator of network objects.
The supernet containing this network definition, depending on the
argument values.  prefixlen_diff is the amount our prefix length
should be decreased by.  new_prefix is the desired new prefix of
the supernet; it must be smaller than our prefix.  One and only one
of prefixlen_diff and new_prefix must be set.  Returns a single
network object.
Compare this network to other.  In this comparison only the network
addresses are considered; host bits aren’t.  Returns either -1,
0 or 1.
Construct an IPv6 network definition.  address can be one of the following:
A string consisting of an IP address and an optional mask, separated by
a slash (/).  The IP address is the network address, and the mask
can be either a single number, which means it’s a prefix, or a string
representation of an IPv6 address.  If it’s the latter, the mask is
interpreted as a net mask.  If no mask is provided, it’s considered to
be /128.
For example, the following address specifications are equivalent:
2001:db00::0/24 and 2001:db00::0/ffff:ff00::.
An integer that fits into 128 bits.  This is equivalent to a
single-address network, with the network address being address and
the mask being /128.
An integer packed into a bytes object of length 16, big-endian.
The interpretation is similar to an integer address.
A two-tuple of an address description and a netmask, where the address
description is either a string, a 128-bits integer, a 16-bytes packed
integer, or an existing IPv6Address object; and the netmask is an
integer representing the prefix length.
An AddressValueError is raised if address is not a valid IPv6
address.  A NetmaskValueError is raised if the mask is not valid for
an IPv6 address.
If strict is True and host bits are set in the supplied address,
then ValueError is raised.  Otherwise, the host bits are masked out
to determine the appropriate network address.
Changed in version 3.5: Added the two-tuple form for the address constructor parameter.
Refer to the corresponding attribute documentation in
IPv4Network
These attribute is true for the network as a whole if it is true
for both the network address and the broadcast address
Network objects support some operators.  Unless stated otherwise, operators can
only be applied between compatible objects (i.e. IPv4 with IPv4, IPv6 with
IPv6).
Network objects can be compared with the usual set of logical operators,
similarly to address objects.
Network objects can be iterated to list all the addresses belonging to the
network.  For iteration, all hosts are returned, including unusable hosts
(for usable hosts, use the hosts() method).  An
example:
Network objects can act as containers of addresses.  Some examples:
Construct an IPv4 interface.  The meaning of address is as in the
constructor of IPv4Network, except that arbitrary host addresses
are always accepted.
IPv4Interface is a subclass of IPv4Address, so it inherits
all the attributes from that class.  In addition, the following attributes
are available:
The address (IPv4Address) without network information.
The network (IPv4Network) this interface belongs to.
A string representation of the interface with the mask in prefix notation.
A string representation of the interface with the network as a net mask.
A string representation of the interface with the network as a host mask.
Construct an IPv6 interface.  The meaning of address is as in the
constructor of IPv6Network, except that arbitrary host addresses
are always accepted.
IPv6Interface is a subclass of IPv6Address, so it inherits
all the attributes from that class.  In addition, the following attributes
are available:
Refer to the corresponding attribute documentation in
IPv4Interface.
The module also provides the following module level functions:
Represent an address as 4 packed bytes in network (big-endian) order.
address is an integer representation of an IPv4 IP address.  A
ValueError is raised if the integer is negative or too large to be an
IPv4 IP address.
Represent an address as 16 packed bytes in network (big-endian) order.
address is an integer representation of an IPv6 IP address.  A
ValueError is raised if the integer is negative or too large to be an
IPv6 IP address.
Return an iterator of the summarized network range given the first and last
IP addresses.  first is the first IPv4Address or
IPv6Address in the range and last is the last IPv4Address
or IPv6Address in the range.  A TypeError is raised if
first or last are not IP addresses or are not of the same version.  A
ValueError is raised if last is not greater than first or if
first address version is not 4 or 6.
Return an iterator of the collapsed IPv4Network or
IPv6Network objects.  addresses is an iterator of
IPv4Network or IPv6Network objects.  A TypeError is
raised if addresses contains mixed version objects.
Return a key suitable for sorting between networks and addresses.  Address
and Network objects are not sortable by default; they’re fundamentally
different, so the expression:
doesn’t make sense.  There are some times however, where you may wish to
have ipaddress sort these anyway.  If you need to do this, you can use
this function as the key argument to sorted().
obj is either a network or address object.
To support more specific error reporting from class constructors, the
module defines the following exceptions:
Any value error related to the address.
Any value error related to the netmask.
21.27. xmlrpc.server — Basic XML-RPC servers
22. Multimedia Services

    Enter search terms or a module, class or function name.
    

