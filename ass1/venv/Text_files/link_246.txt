URL: https://docs.python.org/3/library/symtable.html

Title: 32.3. symtable — Access to the compiler’s symbol tables — Python 3.5.2 documentation

Doc Id: 246

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :Source code: Lib/symtable.py
Symbol tables are generated by the compiler from AST just before bytecode is
generated.  The symbol table is responsible for calculating the scope of every
identifier in the code.  symtable provides an interface to examine these
tables.
Return the toplevel SymbolTable for the Python source code.
filename is the name of the file containing the code.  compile_type is
like the mode argument to compile().
A namespace table for a block.  The constructor is not public.
Return the type of the symbol table.  Possible values are 'class',
'module', and 'function'.
Return the table’s identifier.
Return the table’s name.  This is the name of the class if the table is
for a class, the name of the function if the table is for a function, or
'top' if the table is global (get_type() returns 'module').
Return the number of the first line in the block this table represents.
Return True if the locals in this table can be optimized.
Return True if the block is a nested class or function.
Return True if the block has nested namespaces within it.  These can
be obtained with get_children().
Return True if the block uses exec.
Return a list of names of symbols in this table.
Lookup name in the table and return a Symbol instance.
Return a list of Symbol instances for names in the table.
Return a list of the nested symbol tables.
A namespace for a function or method.  This class inherits
SymbolTable.
Return a tuple containing names of parameters to this function.
Return a tuple containing names of locals in this function.
Return a tuple containing names of globals in this function.
Return a tuple containing names of free variables in this function.
A namespace of a class.  This class inherits SymbolTable.
Return a tuple containing the names of methods declared in the class.
An entry in a SymbolTable corresponding to an identifier in the
source.  The constructor is not public.
Return the symbol’s name.
Return True if the symbol is used in its block.
Return True if the symbol is created from an import statement.
Return True if the symbol is a parameter.
Return True if the symbol is global.
Return True if the symbol is declared global with a global statement.
Return True if the symbol is local to its block.
Return True if the symbol is referenced in its block, but not assigned
to.
Return True if the symbol is assigned to in its block.
Return True if name binding introduces new namespace.
If the name is used as the target of a function or class statement, this
will be true.
For example:
Note that a single name can be bound to multiple objects.  If the result
is True, the name may also be bound to other objects, like an int or
list, that does not introduce a new namespace.
Return a list of namespaces bound to this name.
Return the namespace bound to this name.  If more than one namespace is
bound, ValueError is raised.
32.2. ast — Abstract Syntax Trees
32.4. symbol — Constants used with Python parse trees

    Enter search terms or a module, class or function name.
    

