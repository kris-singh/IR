URL: https://docs.python.org/3/library/enum.html

Title: 8.13. enum — Support for enumerations — Python 3.5.2 documentation

Doc Id: 71

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :New in version 3.4.
Source code: Lib/enum.py
An enumeration is a set of symbolic names (members) bound to unique,
constant values.  Within an enumeration, the members can be compared
by identity, and the enumeration itself can be iterated over.
This module defines two enumeration classes that can be used to define unique
sets of names and values: Enum and IntEnum.  It also defines
one decorator, unique().
Base class for creating enumerated constants.  See section
Functional API for an alternate construction syntax.
Base class for creating enumerated constants that are also
subclasses of int.
Enum class decorator that ensures only one name is bound to any one value.
Enumerations are created using the class syntax, which makes them
easy to read and write.  An alternative creation method is described in
Functional API.  To define an enumeration, subclass Enum as
follows:
Note
Nomenclature
Note
Even though we use the class syntax to create Enums, Enums
are not normal Python classes.  See How are Enums different? for
more details.
Enumeration members have human readable string representations:
...while their repr has more information:
The type of an enumeration member is the enumeration it belongs to:
Enum members also have a property that contains just their item name:
Enumerations support iteration, in definition order:
Enumeration members are hashable, so they can be used in dictionaries and sets:
Sometimes it’s useful to access members in enumerations programmatically (i.e.
situations where Color.red won’t do because the exact color is not known
at program-writing time).  Enum allows such access:
If you want to access enum members by name, use item access:
If you have an enum member and need its name or value:
Having two enum members with the same name is invalid:
However, two enum members are allowed to have the same value.  Given two members
A and B with the same value (and A defined first), B is an alias to A.  By-value
lookup of the value of A and B will return A.  By-name lookup of B will also
return A:
Note
Attempting to create a member with the same name as an already
defined attribute (another member, a method, etc.) or attempting to create
an attribute with the same name as a member is not allowed.
By default, enumerations allow multiple names as aliases for the same value.
When this behavior isn’t desired, the following decorator can be used to
ensure each value is used only once in the enumeration:
A class decorator specifically for enumerations.  It searches an
enumeration’s __members__ gathering any aliases it finds; if any are
found ValueError is raised with the details:
Iterating over the members of an enum does not provide the aliases:
The special attribute __members__ is an ordered dictionary mapping names
to members.  It includes all names defined in the enumeration, including the
aliases:
The __members__ attribute can be used for detailed programmatic access to
the enumeration members.  For example, finding all the aliases:
Enumeration members are compared by identity:
Ordered comparisons between enumeration values are not supported.  Enum
members are not integers (but see IntEnum below):
Equality comparisons are defined though:
Comparisons against non-enumeration values will always compare not equal
(again, IntEnum was explicitly designed to behave differently, see
below):
The examples above use integers for enumeration values.  Using integers is
short and handy (and provided by default by the Functional API), but not
strictly enforced.  In the vast majority of use-cases, one doesn’t care what
the actual value of an enumeration is.  But if the value is important,
enumerations can have arbitrary values.
Enumerations are Python classes, and can have methods and special methods as
usual.  If we have this enumeration:
Then:
The rules for what is allowed are as follows: names that start and end with
a single underscore are reserved by enum and cannot be used; all other
attributes defined within an enumeration will become members of this
enumeration, with the exception of special methods (__str__(),
__add__(), etc.) and descriptors (methods are also descriptors).
Note:  if your enumeration defines __new__() and/or __init__() then
whatever value(s) were given to the enum member will be passed into those
methods.  See Planet for an example.
Subclassing an enumeration is allowed only if the enumeration does not define
any members.  So this is forbidden:
But this is allowed:
Allowing subclassing of enums that define members would lead to a violation of
some important invariants of types and instances.  On the other hand, it makes
sense to allow sharing some common behavior between a group of enumerations.
(See OrderedEnum for an example.)
Enumerations can be pickled and unpickled:
The usual restrictions for pickling apply: picklable enums must be defined in
the top level of a module, since unpickling requires them to be importable
from that module.
Note
With pickle protocol version 4 it is possible to easily pickle enums
nested in other classes.
It is possible to modify how Enum members are pickled/unpickled by defining
__reduce_ex__() in the enumeration class.
The Enum class is callable, providing the following functional API:
The semantics of this API resemble namedtuple. The first
argument of the call to Enum is the name of the enumeration.
The second argument is the source of enumeration member names.  It can be a
whitespace-separated string of names, a sequence of names, a sequence of
2-tuples with key/value pairs, or a mapping (e.g. dictionary) of names to
values.  The last two options enable assigning arbitrary values to
enumerations; the others auto-assign increasing integers starting with 1 (use
the start parameter to specify a different starting value).  A
new class derived from Enum is returned.  In other words, the above
assignment to Animal is equivalent to:
The reason for defaulting to 1 as the starting number and not 0 is
that 0 is False in a boolean sense, but enum members all evaluate
to True.
Pickling enums created with the functional API can be tricky as frame stack
implementation details are used to try and figure out which module the
enumeration is being created in (e.g. it will fail if you use a utility
function in separate module, and also may not work on IronPython or Jython).
The solution is to specify the module name explicitly as follows:
Warning
If module is not supplied, and Enum cannot determine what it is,
the new Enum members will not be unpicklable; to keep errors closer to
the source, pickling will be disabled.
The new pickle protocol 4 also, in some circumstances, relies on
__qualname__ being set to the location where pickle will be able
to find the class.  For example, if the class was made available in class
SomeData in the global scope:
The complete signature is:
What the new Enum class will record as its name.
The Enum members.  This can be a whitespace or comma separated string
(values will start at 1 unless otherwise specified):
or an iterator of names:
or an iterator of (name, value) pairs:
or a mapping:
name of module where new Enum class can be found.
where in module new Enum class can be found.
type to mix in to new Enum class.
number to start counting at if only names are passed in.
Changed in version 3.5: The start parameter was added.
A variation of Enum is provided which is also a subclass of
int.  Members of an IntEnum can be compared to integers;
by extension, integer enumerations of different types can also be compared
to each other:
However, they still can’t be compared to standard Enum enumerations:
IntEnum values behave like integers in other ways you’d expect:
For the vast majority of code, Enum is strongly recommended,
since IntEnum breaks some semantic promises of an enumeration (by
being comparable to integers, and thus by transitivity to other
unrelated enumerations).  It should be used only in special cases where
there’s no other choice; for example, when integer constants are
replaced with enumerations and backwards compatibility is required with code
that still expects integers.
While IntEnum is part of the enum module, it would be very
simple to implement independently:
This demonstrates how similar derived enumerations can be defined; for example
a StrEnum that mixes in str instead of int.
Some rules:
While Enum and IntEnum are expected to cover the majority of
use-cases, they cannot cover them all.  Here are recipes for some different
types of enumerations that can be used directly, or as examples for creating
one’s own.
Avoids having to specify the value for each enumeration member:
Note
The __new__() method, if defined, is used during creation of the Enum
members; it is then replaced by Enum’s __new__() which is used after
class creation for lookup of existing members.
An ordered enumeration that is not based on IntEnum and so maintains
the normal Enum invariants (such as not being comparable to other
enumerations):
Raises an error if a duplicate member name is found instead of creating an
alias:
Note
This is a useful example for subclassing Enum to add or change other
behaviors as well as disallowing aliases.  If the only desired change is
disallowing aliases, the unique() decorator can be used instead.
If __new__() or __init__() is defined the value of the enum member
will be passed to those methods:
Enums have a custom metaclass that affects many aspects of both derived Enum
classes and their instances (members).
The EnumMeta metaclass is responsible for providing the
__contains__(), __dir__(), __iter__() and other methods that
allow one to do things with an Enum class that fail on a typical
class, such as list(Color) or some_var in Color.  EnumMeta is
responsible for ensuring that various other methods on the final Enum
class are correct (such as __new__(), __getnewargs__(),
__str__() and __repr__()).
The most interesting thing about Enum members is that they are singletons.
EnumMeta creates them all while it is creating the Enum
class itself, and then puts a custom __new__() in place to ensure
that no new ones are ever instantiated by returning only the existing
member instances.
Enum members are instances of an Enum class, and even
though they are accessible as EnumClass.member, they should not be accessed
directly from the member as that lookup may fail or, worse, return something
besides the Enum member you looking for:
Changed in version 3.5.
The __members__ attribute is only available on the class.
If you give your Enum subclass extra methods, like the Planet
class above, those methods will show up in a dir() of the member,
but not of the class:
The __new__() method will only be used for the creation of the
Enum members – after that it is replaced.  Any custom __new__()
method must create the object and set the _value_ attribute
appropriately.
If you wish to change how Enum members are looked up you should either
write a helper function or a classmethod() for the Enum
subclass.
8.12. reprlib — Alternate repr() implementation
9. Numeric and Mathematical Modules

    Enter search terms or a module, class or function name.
    

