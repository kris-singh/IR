URL: https://docs.python.org/3/library/uuid.html

Title: 21.20. uuid — UUID objects according to RFC 4122 — Python 3.5.2 documentation

Doc Id: 455

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :Source code: Lib/uuid.py
This module provides immutable UUID objects (the UUID class)
and the functions uuid1(), uuid3(), uuid4(), uuid5() for
generating version 1, 3, 4, and 5 UUIDs as specified in RFC 4122.
If all you want is a unique ID, you should probably call uuid1() or
uuid4().  Note that uuid1() may compromise privacy since it creates
a UUID containing the computer’s network address.  uuid4() creates a
random UUID.
Create a UUID from either a string of 32 hexadecimal digits, a string of 16
bytes as the bytes argument, a string of 16 bytes in little-endian order as
the bytes_le argument, a tuple of six integers (32-bit time_low, 16-bit
time_mid, 16-bit time_hi_version, 8-bit clock_seq_hi_variant, 8-bit
clock_seq_low, 48-bit node) as the fields argument, or a single 128-bit
integer as the int argument.  When a string of hex digits is given, curly
braces, hyphens, and a URN prefix are all optional.  For example, these
expressions all yield the same UUID:
Exactly one of hex, bytes, bytes_le, fields, or int must be given.
The version argument is optional; if given, the resulting UUID will have its
variant and version number set according to RFC 4122, overriding bits in the
given hex, bytes, bytes_le, fields, or int.
UUID instances have these read-only attributes:
The UUID as a 16-byte string (containing the six integer fields in big-endian
byte order).
The UUID as a 16-byte string (with time_low, time_mid, and time_hi_version
in little-endian byte order).
A tuple of the six integer fields of the UUID, which are also available as six
individual attributes and two derived attributes:
The UUID as a 32-character hexadecimal string.
The UUID as a 128-bit integer.
The UUID as a URN as specified in RFC 4122.
The UUID variant, which determines the internal layout of the UUID. This will be
one of the integer constants RESERVED_NCS, RFC_4122,
RESERVED_MICROSOFT, or RESERVED_FUTURE.
The UUID version number (1 through 5, meaningful only when the variant is
RFC_4122).
The uuid module defines the following functions:
Get the hardware address as a 48-bit positive integer.  The first time this
runs, it may launch a separate program, which could be quite slow.  If all
attempts to obtain the hardware address fail, we choose a random 48-bit number
with its eighth bit set to 1 as recommended in RFC 4122.  “Hardware address”
means the MAC address of a network interface, and on a machine with multiple
network interfaces the MAC address of any one of them may be returned.
Generate a UUID from a host ID, sequence number, and the current time. If node
is not given, getnode() is used to obtain the hardware address. If
clock_seq is given, it is used as the sequence number; otherwise a random
14-bit sequence number is chosen.
Generate a UUID based on the MD5 hash of a namespace identifier (which is a
UUID) and a name (which is a string).
Generate a random UUID.
Generate a UUID based on the SHA-1 hash of a namespace identifier (which is a
UUID) and a name (which is a string).
The uuid module defines the following namespace identifiers for use with
uuid3() or uuid5().
When this namespace is specified, the name string is a fully-qualified domain
name.
When this namespace is specified, the name string is a URL.
When this namespace is specified, the name string is an ISO OID.
When this namespace is specified, the name string is an X.500 DN in DER or a
text output format.
The uuid module defines the following constants for the possible values
of the variant attribute:
Reserved for NCS compatibility.
Specifies the UUID layout given in RFC 4122.
Reserved for Microsoft compatibility.
Reserved for future definition.
See also
Here are some examples of typical usage of the uuid module:
21.19. telnetlib — Telnet client
21.21. socketserver — A framework for network servers

    Enter search terms or a module, class or function name.
    

