URL: https://docs.python.org/3/library/cmath.html

Title: 9.3. cmath — Mathematical functions for complex numbers — Python 3.5.2 documentation

Doc Id: 74

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :This module is always available.  It provides access to mathematical functions
for complex numbers.  The functions in this module accept integers,
floating-point numbers or complex numbers as arguments. They will also accept
any Python object that has either a __complex__() or a __float__()
method: these methods are used to convert the object to a complex or
floating-point number, respectively, and the function is then applied to the
result of the conversion.
Note
On platforms with hardware and system-level support for signed
zeros, functions involving branch cuts are continuous on both
sides of the branch cut: the sign of the zero distinguishes one
side of the branch cut from the other.  On platforms that do not
support signed zeros the continuity is as specified below.
A Python complex number z is stored internally using rectangular
or Cartesian coordinates.  It is completely determined by its real
part z.real and its imaginary part z.imag.  In other
words:
Polar coordinates give an alternative way to represent a complex
number.  In polar coordinates, a complex number z is defined by the
modulus r and the phase angle phi. The modulus r is the distance
from z to the origin, while the phase phi is the counterclockwise
angle, measured in radians, from the positive x-axis to the line
segment that joins the origin to z.
The following functions can be used to convert from the native
rectangular coordinates to polar coordinates and back.
Return the phase of x (also known as the argument of x), as a
float.  phase(x) is equivalent to math.atan2(x.imag,
x.real).  The result lies in the range [-π, π], and the branch
cut for this operation lies along the negative real axis,
continuous from above.  On systems with support for signed zeros
(which includes most systems in current use), this means that the
sign of the result is the same as the sign of x.imag, even when
x.imag is zero:
Note
The modulus (absolute value) of a complex number x can be
computed using the built-in abs() function.  There is no
separate cmath module function for this operation.
Return the representation of x in polar coordinates.  Returns a
pair (r, phi) where r is the modulus of x and phi is the
phase of x.  polar(x) is equivalent to (abs(x),
phase(x)).
Return the complex number x with polar coordinates r and phi.
Equivalent to r * (math.cos(phi) + math.sin(phi)*1j).
Return the exponential value e**x.
Returns the logarithm of x to the given base. If the base is not
specified, returns the natural logarithm of x. There is one branch cut, from 0
along the negative real axis to -∞, continuous from above.
Return the base-10 logarithm of x. This has the same branch cut as
log().
Return the square root of x. This has the same branch cut as log().
Return the arc cosine of x. There are two branch cuts: One extends right from
1 along the real axis to ∞, continuous from below. The other extends left from
-1 along the real axis to -∞, continuous from above.
Return the arc sine of x. This has the same branch cuts as acos().
Return the arc tangent of x. There are two branch cuts: One extends from
1j along the imaginary axis to ∞j, continuous from the right. The
other extends from -1j along the imaginary axis to -∞j, continuous
from the left.
Return the cosine of x.
Return the sine of x.
Return the tangent of x.
Return the inverse hyperbolic cosine of x. There is one branch cut,
extending left from 1 along the real axis to -∞, continuous from above.
Return the inverse hyperbolic sine of x. There are two branch cuts:
One extends from 1j along the imaginary axis to ∞j,
continuous from the right.  The other extends from -1j along
the imaginary axis to -∞j, continuous from the left.
Return the inverse hyperbolic tangent of x. There are two branch cuts: One
extends from 1 along the real axis to ∞, continuous from below. The
other extends from -1 along the real axis to -∞, continuous from
above.
Return the hyperbolic cosine of x.
Return the hyperbolic sine of x.
Return the hyperbolic tangent of x.
Return True if both the real and imaginary parts of x are finite, and
False otherwise.
New in version 3.2.
Return True if either the real or the imaginary part of x is an
infinity, and False otherwise.
Return True if either the real or the imaginary part of x is a NaN,
and False otherwise.
Return True if the values a and b are close to each other and
False otherwise.
Whether or not two values are considered close is determined according to
given absolute and relative tolerances.
rel_tol is the relative tolerance – it is the maximum allowed difference
between a and b, relative to the larger absolute value of a or b.
For example, to set a tolerance of 5%, pass rel_tol=0.05.  The default
tolerance is 1e-09, which assures that the two values are the same
within about 9 decimal digits.  rel_tol must be greater than zero.
abs_tol is the minimum absolute tolerance – useful for comparisons near
zero. abs_tol must be at least zero.
If no errors occur, the result will be:
abs(a-b) <= max(rel_tol * max(abs(a), abs(b)), abs_tol).
The IEEE 754 special values of NaN, inf, and -inf will be
handled according to IEEE rules.  Specifically, NaN is not considered
close to any other value, including NaN.  inf and -inf are only
considered close to themselves.
New in version 3.5.
See also
PEP 485 – A function for testing approximate equality
The mathematical constant π, as a float.
The mathematical constant e, as a float.
Note that the selection of functions is similar, but not identical, to that in
module math.  The reason for having two modules is that some users aren’t
interested in complex numbers, and perhaps don’t even know what they are.  They
would rather have math.sqrt(-1) raise an exception than return a complex
number. Also note that the functions defined in cmath always return a
complex number, even if the answer can be expressed as a real number (in which
case the complex number has an imaginary part of zero).
A note on branch cuts: They are curves along which the given function fails to
be continuous.  They are a necessary feature of many complex functions.  It is
assumed that if you need to compute with complex functions, you will understand
about branch cuts.  Consult almost any (not too elementary) book on complex
variables for enlightenment.  For information of the proper choice of branch
cuts for numerical purposes, a good reference should be the following:
See also
Kahan, W:  Branch cuts for complex elementary functions; or, Much ado about
nothing’s sign bit.  In Iserles, A., and Powell, M. (eds.), The state of the art
in numerical analysis. Clarendon Press (1987) pp165-211.
9.2. math — Mathematical functions
9.4. decimal — Decimal fixed point and floating point arithmetic

    Enter search terms or a module, class or function name.
    

