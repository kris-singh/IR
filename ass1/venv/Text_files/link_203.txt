URL: https://docs.python.org/3/library/idle.html

Title: 25.5. IDLE — Python 3.5.2 documentation

Doc Id: 203

Meta Tags : No meta tag found in document

Date :Jul 29, 2016

Content :Source code: Lib/idlelib/
IDLE is Python’s Integrated Development and Learning Environment.
IDLE has the following features:
IDLE has two main window types, the Shell window and the Editor window.  It is
possible to have multiple editor windows simultaneously.  Output windows, such
as used for Edit / Find in Files, are a subtype of edit window.  They currently
have the same top menu as Editor windows but a different default title and
context menu.
IDLE’s menus dynamically change based on which window is currently selected.
Each menu documented below indicates which window type it is associated with.
The clipboard functions are also available in context menus.
Open a configuration dialog and change preferences for the following:
fonts, indentation, keybindings, text color themes, startup windows and
size, additional help sources, and extensions (see below).  On OS X,
open the configuration dialog by selecting Preferences in the application
menu.  To use a new built-in color theme (IDLE Dark) with older IDLEs,
save it as a new custom theme.
Non-default user settings are saved in a .idlerc directory in the user’s
home directory.  Problems caused by bad user configuration files are solved
by editing or deleting one or more of the files in .idlerc.
The rest of this menu lists the names of all open windows; select one to bring
it to the foreground (deiconifying it if necessary).
Additional help sources may be added here with the Configure IDLE dialog under
the General tab.
Open a context menu by right-clicking in a window (Control-click on OS X).
Context menus have the standard clipboard functions also on the Edit menu.
Editor windows also have breakpoint functions.  Lines with a breakpoint set are
specially marked.  Breakpoints only have an effect when running under the
debugger.  Breakpoints for a file are saved in the user’s .idlerc directory.
Shell and Output windows have the following.
In this section, ‘C’ refers to the Control key on Windows and Unix and
the Command key on Mac OSX.
Backspace deletes to the left; Del deletes to the right
C-Backspace delete word left; C-Del delete word to the right
Arrow keys and Page Up/Page Down to move around
C-LeftArrow and C-RightArrow moves by words
Home/End go to begin/end of line
C-Home/C-End go to begin/end of file
Some useful Emacs bindings are inherited from Tcl/Tk:
Standard keybindings (like C-c to copy and C-v to paste)
may work.  Keybindings are selected in the Configure IDLE dialog.
After a block-opening statement, the next line is indented by 4 spaces (in the
Python Shell window by one tab).  After certain keywords (break, return etc.)
the next line is dedented.  In leading indentation, Backspace deletes up
to 4 spaces if they are there. Tab inserts spaces (in the Python
Shell window one tab), number depends on Indent width. Currently tabs
are restricted to four spaces due to Tcl/Tk limitations.
See also the indent/dedent region commands in the edit menu.
Completions are supplied for functions, classes, and attributes of classes,
both built-in and user-defined. Completions are also provided for
filenames.
The AutoCompleteWindow (ACW) will open after a predefined delay (default is
two seconds) after a ‘.’ or (in a string) an os.sep is typed. If after one
of those characters (plus zero or more other characters) a tab is typed
the ACW will open immediately if a possible continuation is found.
If there is only one possible completion for the characters entered, a
Tab will supply that completion without opening the ACW.
‘Show Completions’ will force open a completions window, by default the
C-space will open a completions window. In an empty
string, this will contain the files in the current directory. On a
blank line, it will contain the built-in and user-defined functions and
classes in the current name spaces, plus any modules imported. If some
characters have been entered, the ACW will attempt to be more specific.
If a string of characters is typed, the ACW selection will jump to the
entry most closely matching those characters.  Entering a tab will
cause the longest non-ambiguous match to be entered in the Editor window or
Shell.  Two tab in a row will supply the current ACW selection, as
will return or a double click.  Cursor keys, Page Up/Down, mouse selection,
and the scroll wheel all operate on the ACW.
“Hidden” attributes can be accessed by typing the beginning of hidden
name after a ‘.’, e.g. ‘_’. This allows access to modules with
__all__ set, or to class-private attributes.
Completions and the ‘Expand Word’ facility can save a lot of typing!
Completions are currently limited to those in the namespaces. Names in
an Editor window which are not via __main__ and sys.modules will
not be found.  Run the module once with your imports to correct this situation.
Note that IDLE itself places quite a few modules in sys.modules, so
much can be found by default, e.g. the re module.
If you don’t like the ACW popping up unbidden, simply make the delay
longer or disable the extension.
A calltip is shown when one types ( after the name of an acccessible
function.  A name expression may include dots and subscripts.  A calltip
remains until it is clicked, the cursor is moved out of the argument area,
or ) is typed.  When the cursor is in the argument part of a definition,
the menu or shortcut display a calltip.
A calltip consists of the function signature and the first line of the
docstring.  For builtins without an accessible signature, the calltip
consists of all lines up the fifth line or the first blank line.  These
details may change.
The set of accessible functions depends on what modules have been imported
into the user process, including those imported by Idle itself,
and what definitions have been run, all since the last restart.
For example, restart the Shell and enter itertools.count(.  A calltip
appears because Idle imports itertools into the user process for its own use.
(This could change.)  Enter turtle.write( and nothing appears.  Idle does
not import turtle.  The menu or shortcut do nothing either.  Enter
import turtle and then turtle.write( will work.
In an editor, import statements have no effect until one runs the file.  One
might want to run a file after writing the import statements at the top,
or immediately run an existing file before editing.
C-c interrupts executing command
C-d sends end-of-file; closes window if typed at a >>> prompt
Alt-/ (Expand word) is also useful to reduce typing
Command history
Idle defaults to black on white text, but colors text with special meanings.
For the shell, these are shell output, shell error, user output, and
user error.  For Python code, at the shell prompt or in an editor, these are
keywords, builtin class and function names, names following class and
def, strings, and comments. For any text window, these are the cursor (when
present), found text (when possible), and selected text.
Text coloring is done in the background, so uncolorized text is occasionally
visible.  To change the color scheme, use the Configure IDLE dialog
Highlighting tab.  The marking of debugger breakpoint lines in the editor and
text in popups and dialogs is not user-configurable.
Upon startup with the -s option, IDLE will execute the file referenced by
the environment variables IDLESTARTUP or PYTHONSTARTUP.
IDLE first checks for IDLESTARTUP; if IDLESTARTUP is present the file
referenced is run.  If IDLESTARTUP is not present, IDLE checks for
PYTHONSTARTUP.  Files referenced by these environment variables are
convenient places to store functions that are used frequently from the IDLE
shell, or for executing import statements to import common modules.
In addition, Tk also loads a startup file if it is present.  Note that the
Tk file is loaded unconditionally.  This additional file is .Idle.py and is
looked for in the user’s home directory.  Statements in this file will be
executed in the Tk namespace, so this file is not useful for importing
functions to be used from IDLE’s Python shell.
If there are arguments:
As much as possible, the result of executing Python code with IDLE is the
same as executing the same code in a console window.  However, the different
interface and operation occasionally affects visible results.  For instance,
sys.modules starts with more entries.
IDLE also replaces sys.stdin, sys.stdout, and sys.stderr with
objects that get input from and send output to the Shell window.
When this window has the focus, it controls the keyboard and screen.
This is normally transparent, but functions that directly access the keyboard
and screen will not work.  If sys is reset with importlib.reload(sys),
IDLE’s changes are lost and things li ke input, raw_input, and
print will not work correctly.
With IDLE’s Shell, one enters, edits, and recalls complete statements.
Some consoles only work with a single physical line at a time.
By default, IDLE executes user code in a separate subprocess via a socket,
which uses the internal loopback interface.  This connection is not
externally visible and no data is sent to or received from the Internet.
If firewall software complains anyway, you can ignore it.
If the attempt to make the socket connection fails, Idle will notify you.
Such failures are sometimes transient, but if persistent, the problem
may be either a firewall blocking the connecton or misconfiguration of
a particular system.  Until the problem is fixed, one can run Idle with
the -n command line switch.
If IDLE is started with the -n command line switch it will run in a
single process and will not create the subprocess which runs the RPC
Python execution server.  This can be useful if Python cannot create
the subprocess or the RPC socket interface on your platform.  However,
in this mode user code is not isolated from IDLE itself.  Also, the
environment is not restarted when Run/Run Module (F5) is selected.  If
your code has been modified, you must reload() the affected modules and
re-import any specific items (e.g. from foo import baz) if the changes
are to take effect.  For these reasons, it is preferable to run IDLE
with the default subprocess if at all possible.
Deprecated since version 3.4.
IDLE includes a help menu entry called “Python Docs” that will open the
extensive sources of help, including tutorials, available at docs.python.org.
Selected URLs can be added or removed from the help menu at any time using the
Configure IDLE dialog. See the IDLE help option in the help menu of IDLE for
more information.
The font preferences, highlighting, keys, and general preferences can be
changed via Configure IDLE on the Option menu.  Keys can be user defined;
IDLE ships with four built in key sets. In addition a user can create a
custom key set in the Configure IDLE dialog under the keys tab.
IDLE contains an extension facility.  Peferences for extensions can be
changed with Configure Extensions. See the beginning of config-extensions.def
in the idlelib directory for further information.  The default extensions
are currently:
25.4. tkinter.scrolledtext — Scrolled Text Widget
25.6. Other Graphical User Interface Packages

    Enter search terms or a module, class or function name.
    

