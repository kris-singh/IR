URL: https://docs.python.org/3/c-api/sequence.html

Title: Sequence Protocol â€” Python 3.5.2 documentation

Doc Id: 326

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :Return 1 if the object provides sequence protocol, and 0 otherwise.
This function always succeeds.
Returns the number of objects in sequence o on success, and -1 on failure.
For objects that do not provide sequence protocol, this is equivalent to the
Python expression len(o).
Return the concatenation of o1 and o2 on success, and NULL on failure.
This is the equivalent of the Python expression o1 + o2.
Return the result of repeating sequence object o count times, or NULL on
failure.  This is the equivalent of the Python expression o * count.
Return the concatenation of o1 and o2 on success, and NULL on failure.
The operation is done in-place when o1 supports it.  This is the equivalent
of the Python expression o1 += o2.
Return the result of repeating sequence object o count times, or NULL on
failure.  The operation is done in-place when o supports it.  This is the
equivalent of the Python expression o *= count.
Return the ith element of o, or NULL on failure. This is the equivalent of
the Python expression o[i].
Return the slice of sequence object o between i1 and i2, or NULL on
failure. This is the equivalent of the Python expression o[i1:i2].
Assign object v to the ith element of o.  Raise an exception
and return -1 on failure; return 0 on success.  This
is the equivalent of the Python statement o[i] = v.  This function does
not steal a reference to v.
If v is NULL, the element is deleted, however this feature is
deprecated in favour of using PySequence_DelItem().
Delete the ith element of object o.  Returns -1 on failure.  This is the
equivalent of the Python statement del o[i].
Assign the sequence object v to the slice in sequence object o from i1 to
i2.  This is the equivalent of the Python statement o[i1:i2] = v.
Delete the slice in sequence object o from i1 to i2.  Returns -1 on
failure.  This is the equivalent of the Python statement del o[i1:i2].
Return the number of occurrences of value in o, that is, return the number
of keys for which o[key] == value.  On failure, return -1.  This is
equivalent to the Python expression o.count(value).
Determine if o contains value.  If an item in o is equal to value,
return 1, otherwise return 0. On error, return -1.  This is
equivalent to the Python expression value in o.
Return the first index i for which o[i] == value.  On error, return
-1.    This is equivalent to the Python expression o.index(value).
Return a list object with the same contents as the sequence or iterable o,
or NULL on failure.  The returned list is guaranteed to be new.  This is
equivalent to the Python expression list(o).
Return a tuple object with the same contents as the arbitrary sequence o or
NULL on failure.  If o is a tuple, a new reference will be returned,
otherwise a tuple will be constructed with the appropriate contents.  This is
equivalent to the Python expression tuple(o).
Return the sequence o as a list, unless it is already a tuple or list, in
which case o is returned.  Use PySequence_Fast_GET_ITEM() to access
the members of the result.  Returns NULL on failure.  If the object is not
a sequence, raises TypeError with m as the message text.
Return the ith element of o, assuming that o was returned by
PySequence_Fast(), o is not NULL, and that i is within bounds.
Return the underlying array of PyObject pointers.  Assumes that o was returned
by PySequence_Fast() and o is not NULL.
Note, if a list gets resized, the reallocation may relocate the items array.
So, only use the underlying array pointer in contexts where the sequence
cannot change.
Return the ith element of o or NULL on failure. Macro form of
PySequence_GetItem() but without checking that
PySequence_Check() on o is true and without adjustment for negative
indices.
Returns the length of o, assuming that o was returned by
PySequence_Fast() and that o is not NULL.  The size can also be
gotten by calling PySequence_Size() on o, but
PySequence_Fast_GET_SIZE() is faster because it can assume o is a list
or tuple.
Number Protocol
Mapping Protocol

    Enter search terms or a module, class or function name.
    

