URL: https://docs.python.org/3/library/turtle.html

Title: 24.1. turtle — Turtle graphics — Python 3.5.2 documentation

Doc Id: 195

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :Source code: Lib/turtle.py
Turtle graphics is a popular way for introducing programming to kids.  It was
part of the original Logo programming language developed by Wally Feurzig and
Seymour Papert in 1966.
Imagine a robotic turtle starting at (0, 0) in the x-y plane.  After an import turtle, give it the
command turtle.forward(15), and it moves (on-screen!) 15 pixels in the
direction it is facing, drawing a line as it moves.  Give it the command
turtle.right(25), and it rotates in-place 25 degrees clockwise.
Turtle star
Turtle can draw intricate shapes using programs that repeat simple
moves.
By combining together these and similar commands, intricate shapes and pictures
can easily be drawn.
The turtle module is an extended reimplementation of the same-named
module from the Python standard distribution up to version Python 2.5.
It tries to keep the merits of the old turtle module and to be (nearly) 100%
compatible with it.  This means in the first place to enable the learning
programmer to use all the commands, classes and methods interactively when using
the module from within IDLE run with the -n switch.
The turtle module provides turtle graphics primitives, in both object-oriented
and procedure-oriented ways.  Because it uses tkinter for the underlying
graphics, it needs a version of Python installed with Tk support.
The object-oriented interface uses essentially two+two classes:
The TurtleScreen class defines graphics windows as a playground for
the drawing turtles.  Its constructor needs a tkinter.Canvas or a
ScrolledCanvas as argument.  It should be used when turtle is
used as part of some application.
The function Screen() returns a singleton object of a
TurtleScreen subclass. This function should be used when
turtle is used as a standalone tool for doing graphics.
As a singleton object, inheriting from its class is not possible.
All methods of TurtleScreen/Screen also exist as functions, i.e. as part of
the procedure-oriented interface.
RawTurtle (alias: RawPen) defines Turtle objects which draw
on a TurtleScreen.  Its constructor needs a Canvas, ScrolledCanvas
or TurtleScreen as argument, so the RawTurtle objects know where to draw.
Derived from RawTurtle is the subclass Turtle (alias: Pen),
which draws on “the” Screen instance which is automatically
created, if not already present.
All methods of RawTurtle/Turtle also exist as functions, i.e. part of the
procedure-oriented interface.
The procedural interface provides functions which are derived from the methods
of the classes Screen and Turtle.  They have the same names as
the corresponding methods.  A screen object is automatically created whenever a
function derived from a Screen method is called.  An (unnamed) turtle object is
automatically created whenever any of the functions derived from a Turtle method
is called.
To use multiple turtles on a screen one has to use the object-oriented interface.
Note
In the following documentation the argument list for functions is given.
Methods, of course, have the additional first argument self which is
omitted here.
Most of the examples in this section refer to a Turtle instance called
turtle.
Move the turtle forward by the specified distance, in the direction the
turtle is headed.
Move the turtle backward by distance, opposite to the direction the
turtle is headed.  Do not change the turtle’s heading.
Turn turtle right by angle units.  (Units are by default degrees, but
can be set via the degrees() and radians() functions.)  Angle
orientation depends on the turtle mode, see mode().
Turn turtle left by angle units.  (Units are by default degrees, but
can be set via the degrees() and radians() functions.)  Angle
orientation depends on the turtle mode, see mode().
If y is None, x must be a pair of coordinates or a Vec2D
(e.g. as returned by pos()).
Move turtle to an absolute position.  If the pen is down, draw line.  Do
not change the turtle’s orientation.
Set the turtle’s first coordinate to x, leave second coordinate
unchanged.
Set the turtle’s second coordinate to y, leave first coordinate unchanged.
Set the orientation of the turtle to to_angle.  Here are some common
directions in degrees:
Move turtle to the origin – coordinates (0,0) – and set its heading to
its start-orientation (which depends on the mode, see mode()).
Draw a circle with given radius.  The center is radius units left of
the turtle; extent – an angle – determines which part of the circle
is drawn.  If extent is not given, draw the entire circle.  If extent
is not a full circle, one endpoint of the arc is the current pen
position.  Draw the arc in counterclockwise direction if radius is
positive, otherwise in clockwise direction.  Finally the direction of the
turtle is changed by the amount of extent.
As the circle is approximated by an inscribed regular polygon, steps
determines the number of steps to use.  If not given, it will be
calculated automatically.  May be used to draw regular polygons.
Draw a circular dot with diameter size, using color.  If size is
not given, the maximum of pensize+4 and 2*pensize is used.
Stamp a copy of the turtle shape onto the canvas at the current turtle
position.  Return a stamp_id for that stamp, which can be used to delete
it by calling clearstamp(stamp_id).
Delete stamp with given stampid.
Delete all or first/last n of turtle’s stamps.  If n is None, delete
all stamps, if n > 0 delete first n stamps, else if n < 0 delete
last n stamps.
Undo (repeatedly) the last turtle action(s).  Number of available
undo actions is determined by the size of the undobuffer.
Set the turtle’s speed to an integer value in the range 0..10.  If no
argument is given, return current speed.
If input is a number greater than 10 or smaller than 0.5, speed is set
to 0.  Speedstrings are mapped to speedvalues as follows:
Speeds from 1 to 10 enforce increasingly faster animation of line drawing
and turtle turning.
Attention: speed = 0 means that no animation takes
place. forward/back makes turtle jump and likewise left/right make the
turtle turn instantly.
Return the turtle’s current location (x,y) (as a Vec2D vector).
Return the angle between the line from turtle position to position specified
by (x,y), the vector or the other turtle.  This depends on the turtle’s start
orientation which depends on the mode - “standard”/”world” or “logo”).
Return the turtle’s x coordinate.
Return the turtle’s y coordinate.
Return the turtle’s current heading (value depends on the turtle mode, see
mode()).
Return the distance from the turtle to (x,y), the given vector, or the given
other turtle, in turtle step units.
Set angle measurement units, i.e. set number of “degrees” for a full circle.
Default value is 360 degrees.
Set the angle measurement units to radians.  Equivalent to
degrees(2*math.pi).
Pull the pen down – drawing when moving.
Pull the pen up – no drawing when moving.
Set the line thickness to width or return it.  If resizemode is set to
“auto” and turtleshape is a polygon, that polygon is drawn with the same line
thickness.  If no argument is given, the current pensize is returned.
Return or set the pen’s attributes in a “pen-dictionary” with the following
key/value pairs:
This dictionary can be used as argument for a subsequent call to pen()
to restore the former pen-state.  Moreover one or more of these attributes
can be provided as keyword-arguments.  This can be used to set several pen
attributes in one statement.
Return True if pen is down, False if it’s up.
Return or set the pencolor.
Four input formats are allowed:
If turtleshape is a polygon, the outline of that polygon is drawn with the
newly set pencolor.
Return or set the fillcolor.
Four input formats are allowed:
If turtleshape is a polygon, the interior of that polygon is drawn
with the newly set fillcolor.
Return or set pencolor and fillcolor.
Several input formats are allowed.  They use 0 to 3 arguments as
follows:
If turtleshape is a polygon, outline and interior of that polygon is drawn
with the newly set colors.
See also: Screen method colormode().
Return fillstate (True if filling, False else).
To be called just before drawing a shape to be filled.
Fill the shape drawn after the last call to begin_fill().
Delete the turtle’s drawings from the screen, re-center the turtle and set
variables to the default values.
Delete the turtle’s drawings from the screen.  Do not move turtle.  State and
position of the turtle as well as drawings of other turtles are not affected.
Write text - the string representation of arg - at the current turtle
position according to align (“left”, “center” or right”) and with the given
font.  If move is true, the pen is moved to the bottom-right corner of the
text.  By default, move is False.
Make the turtle invisible.  It’s a good idea to do this while you’re in the
middle of doing some complex drawing, because hiding the turtle speeds up the
drawing observably.
Make the turtle visible.
Return True if the Turtle is shown, False if it’s hidden.
Set turtle shape to shape with given name or, if name is not given, return
name of current shape.  Shape with name must exist in the TurtleScreen’s
shape dictionary.  Initially there are the following polygon shapes: “arrow”,
“turtle”, “circle”, “square”, “triangle”, “classic”.  To learn about how to
deal with shapes see Screen method register_shape().
Set resizemode to one of the values: “auto”, “user”, “noresize”.  If rmode
is not given, return current resizemode.  Different resizemodes have the
following effects:
resizemode(“user”) is called by shapesize() when used with arguments.
Return or set the pen’s attributes x/y-stretchfactors and/or outline.  Set
resizemode to “user”.  If and only if resizemode is set to “user”, the turtle
will be displayed stretched according to its stretchfactors: stretch_wid is
stretchfactor perpendicular to its orientation, stretch_len is
stretchfactor in direction of its orientation, outline determines the width
of the shapes’s outline.
Set or return the current shearfactor. Shear the turtleshape according to
the given shearfactor shear, which is the tangent of the shear angle.
Do not change the turtle’s heading (direction of movement).
If shear is not given: return the current shearfactor, i. e. the
tangent of the shear angle, by which lines parallel to the
heading of the turtle are sheared.
Rotate the turtleshape by angle from its current tilt-angle, but do not
change the turtle’s heading (direction of movement).
Rotate the turtleshape to point in the direction specified by angle,
regardless of its current tilt-angle.  Do not change the turtle’s heading
(direction of movement).
Deprecated since version 3.1.
Set or return the current tilt-angle. If angle is given, rotate the
turtleshape to point in the direction specified by angle,
regardless of its current tilt-angle. Do not change the turtle’s
heading (direction of movement).
If angle is not given: return the current tilt-angle, i. e. the angle
between the orientation of the turtleshape and the heading of the
turtle (its direction of movement).
Set or return the current transformation matrix of the turtle shape.
If none of the matrix elements are given, return the transformation
matrix as a tuple of 4 elements.
Otherwise set the given elements and transform the turtleshape
according to the matrix consisting of first row t11, t12 and
second row t21, 22. The determinant t11 * t22 - t12 * t21 must not be
zero, otherwise an error is raised.
Modify stretchfactor, shearfactor and tiltangle according to the
given matrix.
Return the current shape polygon as tuple of coordinate pairs. This
can be used to define a new shape or components of a compound shape.
Bind fun to mouse-click events on this turtle.  If fun is None,
existing bindings are removed.  Example for the anonymous turtle, i.e. the
procedural way:
Bind fun to mouse-button-release events on this turtle.  If fun is
None, existing bindings are removed.
Bind fun to mouse-move events on this turtle.  If fun is None,
existing bindings are removed.
Remark: Every sequence of mouse-move-events on a turtle is preceded by a
mouse-click event on that turtle.
Subsequently, clicking and dragging the Turtle will move it across
the screen thereby producing handdrawings (if pen is down).
Start recording the vertices of a polygon.  Current turtle position is first
vertex of polygon.
Stop recording the vertices of a polygon.  Current turtle position is last
vertex of polygon.  This will be connected with the first vertex.
Return the last recorded polygon.
Create and return a clone of the turtle with same position, heading and
turtle properties.
Return the Turtle object itself.  Only reasonable use: as a function to
return the “anonymous turtle”:
Return the TurtleScreen object the turtle is drawing on.
TurtleScreen methods can then be called for that object.
Set or disable undobuffer.  If size is an integer an empty undobuffer of
given size is installed.  size gives the maximum number of turtle actions
that can be undone by the undo() method/function.  If size is
None, the undobuffer is disabled.
Return number of entries in the undobuffer.
To use compound turtle shapes, which consist of several polygons of different
color, you must use the helper class Shape explicitly as described
below:
Create an empty Shape object of type “compound”.
Add as many components to this object as desired, using the
addcomponent() method.
For example:
Now add the Shape to the Screen’s shapelist and use it:
Note
The Shape class is used internally by the register_shape()
method in different ways.  The application programmer has to deal with the
Shape class only when using compound shapes like shown above!
Most of the examples in this section refer to a TurtleScreen instance called
screen.
Set or return background color of the TurtleScreen.
Set background image or return name of current backgroundimage.  If picname
is a filename, set the corresponding image as background.  If picname is
"nopic", delete background image, if present.  If picname is None,
return the filename of the current backgroundimage.
Delete all drawings and all turtles from the TurtleScreen.  Reset the now
empty TurtleScreen to its initial state: white background, no background
image, no event bindings and tracing on.
Note
This TurtleScreen method is available as a global function only under the
name clearscreen.  The global function clear is a different one
derived from the Turtle method clear.
Reset all Turtles on the Screen to their initial state.
Note
This TurtleScreen method is available as a global function only under the
name resetscreen.  The global function reset is another one
derived from the Turtle method reset.
If no arguments are given, return current (canvaswidth, canvasheight).  Else
resize the canvas the turtles are drawing on.  Do not alter the drawing
window.  To observe hidden parts of the canvas, use the scrollbars. With this
method, one can make visible those parts of a drawing which were outside the
canvas before.
e.g. to search for an erroneously escaped turtle ;-)
Set up user-defined coordinate system and switch to mode “world” if
necessary.  This performs a screen.reset().  If mode “world” is already
active, all drawings are redrawn according to the new coordinates.
ATTENTION: in user-defined coordinate systems angles may appear
distorted.
Set or return the drawing delay in milliseconds.  (This is approximately
the time interval between two consecutive canvas updates.)  The longer the
drawing delay, the slower the animation.
Optional argument:
Turn turtle animation on/off and set delay for update drawings.  If
n is given, only each n-th regular screen update is really
performed.  (Can be used to accelerate the drawing of complex
graphics.)  When called without arguments, returns the currently
stored value of n. Second argument sets delay value (see
delay()).
Perform a TurtleScreen update. To be used when tracer is turned off.
See also the RawTurtle/Turtle method speed().
Set focus on TurtleScreen (in order to collect key-events).  Dummy arguments
are provided in order to be able to pass listen() to the onclick method.
Bind fun to key-release event of key.  If fun is None, event bindings
are removed. Remark: in order to be able to register key-events, TurtleScreen
must have the focus. (See method listen().)
Bind fun to key-press event of key if key is given,
or to any key-press-event if no key is given.
Remark: in order to be able to register key-events, TurtleScreen
must have focus. (See method listen().)
Bind fun to mouse-click events on this screen.  If fun is None,
existing bindings are removed.
Example for a TurtleScreen instance named screen and a Turtle instance
named turtle:
Note
This TurtleScreen method is available as a global function only under the
name onscreenclick.  The global function onclick is another one
derived from the Turtle method onclick.
Install a timer that calls fun after t milliseconds.
Starts event loop - calling Tkinter’s mainloop function.
Must be the last statement in a turtle graphics program.
Must not be used if a script is run from within IDLE in -n mode
(No subprocess) - for interactive use of turtle graphics.
Pop up a dialog window for input of a string. Parameter title is
the title of the dialog window, propmt is a text mostly describing
what information to input.
Return the string input. If the dialog is canceled, return None.
Pop up a dialog window for input of a number. title is the title of the
dialog window, prompt is a text mostly describing what numerical information
to input. default: default value, minval: minimum value for input,
maxval: maximum value for input
The number input must be in the range minval .. maxval if these are
given. If not, a hint is issued and the dialog remains open for
correction.
Return the number input. If the dialog is canceled,  return None.
Set turtle mode (“standard”, “logo” or “world”) and perform reset.  If mode
is not given, current mode is returned.
Mode “standard” is compatible with old turtle.  Mode “logo” is
compatible with most Logo turtle graphics.  Mode “world” uses user-defined
“world coordinates”. Attention: in this mode angles appear distorted if
x/y unit-ratio doesn’t equal 1.
Return the colormode or set it to 1.0 or 255.  Subsequently r, g, b
values of color triples have to be in the range 0..cmode.
Return the Canvas of this TurtleScreen.  Useful for insiders who know what to
do with a Tkinter Canvas.
Return a list of names of all currently available turtle shapes.
There are three different ways to call this function:
name is the name of a gif-file and shape is None: Install the
corresponding image shape.
Note
Image shapes do not rotate when turning the turtle, so they do not
display the heading of the turtle!
name is an arbitrary string and shape is a tuple of pairs of
coordinates: Install the corresponding polygon shape.
name is an arbitrary string and shape is a (compound) Shape
object: Install the corresponding compound shape.
Add a turtle shape to TurtleScreen’s shapelist.  Only thusly registered
shapes can be used by issuing the command shape(shapename).
Return the list of turtles on the screen.
Return the height of the turtle window.
Return the width of the turtle window.
Shut the turtlegraphics window.
Bind bye() method to mouse clicks on the Screen.
If the value “using_IDLE” in the configuration dictionary is False
(default value), also enter mainloop.  Remark: If IDLE with the -n switch
(no subprocess) is used, this value should be set to True in
turtle.cfg.  In this case IDLE’s own mainloop is active also for the
client script.
Set the size and position of the main window.  Default values of arguments
are stored in the configuration dictionary and can be changed via a
turtle.cfg file.
Set title of turtle window to titlestring.
Create a turtle.  The turtle has all methods described above as “methods of
Turtle/RawTurtle”.
Subclass of RawTurtle, has the same interface but draws on a default
Screen object created automatically when needed for the first time.
Provides screen oriented methods like setbg() etc. that are described
above.
Subclass of TurtleScreen, with four methods added.
Used by class Screen, which thus automatically provides a ScrolledCanvas as
playground for the turtles.
Data structure modeling shapes.  The pair (type_, data) must follow this
specification:
Example:
See Compound shapes.
A two-dimensional vector class, used as a helper class for implementing
turtle graphics.  May be useful for turtle graphics programs too.  Derived
from tuple, so a vector is a tuple!
Provides (for a, b vectors, k number):
The public methods of the Screen and Turtle classes are documented extensively
via docstrings.  So these can be used as online-help via the Python help
facilities:
When using IDLE, tooltips show the signatures and first lines of the
docstrings of typed in function-/method calls.
Calling help() on methods or functions displays the docstrings:
The docstrings of the functions which are derived from methods have a modified
form:
These modified docstrings are created automatically together with the function
definitions that are derived from the methods at import time.
There is a utility to create a dictionary the keys of which are the method names
and the values of which are the docstrings of the public methods of the classes
Screen and Turtle.
Create and write docstring-dictionary to a Python script with the given
filename.  This function has to be called explicitly (it is not used by the
turtle graphics classes).  The docstring dictionary will be written to the
Python script filename.py.  It is intended to serve as a template
for translation of the docstrings into different languages.
If you (or your students) want to use turtle with online help in your
native language, you have to translate the docstrings and save the resulting
file as e.g. turtle_docstringdict_german.py.
If you have an appropriate entry in your turtle.cfg file this dictionary
will be read in at import time and will replace the original English docstrings.
At the time of this writing there are docstring dictionaries in German and in
Italian.  (Requests please to glingl@aon.at.)
The built-in default configuration mimics the appearance and behaviour of the
old turtle module in order to retain best possible compatibility with it.
If you want to use a different configuration which better reflects the features
of this module or which better fits to your needs, e.g. for use in a classroom,
you can prepare a configuration file turtle.cfg which will be read at import
time and modify the configuration according to its settings.
The built in configuration would correspond to the following turtle.cfg:
Short explanation of selected entries:
There can be a turtle.cfg file in the directory where turtle is
stored and an additional one in the current working directory.  The latter will
override the settings of the first one.
The Lib/turtledemo directory contains a turtle.cfg file.  You can
study it as an example and see its effects when running the demos (preferably
not from within the demo-viewer).
The turtledemo package includes a set of demo scripts.  These
scripts can be run and viewed using the supplied demo viewer as follows:
Alternatively, you can run the demo scripts individually.  For example,
The turtledemo package directory contains:
The demo scripts are:
Have fun!
24. Program Frameworks
24.2. cmd — Support for line-oriented command interpreters

    Enter search terms or a module, class or function name.
    

