URL: https://docs.python.org/3/library/smtpd.html

Title: 21.18. smtpd — SMTP Server — Python 3.5.2 documentation

Doc Id: 177

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :Source code: Lib/smtpd.py
This module offers several classes to implement SMTP (email) servers.
Several server implementations are present; one is a generic
do-nothing implementation, which can be overridden, while the other two offer
specific mail-sending strategies.
Additionally the SMTPChannel may be extended to implement very specific
interaction behaviour with SMTP clients.
The code supports RFC 5321, plus the RFC 1870 SIZE and RFC 6531
SMTPUTF8 extensions.
Create a new SMTPServer object, which binds to local address
localaddr.  It will treat remoteaddr as an upstream SMTP relayer.  It
inherits from asyncore.dispatcher, and so will insert itself into
asyncore‘s event loop on instantiation.
data_size_limit specifies the maximum number of bytes that will be
accepted in a DATA command.  A value of None or 0 means no
limit.
map is the socket map to use for connections (an initially empty
dictionary is a suitable value).  If not specified the asyncore
global socket map is used.
enable_SMTPUTF8 determins whether the SMTPUTF8 extension (as defined
in RFC 6531) should be enabled.  The default is False.  If set to
True, decode_data must be False (otherwise an error is raised).
When True, SMTPUTF8 is accepted as a parameter to the MAIL
command and when present is passed to process_message() in the
kwargs['mail_options'] list.
decode_data specifies whether the data portion of the SMTP transaction
should be decoded using UTF-8.  The default is True for backward
compatibility reasons, but will change to False in Python 3.6; specify
the keyword value explicitly to avoid the DeprecationWarning.  When
decode_data is set to False the server advertises the 8BITMIME
extension (RFC 6152), accepts the BODY=8BITMIME parameter to
the MAIL command, and when present passes it to process_message()
in the kwargs['mail_options'] list.
Raise a NotImplementedError exception. Override this in subclasses to
do something useful with this message. Whatever was passed in the
constructor as remoteaddr will be available as the _remoteaddr
attribute. peer is the remote host’s address, mailfrom is the envelope
originator, rcpttos are the envelope recipients and data is a string
containing the contents of the e-mail (which should be in RFC 5321
format).
If the decode_data constructor keyword is set to True, the data
argument will be a unicode string.  If it is set to False, it
will be a bytes object.
kwargs is a dictionary containing additional information. It is empty
unless at least one of decode_data=False or enable_SMTPUTF8=True
was given as an init parameter, in which case it contains the following
keys:
Implementations of process_message should use the **kwargs
signature to accept arbitrary keyword arguments, since future feature
enhancements may add keys to the kwargs dictionary.
Return None to request a normal 250 Ok response; otherwise
return the desired response string in RFC 5321 format.
Override this in subclasses to use a custom SMTPChannel for
managing SMTP clients.
New in version 3.4: The map constructor argument.
Changed in version 3.5: localaddr and remoteaddr may now contain IPv6 addresses.
New in version 3.5: the decode_data and enable_SMTPUTF8 constructor arguments, and the
kwargs argument to process_message() when one or more of these is
specified.
Create a new debugging server.  Arguments are as per SMTPServer.
Messages will be discarded, and printed on stdout.
Create a new pure proxy server. Arguments are as per SMTPServer.
Everything will be relayed to remoteaddr.  Note that running this has a good
chance to make you into an open relay, so please be careful.
Create a new pure proxy server. Arguments are as per SMTPServer.
Everything will be relayed to remoteaddr, unless local mailman configurations
knows about an address, in which case it will be handled via mailman.  Note that
running this has a good chance to make you into an open relay, so please be
careful.
Create a new SMTPChannel object which manages the communication
between the server and a single SMTP client.
conn and addr are as per the instance variables described below.
data_size_limit specifies the maximum number of bytes that will be
accepted in a DATA command.  A value of None or 0 means no
limit.
enable_SMTPUTF8 determins whether the SMTPUTF8 extension (as defined
in RFC 6531) should be enabled.  The default is False.  A
ValueError is raised if both enable_SMTPUTF8 and decode_data are
set to True at the same time.
A dictionary can be specified in map to avoid using a global socket map.
decode_data specifies whether the data portion of the SMTP transaction
should be decoded using UTF-8.  The default is True for backward
compatibility reasons, but will change to False in Python 3.6.  Specify
the keyword value explicitly to avoid the DeprecationWarning.
To use a custom SMTPChannel implementation you need to override the
SMTPServer.channel_class of your SMTPServer.
Changed in version 3.5: the decode_data and enable_SMTPUTF8 arguments were added.
The SMTPChannel has the following instance variables:
Holds the SMTPServer that spawned this channel.
Holds the socket object connecting to the client.
Holds the address of the client, the second value returned by
socket.accept
Holds a list of the line strings (decoded using UTF-8) received from
the client. The lines have their "\r\n" line ending translated to
"\n".
Holds the current state of the channel. This will be either
COMMAND initially and then DATA after the client sends
a “DATA” line.
Holds a string containing the greeting sent by the client in its “HELO”.
Holds a string containing the address identified in the “MAIL FROM:” line
from the client.
Holds a list of strings containing the addresses identified in the
“RCPT TO:” lines from the client.
Holds a string containing all of the data sent by the client during the
DATA state, up to but not including the terminating "\r\n.\r\n".
Holds the fully-qualified domain name of the server as returned by
socket.getfqdn().
Holds the name of the client peer as returned by conn.getpeername()
where conn is conn.
The SMTPChannel operates by invoking methods named smtp_<command>
upon reception of a command line from the client. Built into the base
SMTPChannel class are methods for handling the following commands
(and responding to them appropriately):
21.17. smtplib — SMTP protocol client
21.19. telnetlib — Telnet client

    Enter search terms or a module, class or function name.
    

