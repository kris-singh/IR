URL: https://docs.python.org/3/library/asyncio-subprocess.html

Title: 18.5.6. Subprocess — Python 3.5.2 documentation

Doc Id: 418

Meta Tags : No meta tag found in document

Date :Aug 08, 2016

Content :On Windows, the default event loop is SelectorEventLoop which does not
support subprocesses. ProactorEventLoop should be used instead.
Example to use it on Windows:
See also
Available event loops and Platform
support.
Create a subprocess.
The limit parameter sets the buffer limit passed to the
StreamReader. See AbstractEventLoop.subprocess_exec() for other
parameters.
Return a Process instance.
This function is a coroutine.
Run the shell command cmd.
The limit parameter sets the buffer limit passed to the
StreamReader. See AbstractEventLoop.subprocess_shell() for other
parameters.
Return a Process instance.
It is the application’s responsibility to ensure that all whitespace and
metacharacters are quoted appropriately to avoid shell injection
vulnerabilities. The shlex.quote() function can be used to properly
escape whitespace and shell metacharacters in strings that are going to be
used to construct shell commands.
This function is a coroutine.
Use the AbstractEventLoop.connect_read_pipe() and
AbstractEventLoop.connect_write_pipe() methods to connect pipes.
Run subprocesses asynchronously using the subprocess module.
Create a subprocess from one or more string arguments (character strings or
bytes strings encoded to the filesystem encoding), where the first string
specifies the program to execute, and the remaining strings specify the
program’s arguments. (Thus, together the string arguments form the
sys.argv value of the program, assuming it is a Python script.) This is
similar to the standard library subprocess.Popen class called with
shell=False and the list of strings passed as the first argument;
however, where Popen takes a single argument which is
list of strings, subprocess_exec() takes multiple string arguments.
The protocol_factory must instanciate a subclass of the
asyncio.SubprocessProtocol class.
Other parameters:
Returns a pair of (transport, protocol), where transport is an
instance of BaseSubprocessTransport.
This method is a coroutine.
See the constructor of the subprocess.Popen class for parameters.
Create a subprocess from cmd, which is a character string or a bytes
string encoded to the filesystem encoding,
using the platform’s “shell” syntax. This is similar to the standard library
subprocess.Popen class called with shell=True.
The protocol_factory must instanciate a subclass of the
asyncio.SubprocessProtocol class.
See subprocess_exec() for more details about
the remaining arguments.
Returns a pair of (transport, protocol), where transport is an
instance of BaseSubprocessTransport.
It is the application’s responsibility to ensure that all whitespace and
metacharacters are quoted appropriately to avoid shell injection
vulnerabilities. The shlex.quote() function can be used to properly
escape whitespace and shell metacharacters in strings that are going to be
used to construct shell commands.
This method is a coroutine.
See also
The AbstractEventLoop.connect_read_pipe() and
AbstractEventLoop.connect_write_pipe() methods.
Special value that can be used as the stdin, stdout or stderr argument
to create_subprocess_shell() and create_subprocess_exec() and
indicates that a pipe to the standard stream should be opened.
Special value that can be used as the stderr argument to
create_subprocess_shell() and create_subprocess_exec() and
indicates that standard error should go into the same handle as standard
output.
Special value that can be used as the stdin, stdout or stderr argument
to create_subprocess_shell() and create_subprocess_exec() and
indicates that the special file os.devnull will be used.
A subprocess created by the create_subprocess_exec() or the
create_subprocess_shell() function.
The API of the Process class was designed to be
close to the API of the subprocess.Popen class, but there are some
differences:
This class is not thread safe. See also the
Subprocess and threads section.
Wait for child process to terminate.  Set and return returncode
attribute.
This method is a coroutine.
Note
This will deadlock when using stdout=PIPE or stderr=PIPE and
the child process generates enough output to a pipe such that it
blocks waiting for the OS pipe buffer to accept more data. Use the
communicate() method when using pipes to avoid that.
Interact with process: Send data to stdin.  Read data from stdout and
stderr, until end-of-file is reached.  Wait for process to terminate.
The optional input argument should be data to be sent to the child
process, or None, if no data should be sent to the child.  The type
of input must be bytes.
communicate() returns a tuple (stdout_data, stderr_data).
If a BrokenPipeError or ConnectionResetError exception is
raised when writing input into stdin, the exception is ignored. It
occurs when the process exits before all data are written into stdin.
Note that if you want to send data to the process’s stdin, you need to
create the Process object with stdin=PIPE.  Similarly, to get anything
other than None in the result tuple, you need to give stdout=PIPE
and/or stderr=PIPE too.
This method is a coroutine.
Note
The data read is buffered in memory, so do not use this method if the
data size is large or unlimited.
Changed in version 3.4.2: The method now ignores BrokenPipeError and
ConnectionResetError.
Sends the signal signal to the child process.
Note
On Windows, SIGTERM is an alias for terminate().
CTRL_C_EVENT and CTRL_BREAK_EVENT can be sent to processes
started with a creationflags parameter which includes
CREATE_NEW_PROCESS_GROUP.
Stop the child. On Posix OSs the method sends signal.SIGTERM
to the child. On Windows the Win32 API function
TerminateProcess() is called to stop the child.
Kills the child. On Posix OSs the function sends SIGKILL to
the child.  On Windows kill() is an alias for terminate().
Standard input stream (StreamWriter), None if the process
was created with stdin=None.
Standard output stream (StreamReader), None if the process
was created with stdout=None.
Standard error stream (StreamReader), None if the process
was created with stderr=None.
Warning
Use the communicate() method rather than .stdin.write, .stdout.read or .stderr.read
to avoid deadlocks due to streams pausing reading or writing and blocking
the child process.
The identifier of the process.
Note that for processes created by the create_subprocess_shell()
function, this attribute is the process identifier of the spawned shell.
Return code of the process when it exited.  A None value indicates
that the process has not terminated yet.
A negative value -N indicates that the child was terminated by signal
N (Unix only).
asyncio supports running subprocesses from different threads, but there
are limits:
The asyncio.subprocess.Process class is not thread safe.
See also
The Concurrency and multithreading in asyncio section.
Example of a subprocess protocol using to get the output of a subprocess and to
wait for the subprocess exit. The subprocess is created by the
AbstractEventLoop.subprocess_exec() method:
Example using the Process class to control the
subprocess and the StreamReader class to read from the standard
output.  The subprocess is created by the create_subprocess_exec()
function:
18.5.5. Streams (coroutine based API)
18.5.7. Synchronization primitives

    Enter search terms or a module, class or function name.
    

