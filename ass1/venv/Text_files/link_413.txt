URL: https://docs.python.org/3/library/asyncio-eventloop.html

Title: 18.5.1. Base Event Loop — Python 3.5.2 documentation

Doc Id: 413

Meta Tags : No meta tag found in document

Date :Aug 08, 2016

Content :The event loop is the central execution device provided by asyncio.
It provides multiple facilities, including:
This class is an implementation detail.  It is a subclass of
AbstractEventLoop and may be a base class of concrete
event loop implementations found in asyncio.  It should not
be used directly; use AbstractEventLoop instead.
BaseEventLoop should not be subclassed by third-party code; the
internal interface is not stable.
Abstract base class of event loops.
This class is not thread safe.
Run until stop() is called.  If stop() is called before
run_forever() is called, this polls the I/O selector once
with a timeout of zero, runs all callbacks scheduled in response to
I/O events (and those that were already scheduled), and then exits.
If stop() is called while run_forever() is running,
this will run the current batch of callbacks and then exit.  Note
that callbacks scheduled by callbacks will not run in that case;
they will run the next time run_forever() is called.
Changed in version 3.5.1.
Run until the Future is done.
If the argument is a coroutine object, it is wrapped by
ensure_future().
Return the Future’s result, or raise its exception.
Returns running status of event loop.
Stop running the event loop.
This causes run_forever() to exit at the next suitable
opportunity (see there for more details).
Changed in version 3.5.1.
Returns True if the event loop was closed.
New in version 3.4.2.
Close the event loop. The loop must not be running.  Pending
callbacks will be lost.
This clears the queues and shuts down the executor, but does not wait for
the executor to finish.
This is idempotent and irreversible. No other methods should be called after
this one.
Most asyncio functions don’t accept keywords. If you want to pass
keywords to your callback, use functools.partial(). For example,
loop.call_soon(functools.partial(print, "Hello", flush=True)) will call
print("Hello", flush=True).
Note
functools.partial() is better than lambda functions, because
asyncio can inspect functools.partial() object to display
parameters in debug mode, whereas lambda functions have a poor
representation.
Arrange for a callback to be called as soon as possible.  The callback is
called after call_soon() returns, when control returns to the event
loop.
This operates as a FIFO queue, callbacks are called in the order in
which they are registered.  Each callback will be called exactly once.
Any positional arguments after the callback will be passed to the
callback when it is called.
An instance of asyncio.Handle is returned, which can be
used to cancel the callback.
Use functools.partial to pass keywords to the callback.
Like call_soon(), but thread safe.
See the concurrency and multithreading
section of the documentation.
The event loop has its own internal clock for computing timeouts.
Which clock is used depends on the (platform-specific) event loop
implementation; ideally it is a monotonic clock.  This will generally be
a different clock than time.time().
Note
Timeouts (relative delay or absolute when) should not exceed one day.
Arrange for the callback to be called after the given delay
seconds (either an int or float).
An instance of asyncio.Handle is returned, which can be
used to cancel the callback.
callback will be called exactly once per call to call_later().
If two callbacks are scheduled for exactly the same time, it is
undefined which will be called first.
The optional positional args will be passed to the callback when it
is called. If you want the callback to be called with some named
arguments, use a closure or functools.partial().
Use functools.partial to pass keywords to the callback.
Arrange for the callback to be called at the given absolute timestamp
when (an int or float), using the same time reference as
AbstractEventLoop.time().
This method’s behavior is the same as call_later().
An instance of asyncio.Handle is returned, which can be
used to cancel the callback.
Use functools.partial to pass keywords to the callback.
Return the current time, as a float value, according to the
event loop’s internal clock.
See also
The asyncio.sleep() function.
Create an asyncio.Future object attached to the loop.
This is a preferred way to create futures in asyncio, as event
loop implementations can provide alternative implementations
of the Future class (with better performance or instrumentation).
New in version 3.5.2.
Schedule the execution of a coroutine object: wrap it in
a future. Return a Task object.
Third-party event loops can use their own subclass of Task for
interoperability. In this case, the result type is a subclass of
Task.
This method was added in Python 3.4.2. Use the async() function to
support also older Python versions.
New in version 3.4.2.
Set a task factory that will be used by
AbstractEventLoop.create_task().
If factory is None the default task factory will be set.
If factory is a callable, it should have a signature matching
(loop, coro), where loop will be a reference to the active
event loop, coro will be a coroutine object.  The callable
must return an asyncio.Future compatible object.
New in version 3.4.4.
Return a task factory, or None if the default one is in use.
New in version 3.4.4.
Create a streaming transport connection to a given Internet host and
port: socket family AF_INET or
AF_INET6 depending on host (or family if specified),
socket type SOCK_STREAM.  protocol_factory must be a
callable returning a protocol instance.
This method is a coroutine which will try to
establish the connection in the background.  When successful, the
coroutine returns a (transport, protocol) pair.
The chronological synopsis of the underlying operation is as follows:
The created transport is an implementation-dependent bidirectional stream.
Note
protocol_factory can be any kind of callable, not necessarily
a class.  For example, if you want to use a pre-created
protocol instance, you can pass lambda: my_protocol.
Options that change how the connection is created:
ssl: if given and not false, a SSL/TLS transport is created
(by default a plain TCP transport is created).  If ssl is
a ssl.SSLContext object, this context is used to create
the transport; if ssl is True, a context with some
unspecified default settings is used.
See also
SSL/TLS security considerations
server_hostname, is only for use together with ssl,
and sets or overrides the hostname that the target server’s certificate
will be matched against.  By default the value of the host argument
is used.  If host is empty, there is no default and you must pass a
value for server_hostname.  If server_hostname is an empty
string, hostname matching is disabled (which is a serious security
risk, allowing for man-in-the-middle-attacks).
family, proto, flags are the optional address family, protocol
and flags to be passed through to getaddrinfo() for host resolution.
If given, these should all be integers from the corresponding
socket module constants.
sock, if given, should be an existing, already connected
socket.socket object to be used by the transport.
If sock is given, none of host, port, family, proto, flags
and local_addr should be specified.
local_addr, if given, is a (local_host, local_port) tuple used
to bind the socket to locally.  The local_host and local_port
are looked up using getaddrinfo(), similarly to host and port.
Changed in version 3.5: On Windows with ProactorEventLoop, SSL/TLS is now supported.
See also
The open_connection() function can be used to get a pair of
(StreamReader, StreamWriter) instead of a protocol.
Create datagram connection: socket family AF_INET or
AF_INET6 depending on host (or family if specified),
socket type SOCK_DGRAM. protocol_factory must be a
callable returning a protocol instance.
This method is a coroutine which will try to
establish the connection in the background.  When successful, the
coroutine returns a (transport, protocol) pair.
Options changing how the connection is created:
On Windows with ProactorEventLoop, this method is not supported.
See UDP echo client protocol and
UDP echo server protocol examples.
Create UNIX connection: socket family AF_UNIX, socket
type SOCK_STREAM. The AF_UNIX socket
family is used to communicate between processes on the same machine
efficiently.
This method is a coroutine which will try to
establish the connection in the background.  When successful, the
coroutine returns a (transport, protocol) pair.
See the AbstractEventLoop.create_connection() method for parameters.
Availability: UNIX.
Create a TCP server (socket type SOCK_STREAM) bound to
host and port.
Return a Server object, its sockets attribute
contains created sockets. Use the Server.close() method to stop the
server: close listening sockets.
Parameters:
This method is a coroutine.
Changed in version 3.5: On Windows with ProactorEventLoop, SSL/TLS is now supported.
See also
The function start_server() creates a (StreamReader,
StreamWriter) pair and calls back a function with this pair.
Changed in version 3.5.1: The host parameter can now be a sequence of strings.
Similar to AbstractEventLoop.create_server(), but specific to the
socket family AF_UNIX.
This method is a coroutine.
Availability: UNIX.
On Windows with SelectorEventLoop, only socket handles are supported
(ex: pipe file descriptors are not supported).
On Windows with ProactorEventLoop, these methods are not supported.
Start watching the file descriptor for read availability and then call the
callback with specified arguments.
Use functools.partial to pass keywords to the callback.
Stop watching the file descriptor for read availability.
Start watching the file descriptor for write availability and then call the
callback with specified arguments.
Use functools.partial to pass keywords to the callback.
Stop watching the file descriptor for write availability.
The watch a file descriptor for read events
example uses the low-level AbstractEventLoop.add_reader() method to register
the file descriptor of a socket.
Receive data from the socket.  Modeled after blocking
socket.socket.recv() method.
The return value is a bytes object
representing the data received.  The maximum amount of data to be received
at once is specified by nbytes.
With SelectorEventLoop event loop, the socket sock must be
non-blocking.
This method is a coroutine.
Send data to the socket.  Modeled after blocking
socket.socket.sendall() method.
The socket must be connected to a remote socket.
This method continues to send data from data until either all data has
been sent or an error occurs.  None is returned on success.  On error,
an exception is raised, and there is no way to determine how much data, if
any, was successfully processed by the receiving end of the connection.
With SelectorEventLoop event loop, the socket sock must be
non-blocking.
This method is a coroutine.
Connect to a remote socket at address.  Modeled after
blocking socket.socket.connect() method.
With SelectorEventLoop event loop, the socket sock must be
non-blocking.
This method is a coroutine.
Changed in version 3.5.2: address no longer needs to be resolved.  sock_connect
will try to check if the address is already resolved by calling
socket.inet_pton().  If not,
AbstractEventLoop.getaddrinfo() will be used to resolve the
address.
See also
AbstractEventLoop.create_connection()
and  asyncio.open_connection().
Accept a connection.  Modeled after blocking
socket.socket.accept().
The socket must be bound to an address and listening
for connections. The return value is a pair (conn, address) where conn
is a new socket object usable to send and receive data on the connection,
and address is the address bound to the socket on the other end of the
connection.
The socket sock must be non-blocking.
This method is a coroutine.
See also
AbstractEventLoop.create_server() and start_server().
This method is a coroutine, similar to
socket.getaddrinfo() function but non-blocking.
This method is a coroutine, similar to
socket.getnameinfo() function but non-blocking.
On Windows with SelectorEventLoop, these methods are not supported.
Use ProactorEventLoop to support pipes on Windows.
Register read pipe in eventloop.
protocol_factory should instantiate object with Protocol
interface.  pipe is a file-like object.
Return pair (transport, protocol), where transport supports the
ReadTransport interface.
With SelectorEventLoop event loop, the pipe is set to
non-blocking mode.
This method is a coroutine.
Register write pipe in eventloop.
protocol_factory should instantiate object with BaseProtocol
interface. pipe is file-like object.
Return pair (transport, protocol), where transport supports
WriteTransport interface.
With SelectorEventLoop event loop, the pipe is set to
non-blocking mode.
This method is a coroutine.
See also
The AbstractEventLoop.subprocess_exec() and
AbstractEventLoop.subprocess_shell() methods.
Availability: UNIX only.
Add a handler for a signal.
Raise ValueError if the signal number is invalid or uncatchable.
Raise RuntimeError if there is a problem setting up the handler.
Use functools.partial to pass keywords to the callback.
Remove a handler for a signal.
Return True if a signal handler was removed, False if not.
See also
The signal module.
Call a function in an Executor (pool of threads or
pool of processes). By default, an event loop uses a thread pool executor
(ThreadPoolExecutor).
Arrange for a func to be called in the specified executor.
The executor argument should be an Executor
instance. The default executor is used if executor is None.
Use functools.partial to pass keywords to the *func*.
This method is a coroutine.
Set the default executor used by run_in_executor().
Allows customizing how exceptions are handled in the event loop.
Set handler as the new event loop exception handler.
If handler is None, the default exception handler will
be set.
If handler is a callable object, it should have a
matching signature to (loop, context), where loop
will be a reference to the active event loop, context
will be a dict object (see call_exception_handler()
documentation for details about context).
Return the exception handler, or None if the default one
is in use.
New in version 3.5.2.
Default exception handler.
This is called when an exception occurs and no exception
handler is set, and can be called by a custom exception
handler that wants to defer to the default behavior.
context parameter has the same meaning as in
call_exception_handler().
Call the current event loop exception handler.
context is a dict object containing the following keys
(new keys may be introduced later):
Note
Note: this method should not be overloaded in subclassed
event loops.  For any custom exception handling, use
set_exception_handler() method.
Get the debug mode (bool) of the event loop.
The default value is True if the environment variable
PYTHONASYNCIODEBUG is set to a non-empty string, False
otherwise.
New in version 3.4.2.
Set the debug mode of the event loop.
New in version 3.4.2.
See also
The debug mode of asyncio.
Server listening on sockets.
Object created by the AbstractEventLoop.create_server() method and the
start_server() function. Don’t instantiate the class directly.
Stop serving: close listening sockets and set the sockets
attribute to None.
The sockets that represent existing incoming client connections are left
open.
The server is closed asynchronously, use the wait_closed()
coroutine to wait until the server is closed.
Wait until the close() method completes.
This method is a coroutine.
List of socket.socket objects the server is listening to, or
None if the server is closed.
A callback wrapper object returned by AbstractEventLoop.call_soon(),
AbstractEventLoop.call_soon_threadsafe(), AbstractEventLoop.call_later(),
and AbstractEventLoop.call_at().
Cancel the call.  If the callback is already canceled or executed,
this method has no effect.
Example using the AbstractEventLoop.call_soon() method to schedule a
callback. The callback displays "Hello World" and then stops the event
loop:
See also
The Hello World coroutine example
uses a coroutine.
Example of callback displaying the current date every second. The callback uses
the AbstractEventLoop.call_later() method to reschedule itself during 5
seconds, and then stops the event loop:
See also
The coroutine displaying the current date example uses a coroutine.
Wait until a file descriptor received some data using the
AbstractEventLoop.add_reader() method and then close the event loop:
See also
The register an open socket to wait for data using a protocol example uses a low-level protocol created by the
AbstractEventLoop.create_connection() method.
The register an open socket to wait for data using streams example uses high-level streams
created by the open_connection() function in a coroutine.
Register handlers for signals SIGINT and SIGTERM using
the AbstractEventLoop.add_signal_handler() method:
This example only works on UNIX.
18.5. asyncio – Asynchronous I/O, event loop, coroutines and tasks
18.5.2. Event loops

    Enter search terms or a module, class or function name.
    

