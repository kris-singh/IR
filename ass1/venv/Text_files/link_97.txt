URL: https://docs.python.org/3/library/sqlite3.html

Title: 12.6. sqlite3 — DB-API 2.0 interface for SQLite databases — Python 3.5.2 documentation

Doc Id: 97

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :Source code: Lib/sqlite3/
SQLite is a C library that provides a lightweight disk-based database that
doesn’t require a separate server process and allows accessing the database
using a nonstandard variant of the SQL query language. Some applications can use
SQLite for internal data storage.  It’s also possible to prototype an
application using SQLite and then port the code to a larger database such as
PostgreSQL or Oracle.
The sqlite3 module was written by Gerhard Häring.  It provides a SQL interface
compliant with the DB-API 2.0 specification described by PEP 249.
To use the module, you must first create a Connection object that
represents the database.  Here the data will be stored in the
example.db file:
You can also supply the special name :memory: to create a database in RAM.
Once you have a Connection, you can create a Cursor  object
and call its execute() method to perform SQL commands:
The data you’ve saved is persistent and is available in subsequent sessions:
Usually your SQL operations will need to use values from Python variables.  You
shouldn’t assemble your query using Python’s string operations because doing so
is insecure; it makes your program vulnerable to an SQL injection attack
(see https://xkcd.com/327/ for humorous example of what can go wrong).
Instead, use the DB-API’s parameter substitution.  Put ? as a placeholder
wherever you want to use a value, and then provide a tuple of values as the
second argument to the cursor’s execute() method.  (Other database
modules may use a different placeholder, such as %s or :1.) For
example:
To retrieve data after executing a SELECT statement, you can either treat the
cursor as an iterator, call the cursor’s fetchone() method to
retrieve a single matching row, or call fetchall() to get a list of the
matching rows.
This example uses the iterator form:
See also
The version number of this module, as a string. This is not the version of
the SQLite library.
The version number of this module, as a tuple of integers. This is not the
version of the SQLite library.
The version number of the run-time SQLite library, as a string.
The version number of the run-time SQLite library, as a tuple of integers.
This constant is meant to be used with the detect_types parameter of the
connect() function.
Setting it makes the sqlite3 module parse the declared type for each
column it returns.  It will parse out the first word of the declared type,
i. e.  for “integer primary key”, it will parse out “integer”, or for
“number(10)” it will parse out “number”. Then for that column, it will look
into the converters dictionary and use the converter function registered for
that type there.
This constant is meant to be used with the detect_types parameter of the
connect() function.
Setting this makes the SQLite interface parse the column name for each column it
returns.  It will look for a string formed [mytype] in there, and then decide
that ‘mytype’ is the type of the column. It will try to find an entry of
‘mytype’ in the converters dictionary and then use the converter function found
there to return the value. The column name found in Cursor.description
is only the first word of the column name, i.  e. if you use something like
'as "x [datetime]"' in your SQL, then we will parse out everything until the
first blank for the column name: the column name would simply be “x”.
Opens a connection to the SQLite database file database. You can use
":memory:" to open a database connection to a database that resides in RAM
instead of on disk.
When a database is accessed by multiple connections, and one of the processes
modifies the database, the SQLite database is locked until that transaction is
committed. The timeout parameter specifies how long the connection should wait
for the lock to go away until raising an exception. The default for the timeout
parameter is 5.0 (five seconds).
For the isolation_level parameter, please see the
Connection.isolation_level property of Connection objects.
SQLite natively supports only the types TEXT, INTEGER, REAL, BLOB and NULL. If
you want to use other types you must add support for them yourself. The
detect_types parameter and the using custom converters registered with the
module-level register_converter() function allow you to easily do that.
detect_types defaults to 0 (i. e. off, no type detection), you can set it to
any combination of PARSE_DECLTYPES and PARSE_COLNAMES to turn
type detection on.
By default, check_same_thread is True and only the creating thread may
use the connection. If set False, the returned connection may be shared
across multiple threads. When using multiple threads with the same connection
writing operations should be serialized by the user to avoid data corruption.
By default, the sqlite3 module uses its Connection class for the
connect call.  You can, however, subclass the Connection class and make
connect() use your class instead by providing your class for the factory
parameter.
Consult the section SQLite and Python types of this manual for details.
The sqlite3 module internally uses a statement cache to avoid SQL parsing
overhead. If you want to explicitly set the number of statements that are cached
for the connection, you can set the cached_statements parameter. The currently
implemented default is to cache 100 statements.
If uri is true, database is interpreted as a URI. This allows you
to specify options. For example, to open a database in read-only mode
you can use:
More information about this feature, including a list of recognized options, can
be found in the SQLite URI documentation.
Changed in version 3.4: Added the uri parameter.
Registers a callable to convert a bytestring from the database into a custom
Python type. The callable will be invoked for all database values that are of
the type typename. Confer the parameter detect_types of the connect()
function for how the type detection works. Note that the case of typename and
the name of the type in your query must match!
Registers a callable to convert the custom Python type type into one of
SQLite’s supported types. The callable callable accepts as single parameter
the Python value, and must return a value of the following types: int,
float, str or bytes.
Returns True if the string sql contains one or more complete SQL
statements terminated by semicolons. It does not verify that the SQL is
syntactically correct, only that there are no unclosed string literals and the
statement is terminated by a semicolon.
This can be used to build a shell for SQLite, as in the following example:
By default you will not get any tracebacks in user-defined functions,
aggregates, converters, authorizer callbacks etc. If you want to debug them,
you can call this function with flag set to True. Afterwards, you will
get tracebacks from callbacks on sys.stderr. Use False to
disable the feature again.
A SQLite database connection has the following attributes and methods:
Get or set the current isolation level. None for autocommit mode or
one of “DEFERRED”, “IMMEDIATE” or “EXCLUSIVE”. See section
Controlling Transactions for a more detailed explanation.
True if a transaction is active (there are uncommitted changes),
False otherwise.  Read-only attribute.
New in version 3.2.
The cursor method accepts a single optional parameter cursorClass. If
supplied, this must be a custom cursor class that extends
sqlite3.Cursor.
This method commits the current transaction. If you don’t call this method,
anything you did since the last call to commit() is not visible from
other database connections. If you wonder why you don’t see the data you’ve
written to the database, please check you didn’t forget to call this method.
This method rolls back any changes to the database since the last call to
commit().
This closes the database connection. Note that this does not automatically
call commit(). If you just close your database connection without
calling commit() first, your changes will be lost!
This is a nonstandard shortcut that creates a cursor object by calling
the cursor() method, calls the cursor’s
execute() method with the parameters given, and returns
the cursor.
This is a nonstandard shortcut that creates a cursor object by
calling the cursor() method, calls the cursor’s
executemany() method with the parameters given, and
returns the cursor.
This is a nonstandard shortcut that creates a cursor object by
calling the cursor() method, calls the cursor’s
executescript() method with the given sql_script, and
returns the cursor.
Creates a user-defined function that you can later use from within SQL
statements under the function name name. num_params is the number of
parameters the function accepts (if num_params is -1, the function may
take any number of arguments), and func is a Python callable that is
called as the SQL function.
The function can return any of the types supported by SQLite: bytes, str, int,
float and None.
Example:
Creates a user-defined aggregate function.
The aggregate class must implement a step method, which accepts the number
of parameters num_params (if num_params is -1, the function may take
any number of arguments), and a finalize method which will return the
final result of the aggregate.
The finalize method can return any of the types supported by SQLite:
bytes, str, int, float and None.
Example:
Creates a collation with the specified name and callable. The callable will
be passed two string arguments. It should return -1 if the first is ordered
lower than the second, 0 if they are ordered equal and 1 if the first is ordered
higher than the second.  Note that this controls sorting (ORDER BY in SQL) so
your comparisons don’t affect other SQL operations.
Note that the callable will get its parameters as Python bytestrings, which will
normally be encoded in UTF-8.
The following example shows a custom collation that sorts “the wrong way”:
To remove a collation, call create_collation with None as callable:
You can call this method from a different thread to abort any queries that might
be executing on the connection. The query will then abort and the caller will
get an exception.
This routine registers a callback. The callback is invoked for each attempt to
access a column of a table in the database. The callback should return
SQLITE_OK if access is allowed, SQLITE_DENY if the entire SQL
statement should be aborted with an error and SQLITE_IGNORE if the
column should be treated as a NULL value. These constants are available in the
sqlite3 module.
The first argument to the callback signifies what kind of operation is to be
authorized. The second and third argument will be arguments or None
depending on the first argument. The 4th argument is the name of the database
(“main”, “temp”, etc.) if applicable. The 5th argument is the name of the
inner-most trigger or view that is responsible for the access attempt or
None if this access attempt is directly from input SQL code.
Please consult the SQLite documentation about the possible values for the first
argument and the meaning of the second and third argument depending on the first
one. All necessary constants are available in the sqlite3 module.
This routine registers a callback. The callback is invoked for every n
instructions of the SQLite virtual machine. This is useful if you want to
get called from SQLite during long-running operations, for example to update
a GUI.
If you want to clear any previously installed progress handler, call the
method with None for handler.
Registers trace_callback to be called for each SQL statement that is
actually executed by the SQLite backend.
The only argument passed to the callback is the statement (as string) that
is being executed. The return value of the callback is ignored. Note that
the backend does not only run statements passed to the Cursor.execute()
methods.  Other sources include the transaction management of the Python
module and the execution of triggers defined in the current database.
Passing None as trace_callback will disable the trace callback.
New in version 3.3.
This routine allows/disallows the SQLite engine to load SQLite extensions
from shared libraries.  SQLite extensions can define new functions,
aggregates or whole new virtual table implementations.  One well-known
extension is the fulltext-search extension distributed with SQLite.
Loadable extensions are disabled by default. See [1].
New in version 3.2.
This routine loads a SQLite extension from a shared library.  You have to
enable extension loading with enable_load_extension() before you can
use this routine.
Loadable extensions are disabled by default. See [1].
New in version 3.2.
You can change this attribute to a callable that accepts the cursor and the
original row as a tuple and will return the real result row.  This way, you can
implement more advanced ways of returning results, such  as returning an object
that can also access columns by name.
Example:
If returning a tuple doesn’t suffice and you want name-based access to
columns, you should consider setting row_factory to the
highly-optimized sqlite3.Row type. Row provides both
index-based and case-insensitive name-based access to columns with almost no
memory overhead. It will probably be better than your own custom
dictionary-based approach or even a db_row based solution.
Using this attribute you can control what objects are returned for the TEXT
data type. By default, this attribute is set to str and the
sqlite3 module will return Unicode objects for TEXT. If you want to
return bytestrings instead, you can set it to bytes.
You can also set it to any other callable that accepts a single bytestring
parameter and returns the resulting object.
See the following example code for illustration:
Returns the total number of database rows that have been modified, inserted, or
deleted since the database connection was opened.
Returns an iterator to dump the database in an SQL text format.  Useful when
saving an in-memory database for later restoration.  This function provides
the same capabilities as the .dump command in the sqlite3
shell.
Example:
A Cursor instance has the following attributes and methods.
Executes an SQL statement. The SQL statement may be parameterized (i. e.
placeholders instead of SQL literals). The sqlite3 module supports two
kinds of placeholders: question marks (qmark style) and named placeholders
(named style).
Here’s an example of both styles:
execute() will only execute a single SQL statement. If you try to execute
more than one statement with it, it will raise an sqlite3.Warning. Use
executescript() if you want to execute multiple SQL statements with one
call.
Executes an SQL command against all parameter sequences or mappings found in
the sequence seq_of_parameters.  The sqlite3 module also allows
using an iterator yielding parameters instead of a sequence.
Here’s a shorter example using a generator:
This is a nonstandard convenience method for executing multiple SQL statements
at once. It issues a COMMIT statement first, then executes the SQL script it
gets as a parameter.
sql_script can be an instance of str.
Example:
Fetches the next row of a query result set, returning a single sequence,
or None when no more data is available.
Fetches the next set of rows of a query result, returning a list.  An empty
list is returned when no more rows are available.
The number of rows to fetch per call is specified by the size parameter.
If it is not given, the cursor’s arraysize determines the number of rows
to be fetched. The method should try to fetch as many rows as indicated by
the size parameter. If this is not possible due to the specified number of
rows not being available, fewer rows may be returned.
Note there are performance considerations involved with the size parameter.
For optimal performance, it is usually best to use the arraysize attribute.
If the size parameter is used, then it is best for it to retain the same
value from one fetchmany() call to the next.
Fetches all (remaining) rows of a query result, returning a list.  Note that
the cursor’s arraysize attribute can affect the performance of this operation.
An empty list is returned when no rows are available.
Close the cursor now (rather than whenever __del__ is called).
The cursor will be unusable from this point forward; a ProgrammingError
exception will be raised if any operation is attempted with the cursor.
Although the Cursor class of the sqlite3 module implements this
attribute, the database engine’s own support for the determination of “rows
affected”/”rows selected” is quirky.
For executemany() statements, the number of modifications are summed up
into rowcount.
As required by the Python DB API Spec, the rowcount attribute “is -1 in
case no executeXX() has been performed on the cursor or the rowcount of the
last operation is not determinable by the interface”. This includes SELECT
statements because we cannot determine the number of rows a query produced
until all rows were fetched.
With SQLite versions before 3.6.5, rowcount is set to 0 if
you make a DELETE FROM table without any condition.
This read-only attribute provides the rowid of the last modified row. It is
only set if you issued an INSERT statement using the execute()
method. For operations other than INSERT or when executemany() is
called, lastrowid is set to None.
This read-only attribute provides the column names of the last query. To
remain compatible with the Python DB API, it returns a 7-tuple for each
column where the last six items of each tuple are None.
It is set for SELECT statements without any matching rows as well.
This read-only attribute provides the SQLite database Connection
used by the Cursor object.  A Cursor object created by
calling con.cursor() will have a
connection attribute that refers to con:
A Row instance serves as a highly optimized
row_factory for Connection objects.
It tries to mimic a tuple in most of its features.
It supports mapping access by column name and index, iteration,
representation, equality testing and len().
If two Row objects have exactly the same columns and their
members are equal, they compare equal.
This method returns a list of column names. Immediately after a query,
it is the first member of each tuple in Cursor.description.
Changed in version 3.5: Added support of slicing.
Let’s assume we initialize a table as in the example given above:
Now we plug Row in:
SQLite natively supports the following types: NULL, INTEGER,
REAL, TEXT, BLOB.
The following Python types can thus be sent to SQLite without any problem:
This is how SQLite types are converted to Python types by default:
The type system of the sqlite3 module is extensible in two ways: you can
store additional Python types in a SQLite database via object adaptation, and
you can let the sqlite3 module convert SQLite types to different Python
types via converters.
As described before, SQLite supports only a limited set of types natively. To
use other Python types with SQLite, you must adapt them to one of the
sqlite3 module’s supported types for SQLite: one of NoneType, int, float,
str, bytes.
There are two ways to enable the sqlite3 module to adapt a custom Python
type to one of the supported ones.
This is a good approach if you write the class yourself. Let’s suppose you have
a class like this:
Now you want to store the point in a single SQLite column.  First you’ll have to
choose one of the supported types first to be used for representing the point.
Let’s just use str and separate the coordinates using a semicolon. Then you need
to give your class a method __conform__(self, protocol) which must return
the converted value. The parameter protocol will be PrepareProtocol.
The other possibility is to create a function that converts the type to the
string representation and register the function with register_adapter().
The sqlite3 module has two default adapters for Python’s built-in
datetime.date and datetime.datetime types.  Now let’s suppose
we want to store datetime.datetime objects not in ISO representation,
but as a Unix timestamp.
Writing an adapter lets you send custom Python types to SQLite. But to make it
really useful we need to make the Python to SQLite to Python roundtrip work.
Enter converters.
Let’s go back to the Point class. We stored the x and y coordinates
separated via semicolons as strings in SQLite.
First, we’ll define a converter function that accepts the string as a parameter
and constructs a Point object from it.
Note
Converter functions always get called with a bytes object, no
matter under which data type you sent the value to SQLite.
Now you need to make the sqlite3 module know that what you select from
the database is actually a point. There are two ways of doing this:
Both ways are described in section Module functions and constants, in the entries
for the constants PARSE_DECLTYPES and PARSE_COLNAMES.
The following example illustrates both approaches.
There are default adapters for the date and datetime types in the datetime
module. They will be sent as ISO dates/ISO timestamps to SQLite.
The default converters are registered under the name “date” for
datetime.date and under the name “timestamp” for
datetime.datetime.
This way, you can use date/timestamps from Python without any additional
fiddling in most cases. The format of the adapters is also compatible with the
experimental SQLite date/time functions.
The following example demonstrates this.
If a timestamp stored in SQLite has a fractional part longer than 6
numbers, its value will be truncated to microsecond precision by the
timestamp converter.
By default, the sqlite3 module opens transactions implicitly before a
Data Modification Language (DML)  statement (i.e.
INSERT/UPDATE/DELETE/REPLACE), and commits transactions
implicitly before a non-DML, non-query statement (i. e.
anything other than SELECT or the aforementioned).
So if you are within a transaction and issue a command like CREATE TABLE
..., VACUUM, PRAGMA, the sqlite3 module will commit implicitly
before executing that command. There are two reasons for doing that. The first
is that some of these commands don’t work within transactions. The other reason
is that sqlite3 needs to keep track of the transaction state (if a transaction
is active or not).  The current transaction state is exposed through the
Connection.in_transaction attribute of the connection object.
You can control which kind of BEGIN statements sqlite3 implicitly executes
(or none at all) via the isolation_level parameter to the connect()
call, or via the isolation_level property of connections.
If you want autocommit mode, then set isolation_level to None.
Otherwise leave it at its default, which will result in a plain “BEGIN”
statement, or set it to one of SQLite’s supported isolation levels: “DEFERRED”,
“IMMEDIATE” or “EXCLUSIVE”.
Using the nonstandard execute(), executemany() and
executescript() methods of the Connection object, your code can
be written more concisely because you don’t have to create the (often
superfluous) Cursor objects explicitly. Instead, the Cursor
objects are created implicitly and these shortcut methods return the cursor
objects. This way, you can execute a SELECT statement and iterate over it
directly using only a single call on the Connection object.
One useful feature of the sqlite3 module is the built-in
sqlite3.Row class designed to be used as a row factory.
Rows wrapped with this class can be accessed both by index (like tuples) and
case-insensitively by name:
Connection objects can be used as context managers
that automatically commit or rollback transactions.  In the event of an
exception, the transaction is rolled back; otherwise, the transaction is
committed:
Older SQLite versions had issues with sharing connections between threads.
That’s why the Python module disallows sharing connections and cursors between
threads. If you still try to do so, you will get an exception at runtime.
The only exception is calling the interrupt() method, which
only makes sense to call from a different thread.
Footnotes
12.5. dbm — Interfaces to Unix “databases”
13. Data Compression and Archiving

    Enter search terms or a module, class or function name.
    

