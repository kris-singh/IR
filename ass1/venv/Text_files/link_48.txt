URL: https://docs.python.org/3/library/exceptions.html

Title: 5. Built-in Exceptions — Python 3.5.2 documentation

Doc Id: 48

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :In Python, all exceptions must be instances of a class that derives from
BaseException.  In a try statement with an except
clause that mentions a particular class, that clause also handles any exception
classes derived from that class (but not exception classes from which it is
derived).  Two exception classes that are not related via subclassing are never
equivalent, even if they have the same name.
The built-in exceptions listed below can be generated by the interpreter or
built-in functions.  Except where mentioned, they have an “associated value”
indicating the detailed cause of the error.  This may be a string or a tuple of
several items of information (e.g., an error code and a string explaining the
code).  The associated value is usually passed as arguments to the exception
class’s constructor.
User code can raise built-in exceptions.  This can be used to test an exception
handler or to report an error condition “just like” the situation in which the
interpreter raises the same exception; but beware that there is nothing to
prevent user code from raising an inappropriate error.
The built-in exception classes can be subclassed to define new exceptions;
programmers are encouraged to derive new exceptions from the Exception
class or one of its subclasses, and not from BaseException.  More
information on defining exceptions is available in the Python Tutorial under
User-defined Exceptions.
When raising (or re-raising) an exception in an except or
finally clause
__context__ is automatically set to the last exception caught; if the
new exception is not handled the traceback that is eventually displayed will
include the originating exception(s) and the final exception.
When raising a new exception (rather than using a bare raise to re-raise
the exception currently being handled), the implicit exception context can be
supplemented with an explicit cause by using from with
raise:
The expression following from must be an exception or None. It
will be set as __cause__ on the raised exception. Setting
__cause__ also implicitly sets the __suppress_context__
attribute to True, so that using raise new_exc from None
effectively replaces the old exception with the new one for display
purposes (e.g. converting KeyError to AttributeError, while
leaving the old exception available in __context__ for introspection
when debugging.
The default traceback display code shows these chained exceptions in
addition to the traceback for the exception itself. An explicitly chained
exception in __cause__ is always shown when present. An implicitly
chained exception in __context__ is shown only if __cause__
is None and __suppress_context__ is false.
In either case, the exception itself is always shown after any chained
exceptions so that the final line of the traceback always shows the last
exception that was raised.
The following exceptions are used mostly as base classes for other exceptions.
The base class for all built-in exceptions.  It is not meant to be directly
inherited by user-defined classes (for that, use Exception).  If
str() is called on an instance of this class, the representation of
the argument(s) to the instance are returned, or the empty string when
there were no arguments.
The tuple of arguments given to the exception constructor.  Some built-in
exceptions (like OSError) expect a certain number of arguments and
assign a special meaning to the elements of this tuple, while others are
usually called only with a single string giving an error message.
This method sets tb as the new traceback for the exception and returns
the exception object.  It is usually used in exception handling code like
this:
All built-in, non-system-exiting exceptions are derived from this class.  All
user-defined exceptions should also be derived from this class.
The base class for those built-in exceptions that are raised for various
arithmetic errors: OverflowError, ZeroDivisionError,
FloatingPointError.
Raised when a buffer related operation cannot be
performed.
The base class for the exceptions that are raised when a key or index used on
a mapping or sequence is invalid: IndexError, KeyError.  This
can be raised directly by codecs.lookup().
The following exceptions are the exceptions that are usually raised.
Raised when an assert statement fails.
Raised when an attribute reference (see Attribute references) or
assignment fails.  (When an object does not support attribute references or
attribute assignments at all, TypeError is raised.)
Raised when the input() function hits an end-of-file condition (EOF)
without reading any data. (N.B.: the io.IOBase.read() and
io.IOBase.readline() methods return an empty string when they hit EOF.)
Raised when a floating point operation fails.  This exception is always defined,
but can only be raised when Python is configured with the
--with-fpectl option, or the WANT_SIGFPE_HANDLER symbol is
defined in the pyconfig.h file.
Raised when a generator or coroutine is closed;
see generator.close() and coroutine.close().  It
directly inherits from BaseException instead of Exception since
it is technically not an error.
Raised when an import statement fails to find the module definition
or when a from ... import fails to find a name that is to be imported.
The name and path attributes can be set using keyword-only
arguments to the constructor. When set they represent the name of the module
that was attempted to be imported and the path to any file which triggered
the exception, respectively.
Changed in version 3.3: Added the name and path attributes.
Raised when a sequence subscript is out of range.  (Slice indices are
silently truncated to fall in the allowed range; if an index is not an
integer, TypeError is raised.)
Raised when a mapping (dictionary) key is not found in the set of existing keys.
Raised when the user hits the interrupt key (normally Control-C or
Delete).  During execution, a check for interrupts is made
regularly. The exception inherits from BaseException so as to not be
accidentally caught by code that catches Exception and thus prevent
the interpreter from exiting.
Raised when an operation runs out of memory but the situation may still be
rescued (by deleting some objects).  The associated value is a string indicating
what kind of (internal) operation ran out of memory. Note that because of the
underlying memory management architecture (C’s malloc() function), the
interpreter may not always be able to completely recover from this situation; it
nevertheless raises an exception so that a stack traceback can be printed, in
case a run-away program was the cause.
Raised when a local or global name is not found.  This applies only to
unqualified names.  The associated value is an error message that includes the
name that could not be found.
This exception is derived from RuntimeError.  In user defined base
classes, abstract methods should raise this exception when they require derived
classes to override the method.
This exception is raised when a system function returns a system-related
error, including I/O failures such as “file not found” or “disk full”
(not for illegal argument types or other incidental errors).
The second form of the constructor sets the corresponding attributes,
described below.  The attributes default to None if not
specified.  For backwards compatibility, if three arguments are passed,
the args attribute contains only a 2-tuple
of the first two constructor arguments.
The constructor often actually returns a subclass of OSError, as
described in OS exceptions below.  The particular subclass depends on
the final errno value.  This behaviour only occurs when
constructing OSError directly or via an alias, and is not
inherited when subclassing.
A numeric error code from the C variable errno.
Under Windows, this gives you the native
Windows error code.  The errno attribute is then an approximate
translation, in POSIX terms, of that native error code.
Under Windows, if the winerror constructor argument is an integer,
the errno attribute is determined from the Windows error code,
and the errno argument is ignored.  On other platforms, the
winerror argument is ignored, and the winerror attribute
does not exist.
The corresponding error message, as provided by
the operating system.  It is formatted by the C
functions perror() under POSIX, and FormatMessage()
under Windows.
For exceptions that involve a file system path (such as open() or
os.unlink()), filename is the file name passed to the function.
For functions that involve two file system paths (such as
os.rename()), filename2 corresponds to the second
file name passed to the function.
Changed in version 3.3: EnvironmentError, IOError, WindowsError,
socket.error, select.error and
mmap.error have been merged into OSError, and the
constructor may return a subclass.
Changed in version 3.4: The filename attribute is now the original file name passed to
the function, instead of the name encoded to or decoded from the
filesystem encoding.  Also, the filename2 constructor argument and
attribute was added.
Raised when the result of an arithmetic operation is too large to be
represented.  This cannot occur for integers (which would rather raise
MemoryError than give up).  However, for historical reasons,
OverflowError is sometimes raised for integers that are outside a required
range.   Because of the lack of standardization of floating point exception
handling in C, most floating point operations are not checked.
This exception is derived from RuntimeError.  It is raised when the
interpreter detects that the maximum recursion depth (see
sys.getrecursionlimit()) is exceeded.
New in version 3.5: Previously, a plain RuntimeError was raised.
This exception is raised when a weak reference proxy, created by the
weakref.proxy() function, is used to access an attribute of the referent
after it has been garbage collected. For more information on weak references,
see the weakref module.
Raised when an error is detected that doesn’t fall in any of the other
categories.  The associated value is a string indicating what precisely went
wrong.
Raised by built-in function next() and an iterator‘s
__next__() method to signal that there are no further
items produced by the iterator.
The exception object has a single attribute value, which is
given as an argument when constructing the exception, and defaults
to None.
When a generator or coroutine function
returns, a new StopIteration instance is
raised, and the value returned by the function is used as the
value parameter to the constructor of the exception.
If a generator function defined in the presence of a from __future__
import generator_stop directive raises StopIteration, it will be
converted into a RuntimeError (retaining the StopIteration
as the new exception’s cause).
Changed in version 3.3: Added value attribute and the ability for generator functions to
use it to return a value.
Changed in version 3.5: Introduced the RuntimeError transformation.
Must be raised by __anext__() method of an
asynchronous iterator object to stop the iteration.
New in version 3.5.
Raised when the parser encounters a syntax error.  This may occur in an
import statement, in a call to the built-in functions exec()
or eval(), or when reading the initial script or standard input
(also interactively).
Instances of this class have attributes filename, lineno,
offset and text for easier access to the details.  str()
of the exception instance returns only the message.
Base class for syntax errors related to incorrect indentation.  This is a
subclass of SyntaxError.
Raised when indentation contains an inconsistent use of tabs and spaces.
This is a subclass of IndentationError.
Raised when the interpreter finds an internal error, but the situation does not
look so serious to cause it to abandon all hope. The associated value is a
string indicating what went wrong (in low-level terms).
You should report this to the author or maintainer of your Python interpreter.
Be sure to report the version of the Python interpreter (sys.version; it is
also printed at the start of an interactive Python session), the exact error
message (the exception’s associated value) and if possible the source of the
program that triggered the error.
This exception is raised by the sys.exit() function.  It inherits from
BaseException instead of Exception so that it is not accidentally
caught by code that catches Exception.  This allows the exception to
properly propagate up and cause the interpreter to exit.  When it is not
handled, the Python interpreter exits; no stack traceback is printed.  The
constructor accepts the same optional argument passed to sys.exit().
If the value is an integer, it specifies the system exit status (passed to
C’s exit() function); if it is None, the exit status is zero; if
it has another type (such as a string), the object’s value is printed and
the exit status is one.
A call to sys.exit() is translated into an exception so that clean-up
handlers (finally clauses of try statements) can be
executed, and so that a debugger can execute a script without running the risk
of losing control.  The os._exit() function can be used if it is
absolutely positively necessary to exit immediately (for example, in the child
process after a call to os.fork()).
The exit status or error message that is passed to the constructor.
(Defaults to None.)
Raised when an operation or function is applied to an object of inappropriate
type.  The associated value is a string giving details about the type mismatch.
Raised when a reference is made to a local variable in a function or method, but
no value has been bound to that variable.  This is a subclass of
NameError.
Raised when a Unicode-related encoding or decoding error occurs.  It is a
subclass of ValueError.
UnicodeError has attributes that describe the encoding or decoding
error.  For example, err.object[err.start:err.end] gives the particular
invalid input that the codec failed on.
The name of the encoding that raised the error.
A string describing the specific codec error.
The object the codec was attempting to encode or decode.
The first index of invalid data in object.
The index after the last invalid data in object.
Raised when a Unicode-related error occurs during encoding.  It is a subclass of
UnicodeError.
Raised when a Unicode-related error occurs during decoding.  It is a subclass of
UnicodeError.
Raised when a Unicode-related error occurs during translating.  It is a subclass
of UnicodeError.
Raised when a built-in operation or function receives an argument that has the
right type but an inappropriate value, and the situation is not described by a
more precise exception such as IndexError.
Raised when the second argument of a division or modulo operation is zero.  The
associated value is a string indicating the type of the operands and the
operation.
The following exceptions are kept for compatibility with previous versions;
starting from Python 3.3, they are aliases of OSError.
Only available on Windows.
The following exceptions are subclasses of OSError, they get raised
depending on the system error code.
Raised when an operation would block on an object (e.g. socket) set
for non-blocking operation.
Corresponds to errno EAGAIN, EALREADY,
EWOULDBLOCK and EINPROGRESS.
In addition to those of OSError, BlockingIOError can have
one more attribute:
An integer containing the number of characters written to the stream
before it blocked.  This attribute is available when using the
buffered I/O classes from the io module.
Raised when an operation on a child process failed.
Corresponds to errno ECHILD.
A base class for connection-related issues.
Subclasses are BrokenPipeError, ConnectionAbortedError,
ConnectionRefusedError and ConnectionResetError.
A subclass of ConnectionError, raised when trying to write on a
pipe while the other end has been closed, or trying to write on a socket
which has been shutdown for writing.
Corresponds to errno EPIPE and ESHUTDOWN.
A subclass of ConnectionError, raised when a connection attempt
is aborted by the peer.
Corresponds to errno ECONNABORTED.
A subclass of ConnectionError, raised when a connection attempt
is refused by the peer.
Corresponds to errno ECONNREFUSED.
A subclass of ConnectionError, raised when a connection is
reset by the peer.
Corresponds to errno ECONNRESET.
Raised when trying to create a file or directory which already exists.
Corresponds to errno EEXIST.
Raised when a file or directory is requested but doesn’t exist.
Corresponds to errno ENOENT.
Raised when a system call is interrupted by an incoming signal.
Corresponds to errno EINTR.
Changed in version 3.5: Python now retries system calls when a syscall is interrupted by a
signal, except if the signal handler raises an exception (see PEP 475
for the rationale), instead of raising InterruptedError.
Raised when a file operation (such as os.remove()) is requested
on a directory.
Corresponds to errno EISDIR.
Raised when a directory operation (such as os.listdir()) is requested
on something which is not a directory.
Corresponds to errno ENOTDIR.
Raised when trying to run an operation without the adequate access
rights - for example filesystem permissions.
Corresponds to errno EACCES and EPERM.
Raised when a given process doesn’t exist.
Corresponds to errno ESRCH.
Raised when a system function timed out at the system level.
Corresponds to errno ETIMEDOUT.
New in version 3.3: All the above OSError subclasses were added.
See also
PEP 3151 - Reworking the OS and IO exception hierarchy
The following exceptions are used as warning categories; see the warnings
module for more information.
Base class for warning categories.
Base class for warnings generated by user code.
Base class for warnings about deprecated features.
Base class for warnings about features which will be deprecated in the future.
Base class for warnings about dubious syntax.
Base class for warnings about dubious runtime behavior.
Base class for warnings about constructs that will change semantically in the
future.
Base class for warnings about probable mistakes in module imports.
Base class for warnings related to Unicode.
Base class for warnings related to bytes and bytearray.
Base class for warnings related to resource usage.
New in version 3.2.
The class hierarchy for built-in exceptions is:
4. Built-in Types
6. Text Processing Services

    Enter search terms or a module, class or function name.
    

