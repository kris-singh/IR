URL: https://docs.python.org/3/library/zipimport.html

Title: 31.1. zipimport — Import modules from Zip archives — Python 3.5.2 documentation

Doc Id: 239

Meta Tags : No meta tag found in document

Date :Jul 29, 2016

Content :This module adds the ability to import Python modules (*.py,
*.py[co]) and packages from ZIP-format archives. It is usually not
needed to use the zipimport module explicitly; it is automatically used
by the built-in import mechanism for sys.path items that are paths
to ZIP archives.
Typically, sys.path is a list of directory names as strings.  This module
also allows an item of sys.path to be a string naming a ZIP file archive.
The ZIP archive can contain a subdirectory structure to support package imports,
and a path within the archive can be specified to only import from a
subdirectory.  For example, the path example.zip/lib/ would only
import from the lib/ subdirectory within the archive.
Any files may be present in the ZIP archive, but only files .py and
.pyc are available for import.  ZIP import of dynamic modules
(.pyd, .so) is disallowed. Note that if an archive only contains
.py files, Python will not attempt to modify the archive by adding the
corresponding .pyc file, meaning that if a ZIP archive
doesn’t contain .pyc files, importing may be rather slow.
ZIP archives with an archive comment are currently not supported.
See also
This module defines an exception:
Exception raised by zipimporter objects. It’s a subclass of ImportError,
so it can be caught as ImportError, too.
zipimporter is the class for importing ZIP files.
Create a new zipimporter instance. archivepath must be a path to a ZIP
file, or to a specific path within a ZIP file.  For example, an archivepath
of foo/bar.zip/lib will look for modules in the lib directory
inside the ZIP file foo/bar.zip (provided that it exists).
ZipImportError is raised if archivepath doesn’t point to a valid ZIP
archive.
Search for a module specified by fullname. fullname must be the fully
qualified (dotted) module name. It returns the zipimporter instance itself
if the module was found, or None if it wasn’t. The optional
path argument is ignored—it’s there for compatibility with the
importer protocol.
Return the code object for the specified module. Raise
ZipImportError if the module couldn’t be found.
Return the data associated with pathname. Raise OSError if the
file wasn’t found.
Changed in version 3.3: IOError used to be raised instead of OSError.
Return the value __file__ would be set to if the specified module
was imported. Raise ZipImportError if the module couldn’t be
found.
New in version 3.1.
Return the source code for the specified module. Raise
ZipImportError if the module couldn’t be found, return
None if the archive does contain the module, but has no source
for it.
Return True if the module specified by fullname is a package. Raise
ZipImportError if the module couldn’t be found.
Load the module specified by fullname. fullname must be the fully
qualified (dotted) module name. It returns the imported module, or raises
ZipImportError if it wasn’t found.
The file name of the importer’s associated ZIP file, without a possible
subpath.
The subpath within the ZIP file where modules are searched.  This is the
empty string for zipimporter objects which point to the root of the ZIP
file.
The archive and prefix attributes, when combined with a
slash, equal the original archivepath argument given to the
zipimporter constructor.
Here is an example that imports a module from a ZIP archive - note that the
zipimport module is not explicitly used.
31. Importing Modules
31.2. pkgutil — Package extension utility

    Enter search terms or a module, class or function name.
    

