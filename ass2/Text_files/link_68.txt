URL: https://docs.python.org/3/library/copy.html

Title: 8.10. copy — Shallow and deep copy operations — Python 3.5.2 documentation

Doc Id: 68

Meta Tags : No meta tag found in document

Date :Jun 30, 2016

Content :Source code: Lib/copy.py
Assignment statements in Python do not copy objects, they create bindings
between a target and an object. For collections that are mutable or contain
mutable items, a copy is sometimes needed so one can change one copy without
changing the other. This module provides generic shallow and deep copy
operations (explained below).
Interface summary:
Return a shallow copy of x.
Return a deep copy of x.
Raised for module specific errors.
The difference between shallow and deep copying is only relevant for compound
objects (objects that contain other objects, like lists or class instances):
Two problems often exist with deep copy operations that don’t exist with shallow
copy operations:
The deepcopy() function avoids these problems by:
This module does not copy types like module, method, stack trace, stack frame,
file, socket, window, array, or any similar types.  It does “copy” functions and
classes (shallow and deeply), by returning the original object unchanged; this
is compatible with the way these are treated by the pickle module.
Shallow copies of dictionaries can be made using dict.copy(), and
of lists by assigning a slice of the entire list, for example,
copied_list = original_list[:].
Classes can use the same interfaces to control copying that they use to control
pickling.  See the description of module pickle for information on these
methods.  In fact, the copy module uses the registered
pickle functions from the copyreg module.
In order for a class to define its own copy implementation, it can define
special methods __copy__() and __deepcopy__().  The former is called
to implement the shallow copy operation; no additional arguments are passed.
The latter is called to implement the deep copy operation; it is passed one
argument, the memo dictionary.  If the __deepcopy__() implementation needs
to make a deep copy of a component, it should call the deepcopy() function
with the component as first argument and the memo dictionary as second argument.
See also
8.9. types — Dynamic type creation and names for built-in types
8.11. pprint — Data pretty printer

    Enter search terms or a module, class or function name.
    

