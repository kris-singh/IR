URL: https://docs.python.org/3/tutorial/venv.html

Title: 12. Virtual Environments and Packages — Python 3.5.2 documentation

Doc Id: 39

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :Python applications will often use packages and modules that don’t
come as part of the standard library.  Applications will sometimes
need a specific version of a library, because the application may
require that a particular bug has been fixed or the application may be
written using an obsolete version of the library’s interface.
This means it may not be possible for one Python installation to meet
the requirements of every application.  If application A needs version
1.0 of a particular module but application B needs version 2.0, then
the requirements are in conflict and installing either version 1.0 or 2.0
will leave one application unable to run.
The solution for this problem is to create a virtual
environment (often shortened to “virtualenv”), a self-contained
directory tree that contains a Python installation for a particular
version of Python, plus a number of additional packages.
Different applications can then use different virtual environments.
To resolve the earlier example of conflicting requirements,
application A can have its own virtual environment with version 1.0
installed while application B has another virtualenv with version 2.0.
If application B requires a library be upgraded to version 3.0, this will
not affect application A’s environment.
The script used to create and manage virtual environments is called
pyvenv.  pyvenv will usually install the most
recent version of Python that you have available; the script is also
installed with a version number, so if you have multiple versions of
Python on your system you can select a specific Python version by
running pyvenv-3.4 or whichever version you want.
To create a virtualenv, decide upon a directory
where you want to place it and run pyvenv with the
directory path:
This will create the tutorial-env directory if it doesn’t exist,
and also create directories inside it containing a copy of the Python
interpreter, the standard library, and various supporting files.
Once you’ve created a virtual environment, you need to
activate it.
On Windows, run:
On Unix or MacOS, run:
(This script is written for the bash shell.  If you use the
csh or fish shells, there are alternate
activate.csh and activate.fish scripts you should use
instead.)
Activating the virtualenv will change your shell’s prompt to show what
virtualenv you’re using, and modify the environment so that running
python will get you that particular version and installation of
Python.  For example:
Once you’ve activated a virtual environment, you can install, upgrade,
and remove packages using a program called pip.  By default
pip will install packages from the Python Package Index,
<https://pypi.python.org/pypi>.  You can browse the Python Package Index
by going to it in your web browser, or you can use pip‘s
limited search feature:
pip has a number of subcommands: “search”, “install”, “uninstall”,
“freeze”, etc.  (Consult the Installing Python Modules guide for
complete documentation for pip.)
You can install the latest version of a package by specifying a package’s name:
You can also install a specific version of a package by giving the
package name  followed by == and the version number:
If you re-run this command, pip will notice that the requested
version is already installed and do nothing.  You can supply a
different version number to get that version, or you can run pip
install --upgrade to upgrade the package to the latest version:
pip uninstall followed by one or more package names will remove the
packages from the virtual environment.
pip show will display information about a particular package:
pip list will display all of the packages installed in the virtual
environment:
pip freeze will produce a similar list of the installed packages,
but the output uses the format that pip install expects.
A common convention is to put this list in a requirements.txt file:
The requirements.txt can then be committed to version control and
shipped as part of an application.  Users can then install all the
necessary packages with install -r:
pip has many more options.  Consult the Installing Python Modules
guide for complete documentation for pip.  When you’ve written
a package and want to make it available on the Python Package Index,
consult the Distributing Python Modules guide.
11. Brief Tour of the Standard Library – Part II
13. What Now?

    Enter search terms or a module, class or function name.
    

