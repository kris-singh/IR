URL: https://docs.python.org/3/library/functools.html

Title: 10.2. functools — Higher-order functions and operations on callable objects — Python 3.5.2 documentation

Doc Id: 386

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :Source code: Lib/functools.py
The functools module is for higher-order functions: functions that act on
or return other functions. In general, any callable object can be treated as a
function for the purposes of this module.
The functools module defines the following functions:
Transform an old-style comparison function to a key function.  Used
with tools that accept key functions (such as sorted(), min(),
max(), heapq.nlargest(), heapq.nsmallest(),
itertools.groupby()).  This function is primarily used as a transition
tool for programs being converted from Python 2 which supported the use of
comparison functions.
A comparison function is any callable that accept two arguments, compares them,
and returns a negative number for less-than, zero for equality, or a positive
number for greater-than.  A key function is a callable that accepts one
argument and returns another value to be used as the sort key.
Example:
For sorting examples and a brief sorting tutorial, see Sorting HOW TO.
New in version 3.2.
Decorator to wrap a function with a memoizing callable that saves up to the
maxsize most recent calls.  It can save time when an expensive or I/O bound
function is periodically called with the same arguments.
Since a dictionary is used to cache results, the positional and keyword
arguments to the function must be hashable.
If maxsize is set to None, the LRU feature is disabled and the cache can
grow without bound.  The LRU feature performs best when maxsize is a
power-of-two.
If typed is set to True, function arguments of different types will be
cached separately.  For example, f(3) and f(3.0) will be treated
as distinct calls with distinct results.
To help measure the effectiveness of the cache and tune the maxsize
parameter, the wrapped function is instrumented with a cache_info()
function that returns a named tuple showing hits, misses,
maxsize and currsize.  In a multi-threaded environment, the hits
and misses are approximate.
The decorator also provides a cache_clear() function for clearing or
invalidating the cache.
The original underlying function is accessible through the
__wrapped__ attribute.  This is useful for introspection, for
bypassing the cache, or for rewrapping the function with a different cache.
An LRU (least recently used) cache works
best when the most recent calls are the best predictors of upcoming calls (for
example, the most popular articles on a news server tend to change each day).
The cache’s size limit assures that the cache does not grow without bound on
long-running processes such as web servers.
Example of an LRU cache for static web content:
Example of efficiently computing
Fibonacci numbers
using a cache to implement a
dynamic programming
technique:
New in version 3.2.
Changed in version 3.3: Added the typed option.
Given a class defining one or more rich comparison ordering methods, this
class decorator supplies the rest.  This simplifies the effort involved
in specifying all of the possible rich comparison operations:
The class must define one of __lt__(), __le__(),
__gt__(), or __ge__().
In addition, the class should supply an __eq__() method.
For example:
Note
While this decorator makes it easy to create well behaved totally
ordered types, it does come at the cost of slower execution and
more complex stack traces for the derived comparison methods. If
performance benchmarking indicates this is a bottleneck for a given
application, implementing all six rich comparison methods instead is
likely to provide an easy speed boost.
New in version 3.2.
Changed in version 3.4: Returning NotImplemented from the underlying comparison function for
unrecognised types is now supported.
Return a new partial object which when called will behave like func
called with the positional arguments args and keyword arguments keywords. If
more arguments are supplied to the call, they are appended to args. If
additional keyword arguments are supplied, they extend and override keywords.
Roughly equivalent to:
The partial() is used for partial function application which “freezes”
some portion of a function’s arguments and/or keywords resulting in a new object
with a simplified signature.  For example, partial() can be used to create
a callable that behaves like the int() function where the base argument
defaults to two:
Return a new partialmethod descriptor which behaves
like partial except that it is designed to be used as a method
definition rather than being directly callable.
func must be a descriptor or a callable (objects which are both,
like normal functions, are handled as descriptors).
When func is a descriptor (such as a normal Python function,
classmethod(), staticmethod(), abstractmethod() or
another instance of partialmethod), calls to __get__ are
delegated to the underlying descriptor, and an appropriate
partial object returned as the result.
When func is a non-descriptor callable, an appropriate bound method is
created dynamically. This behaves like a normal Python function when
used as a method: the self argument will be inserted as the first
positional argument, even before the args and keywords supplied to
the partialmethod constructor.
Example:
New in version 3.4.
Apply function of two arguments cumulatively to the items of sequence, from
left to right, so as to reduce the sequence to a single value.  For example,
reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates ((((1+2)+3)+4)+5).
The left argument, x, is the accumulated value and the right argument, y, is
the update value from the sequence.  If the optional initializer is present,
it is placed before the items of the sequence in the calculation, and serves as
a default when the sequence is empty.  If initializer is not given and
sequence contains only one item, the first item is returned.
Roughly equivalent to:
Transforms a function into a single-dispatch generic function.
To define a generic function, decorate it with the @singledispatch
decorator. Note that the dispatch happens on the type of the first argument,
create your function accordingly:
To add overloaded implementations to the function, use the register()
attribute of the generic function.  It is a decorator, taking a type
parameter and decorating a function implementing the operation for that
type:
To enable registering lambdas and pre-existing functions, the
register() attribute can be used in a functional form:
The register() attribute returns the undecorated function which
enables decorator stacking, pickling, as well as creating unit tests for
each variant independently:
When called, the generic function dispatches on the type of the first
argument:
Where there is no registered implementation for a specific type, its
method resolution order is used to find a more generic implementation.
The original function decorated with @singledispatch is registered
for the base object type, which means it is used if no better
implementation is found.
To check which implementation will the generic function choose for
a given type, use the dispatch() attribute:
To access all registered implementations, use the read-only registry
attribute:
New in version 3.4.
Update a wrapper function to look like the wrapped function. The optional
arguments are tuples to specify which attributes of the original function are
assigned directly to the matching attributes on the wrapper function and which
attributes of the wrapper function are updated with the corresponding attributes
from the original function. The default values for these arguments are the
module level constants WRAPPER_ASSIGNMENTS (which assigns to the wrapper
function’s __module__, __name__, __qualname__, __annotations__
and __doc__, the documentation string) and WRAPPER_UPDATES (which
updates the wrapper function’s __dict__, i.e. the instance dictionary).
To allow access to the original function for introspection and other purposes
(e.g. bypassing a caching decorator such as lru_cache()), this function
automatically adds a __wrapped__ attribute to the wrapper that refers to
the function being wrapped.
The main intended use for this function is in decorator functions which
wrap the decorated function and return the wrapper. If the wrapper function is
not updated, the metadata of the returned function will reflect the wrapper
definition rather than the original function definition, which is typically less
than helpful.
update_wrapper() may be used with callables other than functions. Any
attributes named in assigned or updated that are missing from the object
being wrapped are ignored (i.e. this function will not attempt to set them
on the wrapper function). AttributeError is still raised if the
wrapper function itself is missing any attributes named in updated.
New in version 3.2: Automatic addition of the __wrapped__ attribute.
New in version 3.2: Copying of the __annotations__ attribute by default.
Changed in version 3.2: Missing attributes no longer trigger an AttributeError.
Changed in version 3.4: The __wrapped__ attribute now always refers to the wrapped
function, even if that function defined a __wrapped__ attribute.
(see issue 17482)
This is a convenience function for invoking update_wrapper() as a
function decorator when defining a wrapper function.  It is equivalent to
partial(update_wrapper, wrapped=wrapped, assigned=assigned, updated=updated).
For example:
Without the use of this decorator factory, the name of the example function
would have been 'wrapper', and the docstring of the original example()
would have been lost.
partial objects are callable objects created by partial(). They
have three read-only attributes:
A callable object or function.  Calls to the partial object will be
forwarded to func with new arguments and keywords.
The leftmost positional arguments that will be prepended to the positional
arguments provided to a partial object call.
The keyword arguments that will be supplied when the partial object is
called.
partial objects are like function objects in that they are
callable, weak referencable, and can have attributes.  There are some important
differences.  For instance, the __name__ and __doc__ attributes
are not created automatically.  Also, partial objects defined in
classes behave like static methods and do not transform into bound methods
during instance attribute look-up.
10.1. itertools — Functions creating iterators for efficient looping
10.3. operator — Standard operators as functions

    Enter search terms or a module, class or function name.
    

