URL: https://docs.python.org/3/library/zipfile.html

Title: 13.5. zipfile — Work with ZIP archives — Python 3.5.2 documentation

Doc Id: 102

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :Source code: Lib/zipfile.py
The ZIP file format is a common archive and compression standard. This module
provides tools to create, read, write, append, and list a ZIP file.  Any
advanced use of this module will require an understanding of the format, as
defined in PKZIP Application Note.
This module does not currently handle multi-disk ZIP files.
It can handle ZIP files that use the ZIP64 extensions
(that is ZIP files that are more than 4 GiB in size).  It supports
decryption of encrypted files in ZIP archives, but it currently cannot
create an encrypted file.  Decryption is extremely slow as it is
implemented in native Python rather than C.
The module defines the following items:
The error raised for bad ZIP files.
New in version 3.2.
Alias of BadZipFile, for compatibility with older Python versions.
Deprecated since version 3.2.
The error raised when a ZIP file would require ZIP64 functionality but that has
not been enabled.
The class for reading and writing ZIP files.  See section
ZipFile Objects for constructor details.
Class for creating ZIP archives containing Python libraries.
Class used to represent information about a member of an archive. Instances
of this class are returned by the getinfo() and infolist()
methods of ZipFile objects.  Most users of the zipfile module
will not need to create these, but only use those created by this
module. filename should be the full name of the archive member, and
date_time should be a tuple containing six fields which describe the time
of the last modification to the file; the fields are described in section
ZipInfo Objects.
Returns True if filename is a valid ZIP file based on its magic number,
otherwise returns False.  filename may be a file or file-like object too.
Changed in version 3.1: Support for file and file-like objects.
The numeric constant for an uncompressed archive member.
The numeric constant for the usual ZIP compression method.  This requires the
zlib module.
The numeric constant for the BZIP2 compression method.  This requires the
bz2 module.
New in version 3.3.
The numeric constant for the LZMA compression method.  This requires the
lzma module.
New in version 3.3.
Note
The ZIP file format specification has included support for bzip2 compression
since 2001, and for LZMA compression since 2006. However, some tools
(including older Python releases) do not support these compression
methods, and may either refuse to process the ZIP file altogether,
or fail to extract individual files.
See also
Open a ZIP file, where file can be either a path to a file (a string) or a
file-like object.  The mode parameter should be 'r' to read an existing
file, 'w' to truncate and write a new file, 'a' to append to an
existing file, or 'x' to exclusively create and write a new file.
If mode is 'x' and file refers to an existing file,
a FileExistsError will be raised.
If mode is 'a' and file refers to an existing ZIP
file, then additional files are added to it.  If file does not refer to a
ZIP file, then a new ZIP archive is appended to the file.  This is meant for
adding a ZIP archive to another file (such as python.exe).  If
mode is a and the file does not exist at all, it is created.
If mode is r or a, the file should be seekable.
compression is the ZIP compression method to use when writing the archive,
and should be ZIP_STORED, ZIP_DEFLATED,
ZIP_BZIP2 or ZIP_LZMA; unrecognized
values will cause RuntimeError to be raised.  If ZIP_DEFLATED,
ZIP_BZIP2 or ZIP_LZMA is specified but the corresponding module
(zlib, bz2 or lzma) is not available, RuntimeError
is also raised. The default is ZIP_STORED.  If allowZip64 is
True (the default) zipfile will create ZIP files that use the ZIP64
extensions when the zipfile is larger than 2 GiB. If it is  false zipfile
will raise an exception when the ZIP file would require ZIP64 extensions.
If the file is created with mode 'w', 'x' or 'a' and then
closed without adding any files to the archive, the appropriate
ZIP structures for an empty archive will be written to the file.
ZipFile is also a context manager and therefore supports the
with statement.  In the example, myzip is closed after the
with statement’s suite is finished—even if an exception occurs:
New in version 3.2: Added the ability to use ZipFile as a context manager.
Changed in version 3.3: Added support for bzip2 and lzma compression.
Changed in version 3.4: ZIP64 extensions are enabled by default.
Changed in version 3.5: Added support for writing to unseekable streams.
Added support for the 'x' mode.
Close the archive file.  You must call close() before exiting your program
or essential records will not be written.
Return a ZipInfo object with information about the archive member
name.  Calling getinfo() for a name not currently contained in the
archive will raise a KeyError.
Return a list containing a ZipInfo object for each member of the
archive.  The objects are in the same order as their entries in the actual ZIP
file on disk if an existing archive was opened.
Return a list of archive members by name.
Extract a member from the archive as a file-like object (ZipExtFile). name
is the name of the file in the archive, or a ZipInfo object. The
mode parameter, if included, must be one of the following: 'r' (the
default), 'U', or 'rU'. Choosing 'U' or  'rU' will enable
universal newlines support in the read-only object.  pwd is the
password used for encrypted files.  Calling  open() on a closed
ZipFile will raise a  RuntimeError.
open() is also a context manager and therefore supports the
with statement:
Note
The file-like object is read-only and provides the following methods:
read(), readline(),
readlines(), __iter__(),
__next__().
Note
Objects returned by open() can operate independently of the
ZipFile.
Note
The open(), read() and extract() methods can take a filename
or a ZipInfo object.  You will appreciate this when trying to read a
ZIP file that contains members with duplicate names.
Deprecated since version 3.4, will be removed in version 3.6: The 'U' or  'rU' mode.  Use io.TextIOWrapper for reading
compressed text files in universal newlines mode.
Extract a member from the archive to the current working directory; member
must be its full name or a ZipInfo object.  Its file information is
extracted as accurately as possible.  path specifies a different directory
to extract to.  member can be a filename or a ZipInfo object.
pwd is the password used for encrypted files.
Returns the normalized path created (a directory or new file).
Note
If a member filename is an absolute path, a drive/UNC sharepoint and
leading (back)slashes will be stripped, e.g.: ///foo/bar becomes
foo/bar on Unix, and C:\foo\bar becomes foo\bar on Windows.
And all ".." components in a member filename will be removed, e.g.:
../../foo../../ba..r becomes foo../ba..r.  On Windows illegal
characters (:, <, >, |, ", ?, and *)
replaced by underscore (_).
Extract all members from the archive to the current working directory.  path
specifies a different directory to extract to.  members is optional and must
be a subset of the list returned by namelist().  pwd is the password
used for encrypted files.
Warning
Never extract archives from untrusted sources without prior inspection.
It is possible that files are created outside of path, e.g. members
that have absolute filenames starting with "/" or filenames with two
dots "..".  This module attempts to prevent that.
See extract() note.
Print a table of contents for the archive to sys.stdout.
Set pwd as default password to extract encrypted files.
Return the bytes of the file name in the archive.  name is the name of the
file in the archive, or a ZipInfo object.  The archive must be open for
read or append. pwd is the password used for encrypted  files and, if specified,
it will override the default password set with setpassword().  Calling
read() on a closed ZipFile  will raise a RuntimeError. Calling
read() on a ZipFile that uses a compression method other than
ZIP_STORED, ZIP_DEFLATED, ZIP_BZIP2 or
ZIP_LZMA will raise a NotImplementedError. An error will also
be raised if the corresponding compression module is not available.
Read all the files in the archive and check their CRC’s and file headers.
Return the name of the first bad file, or else return None. Calling
testzip() on a closed ZipFile will raise a RuntimeError.
Write the file named filename to the archive, giving it the archive name
arcname (by default, this will be the same as filename, but without a drive
letter and with leading path separators removed).  If given, compress_type
overrides the value given for the compression parameter to the constructor for
the new entry.
The archive must be open with mode 'w', 'x' or 'a' – calling
write() on a ZipFile created with mode 'r' will raise a
RuntimeError.  Calling  write() on a closed ZipFile will raise a
RuntimeError.
Note
There is no official file name encoding for ZIP files. If you have unicode file
names, you must convert them to byte strings in your desired encoding before
passing them to write(). WinZip interprets all file names as encoded in
CP437, also known as DOS Latin.
Note
Archive names should be relative to the archive root, that is, they should not
start with a path separator.
Note
If arcname (or filename, if arcname is  not given) contains a null
byte, the name of the file in the archive will be truncated at the null byte.
Write the string data to the archive; zinfo_or_arcname is either the file
name it will be given in the archive, or a ZipInfo instance.  If it’s
an instance, at least the filename, date, and time must be given.  If it’s a
name, the date and time is set to the current date and time.
The archive must be opened with mode 'w', 'x' or 'a' – calling
writestr() on a ZipFile created with mode 'r' will raise a
RuntimeError.  Calling writestr() on a closed ZipFile will
raise a RuntimeError.
If given, compress_type overrides the value given for the compression
parameter to the constructor for the new entry, or in the zinfo_or_arcname
(if that is a ZipInfo instance).
Note
When passing a ZipInfo instance as the zinfo_or_arcname parameter,
the compression method used will be that specified in the compress_type
member of the given ZipInfo instance.  By default, the
ZipInfo constructor sets this member to ZIP_STORED.
Changed in version 3.2: The compress_type argument.
The following data attributes are also available:
The level of debug output to use.  This may be set from 0 (the default, no
output) to 3 (the most output).  Debugging information is written to
sys.stdout.
The comment text associated with the ZIP file.  If assigning a comment to a
ZipFile instance created with mode 'w', 'x' or 'a',
this should be a
string no longer than 65535 bytes.  Comments longer than this will be
truncated in the written archive when close() is called.
The PyZipFile constructor takes the same parameters as the
ZipFile constructor, and one additional parameter, optimize.
New in version 3.2: The optimize parameter.
Changed in version 3.4: ZIP64 extensions are enabled by default.
Instances have one method in addition to those of ZipFile objects:
Search for files *.py and add the corresponding file to the
archive.
If the optimize parameter to PyZipFile was not given or -1,
the corresponding file is a *.pyc file, compiling if necessary.
If the optimize parameter to PyZipFile was 0, 1 or
2, only files with that optimization level (see compile()) are
added to the archive, compiling if necessary.
If pathname is a file, the filename must end with .py, and
just the (corresponding *.py[co]) file is added at the top level
(no path information).  If pathname is a file that does not end with
.py, a RuntimeError will be raised.  If it is a directory,
and the directory is not a package directory, then all the files
*.py[co] are added at the top level.  If the directory is a
package directory, then all *.py[co] are added under the package
name as a file path, and if any subdirectories are package directories,
all of these are added recursively.
basename is intended for internal use only.
filterfunc, if given, must be a function taking a single string
argument.  It will be passed each path (including each individual full
file path) before it is added to the archive.  If filterfunc returns a
false value, the path will not be added, and if it is a directory its
contents will be ignored.  For example, if our test files are all either
in test directories or start with the string test_, we can use a
filterfunc to exclude them:
The writepy() method makes archives with file names like
this:
New in version 3.4: The filterfunc parameter.
Instances of the ZipInfo class are returned by the getinfo() and
infolist() methods of ZipFile objects.  Each object stores
information about a single member of the ZIP archive.
Instances have the following attributes:
Name of the file in the archive.
The time and date of the last modification to the archive member.  This is a
tuple of six values:
Note
The ZIP file format does not support timestamps before 1980.
Type of compression for the archive member.
Comment for the individual archive member.
Expansion field data.  The PKZIP Application Note contains
some comments on the internal structure of the data contained in this string.
System which created ZIP archive.
PKZIP version which created ZIP archive.
PKZIP version needed to extract archive.
Must be zero.
ZIP flag bits.
Volume number of file header.
Internal attributes.
External file attributes.
Byte offset to the file header.
CRC-32 of the uncompressed file.
Size of the compressed data.
Size of the uncompressed file.
13.4. lzma — Compression using the LZMA algorithm
13.6. tarfile — Read and write tar archive files

    Enter search terms or a module, class or function name.
    

