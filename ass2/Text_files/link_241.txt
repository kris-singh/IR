URL: https://docs.python.org/3/library/modulefinder.html

Title: 31.3. modulefinder — Find modules used by a script — Python 3.5.2 documentation

Doc Id: 241

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :Source code: Lib/modulefinder.py
This module provides a ModuleFinder class that can be used to determine
the set of modules imported by a script. modulefinder.py can also be run as
a script, giving the filename of a Python script as its argument, after which a
report of the imported modules will be printed.
Record that the package named pkg_name can be found in the specified path.
Allows specifying that the module named oldname is in fact the package named
newname.
This class provides run_script() and report() methods to determine
the set of modules imported by a script. path can be a list of directories to
search for modules; if not specified, sys.path is used.  debug sets the
debugging level; higher values make the class print debugging messages about
what it’s doing. excludes is a list of module names to exclude from the
analysis. replace_paths is a list of (oldpath, newpath) tuples that will
be replaced in module paths.
Print a report to standard output that lists the modules imported by the
script and their paths, as well as modules that are missing or seem to be
missing.
Analyze the contents of the pathname file, which must contain Python
code.
A dictionary mapping module names to modules. See
Example usage of ModuleFinder.
The script that is going to get analyzed later on (bacon.py):
The script that will output the report of bacon.py:
Sample output (may vary depending on the architecture):
31.2. pkgutil — Package extension utility
31.4. runpy — Locating and executing Python modules

    Enter search terms or a module, class or function name.
    

