URL: https://docs.python.org/3/c-api/dict.html

Title: Dictionary Objects — Python 3.5.2 documentation

Doc Id: 517

Meta Tags : No meta tag found in document

Date :Jul 05, 2016

Content :This subtype of PyObject represents a Python dictionary object.
This instance of PyTypeObject represents the Python dictionary
type.  This is the same object as dict in the Python layer.
Return true if p is a dict object or an instance of a subtype of the dict
type.
Return true if p is a dict object, but not an instance of a subtype of
the dict type.
Return a new empty dictionary, or NULL on failure.
Return a types.MappingProxyType object for a mapping which
enforces read-only behavior.  This is normally used to create a view to
prevent modification of the dictionary for non-dynamic class types.
Empty an existing dictionary of all key-value pairs.
Determine if dictionary p contains key.  If an item in p is matches
key, return 1, otherwise return 0.  On error, return -1.
This is equivalent to the Python expression key in p.
Return a new dictionary that contains the same key-value pairs as p.
Insert value into the dictionary p with a key of key.  key must be
hashable; if it isn’t, TypeError will be raised. Return
0 on success or -1 on failure.
Insert value into the dictionary p using key as a key. key should
be a char*.  The key object is created using
PyUnicode_FromString(key).  Return 0 on success or -1 on
failure.
Remove the entry in dictionary p with key key. key must be hashable;
if it isn’t, TypeError is raised.  Return 0 on success or -1
on failure.
Remove the entry in dictionary p which has a key specified by the string
key.  Return 0 on success or -1 on failure.
Return the object from dictionary p which has a key key.  Return NULL
if the key key is not present, but without setting an exception.
Variant of PyDict_GetItem() that does not suppress
exceptions. Return NULL with an exception set if an exception
occurred.  Return NULL without an exception set if the key
wasn’t present.
This is the same as PyDict_GetItem(), but key is specified as a
char*, rather than a PyObject*.
This is the same as the Python-level dict.setdefault().  If present, it
returns the value corresponding to key from the dictionary p.  If the key
is not in the dict, it is inserted with value defaultobj and defaultobj
is returned.  This function evaluates the hash function of key only once,
instead of evaluating it independently for the lookup and the insertion.
New in version 3.4.
Return a PyListObject containing all the items from the dictionary.
Return a PyListObject containing all the keys from the dictionary.
Return a PyListObject containing all the values from the dictionary
p.
Return the number of items in the dictionary.  This is equivalent to
len(p) on a dictionary.
Iterate over all key-value pairs in the dictionary p.  The
Py_ssize_t referred to by ppos must be initialized to 0
prior to the first call to this function to start the iteration; the
function returns true for each pair in the dictionary, and false once all
pairs have been reported.  The parameters pkey and pvalue should either
point to PyObject* variables that will be filled in with each key
and value, respectively, or may be NULL.  Any references returned through
them are borrowed.  ppos should not be altered during iteration. Its
value represents offsets within the internal dictionary structure, and
since the structure is sparse, the offsets are not consecutive.
For example:
The dictionary p should not be mutated during iteration.  It is safe to
modify the values of the keys as you iterate over the dictionary, but only
so long as the set of keys does not change.  For example:
Iterate over mapping object b adding key-value pairs to dictionary a.
b may be a dictionary, or any object supporting PyMapping_Keys()
and PyObject_GetItem(). If override is true, existing pairs in a
will be replaced if a matching key is found in b, otherwise pairs will
only be added if there is not a matching key in a. Return 0 on
success or -1 if an exception was raised.
This is the same as PyDict_Merge(a, b, 1) in C, and is similar to
a.update(b) in Python except that PyDict_Update() doesn’t fall
back to the iterating over a sequence of key value pairs if the second
argument has no “keys” attribute.  Return 0 on success or -1 if an
exception was raised.
Update or merge into dictionary a, from the key-value pairs in seq2.
seq2 must be an iterable object producing iterable objects of length 2,
viewed as key-value pairs.  In case of duplicate keys, the last wins if
override is true, else the first wins. Return 0 on success or -1
if an exception was raised. Equivalent Python (except for the return
value):
Clear the free list. Return the total number of freed items.
New in version 3.3.
List Objects
Set Objects

    Enter search terms or a module, class or function name.
    

