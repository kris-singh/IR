URL: https://docs.python.org/3/library/collections.html

Title: 8.3. collections — Container datatypes — Python 3.5.2 documentation

Doc Id: 61

Meta Tags : No meta tag found in document

Date :Aug 16, 2016

Content :Source code: Lib/collections/__init__.py
This module implements specialized container datatypes providing alternatives to
Python’s general purpose built-in containers, dict, list,
set, and tuple.
Changed in version 3.3: Moved Collections Abstract Base Classes to the collections.abc module.
For backwards compatibility, they continue to be visible in this module
as well.
New in version 3.3.
A ChainMap class is provided for quickly linking a number of mappings
so they can be treated as a single unit.  It is often much faster than creating
a new dictionary and running multiple update() calls.
The class can be used to simulate nested scopes and is useful in templating.
A ChainMap groups multiple dicts or other mappings together to
create a single, updateable view.  If no maps are specified, a single empty
dictionary is provided so that a new chain always has at least one mapping.
The underlying mappings are stored in a list.  That list is public and can
be accessed or updated using the maps attribute.  There is no other state.
Lookups search the underlying mappings successively until a key is found.  In
contrast, writes, updates, and deletions only operate on the first mapping.
A ChainMap incorporates the underlying mappings by reference.  So, if
one of the underlying mappings gets updated, those changes will be reflected
in ChainMap.
All of the usual dictionary methods are supported.  In addition, there is a
maps attribute, a method for creating new subcontexts, and a property for
accessing all but the first mapping:
A user updateable list of mappings.  The list is ordered from
first-searched to last-searched.  It is the only stored state and can
be modified to change which mappings are searched.  The list should
always contain at least one mapping.
Returns a new ChainMap containing a new map followed by
all of the maps in the current instance.  If m is specified,
it becomes the new map at the front of the list of mappings; if not
specified, an empty dict is used, so that a call to d.new_child()
is equivalent to: ChainMap({}, *d.maps).  This method is used for
creating subcontexts that can be updated without altering values in any
of the parent mappings.
Changed in version 3.4: The optional m parameter was added.
Property returning a new ChainMap containing all of the maps in
the current instance except the first one.  This is useful for skipping
the first map in the search.  Use cases are similar to those for the
nonlocal keyword used in nested scopes.  The use cases also parallel those for the built-in
super() function.  A reference to d.parents is equivalent to:
ChainMap(*d.maps[1:]).
See also
This section shows various approaches to working with chained maps.
Example of simulating Python’s internal lookup chain:
Example of letting user specified command-line arguments take precedence over
environment variables which in turn take precedence over default values:
Example patterns for using the ChainMap class to simulate nested
contexts:
The ChainMap class only makes updates (writes and deletions) to the
first mapping in the chain while lookups will search the full chain.  However,
if deep writes and deletions are desired, it is easy to make a subclass that
updates keys found deeper in the chain:
A counter tool is provided to support convenient and rapid tallies.
For example:
A Counter is a dict subclass for counting hashable objects.
It is an unordered collection where elements are stored as dictionary keys
and their counts are stored as dictionary values.  Counts are allowed to be
any integer value including zero or negative counts.  The Counter
class is similar to bags or multisets in other languages.
Elements are counted from an iterable or initialized from another
mapping (or counter):
Counter objects have a dictionary interface except that they return a zero
count for missing items instead of raising a KeyError:
Setting a count to zero does not remove an element from a counter.
Use del to remove it entirely:
New in version 3.1.
Counter objects support three methods beyond those available for all
dictionaries:
Return an iterator over elements repeating each as many times as its
count.  Elements are returned in arbitrary order.  If an element’s count
is less than one, elements() will ignore it.
Return a list of the n most common elements and their counts from the
most common to the least.  If n is omitted or None,
most_common() returns all elements in the counter.
Elements with equal counts are ordered arbitrarily:
Elements are subtracted from an iterable or from another mapping
(or counter).  Like dict.update() but subtracts counts instead
of replacing them.  Both inputs and outputs may be zero or negative.
New in version 3.2.
The usual dictionary methods are available for Counter objects
except for two which work differently for counters.
This class method is not implemented for Counter objects.
Elements are counted from an iterable or added-in from another
mapping (or counter).  Like dict.update() but adds counts
instead of replacing them.  Also, the iterable is expected to be a
sequence of elements, not a sequence of (key, value) pairs.
Common patterns for working with Counter objects:
Several mathematical operations are provided for combining Counter
objects to produce multisets (counters that have counts greater than zero).
Addition and subtraction combine counters by adding or subtracting the counts
of corresponding elements.  Intersection and union return the minimum and
maximum of corresponding counts.  Each operation can accept inputs with signed
counts, but the output will exclude results with counts of zero or less.
Unary addition and subtraction are shortcuts for adding an empty counter
or subtracting from an empty counter.
New in version 3.3: Added support for unary plus, unary minus, and in-place multiset operations.
Note
Counters were primarily designed to work with positive integers to represent
running counts; however, care was taken to not unnecessarily preclude use
cases needing other types or negative values.  To help with those use cases,
this section documents the minimum range and type restrictions.
See also
Bag class
in Smalltalk.
Wikipedia entry for Multisets.
C++ multisets
tutorial with examples.
For mathematical operations on multisets and their use cases, see
Knuth, Donald. The Art of Computer Programming Volume II,
Section 4.6.3, Exercise 19.
To enumerate all distinct multisets of a given size over a given set of
elements, see itertools.combinations_with_replacement():
map(Counter, combinations_with_replacement(‘ABC’, 2)) –> AA AB AC BB BC CC
Returns a new deque object initialized left-to-right (using append()) with
data from iterable.  If iterable is not specified, the new deque is empty.
Deques are a generalization of stacks and queues (the name is pronounced “deck”
and is short for “double-ended queue”).  Deques support thread-safe, memory
efficient appends and pops from either side of the deque with approximately the
same O(1) performance in either direction.
Though list objects support similar operations, they are optimized for
fast fixed-length operations and incur O(n) memory movement costs for
pop(0) and insert(0, v) operations which change both the size and
position of the underlying data representation.
If maxlen is not specified or is None, deques may grow to an
arbitrary length.  Otherwise, the deque is bounded to the specified maximum
length.  Once a bounded length deque is full, when new items are added, a
corresponding number of items are discarded from the opposite end.  Bounded
length deques provide functionality similar to the tail filter in
Unix. They are also useful for tracking transactions and other pools of data
where only the most recent activity is of interest.
Deque objects support the following methods:
Add x to the right side of the deque.
Add x to the left side of the deque.
Remove all elements from the deque leaving it with length 0.
Create a shallow copy of the deque.
New in version 3.5.
Count the number of deque elements equal to x.
New in version 3.2.
Extend the right side of the deque by appending elements from the iterable
argument.
Extend the left side of the deque by appending elements from iterable.
Note, the series of left appends results in reversing the order of
elements in the iterable argument.
Return the position of x in the deque (at or after index start
and before index stop).  Returns the first match or raises
ValueError if not found.
New in version 3.5.
Insert x into the deque at position i.
If the insertion would cause a bounded deque to grow beyond maxlen,
an IndexError is raised.
New in version 3.5.
Remove and return an element from the right side of the deque. If no
elements are present, raises an IndexError.
Remove and return an element from the left side of the deque. If no
elements are present, raises an IndexError.
Remove the first occurrence of value.  If not found, raises a
ValueError.
Reverse the elements of the deque in-place and then return None.
New in version 3.2.
Rotate the deque n steps to the right.  If n is negative, rotate to
the left.  Rotating one step to the right is equivalent to:
d.appendleft(d.pop()).
Deque objects also provide one read-only attribute:
Maximum size of a deque or None if unbounded.
New in version 3.1.
In addition to the above, deques support iteration, pickling, len(d),
reversed(d), copy.copy(d), copy.deepcopy(d), membership testing with
the in operator, and subscript references such as d[-1].  Indexed
access is O(1) at both ends but slows to O(n) in the middle.  For fast random
access, use lists instead.
Starting in version 3.5, deques support __add__(), __mul__(),
and __imul__().
Example:
This section shows various approaches to working with deques.
Bounded length deques provide functionality similar to the tail filter
in Unix:
Another approach to using deques is to maintain a sequence of recently
added elements by appending to the right and popping to the left:
The rotate() method provides a way to implement deque slicing and
deletion.  For example, a pure Python implementation of del d[n] relies on
the rotate() method to position elements to be popped:
To implement deque slicing, use a similar approach applying
rotate() to bring a target element to the left side of the deque. Remove
old entries with popleft(), add new entries with extend(), and then
reverse the rotation.
With minor variations on that approach, it is easy to implement Forth style
stack manipulations such as dup, drop, swap, over, pick,
rot, and roll.
Returns a new dictionary-like object.  defaultdict is a subclass of the
built-in dict class.  It overrides one method and adds one writable
instance variable.  The remaining functionality is the same as for the
dict class and is not documented here.
The first argument provides the initial value for the default_factory
attribute; it defaults to None. All remaining arguments are treated the same
as if they were passed to the dict constructor, including keyword
arguments.
defaultdict objects support the following method in addition to the
standard dict operations:
If the default_factory attribute is None, this raises a
KeyError exception with the key as argument.
If default_factory is not None, it is called without arguments
to provide a default value for the given key, this value is inserted in
the dictionary for the key, and returned.
If calling default_factory raises an exception this exception is
propagated unchanged.
This method is called by the __getitem__() method of the
dict class when the requested key is not found; whatever it
returns or raises is then returned or raised by __getitem__().
Note that __missing__() is not called for any operations besides
__getitem__(). This means that get() will, like normal
dictionaries, return None as a default rather than using
default_factory.
defaultdict objects support the following instance variable:
This attribute is used by the __missing__() method; it is
initialized from the first argument to the constructor, if present, or to
None, if absent.
Using list as the default_factory, it is easy to group a
sequence of key-value pairs into a dictionary of lists:
When each key is encountered for the first time, it is not already in the
mapping; so an entry is automatically created using the default_factory
function which returns an empty list.  The list.append()
operation then attaches the value to the new list.  When keys are encountered
again, the look-up proceeds normally (returning the list for that key) and the
list.append() operation adds another value to the list. This technique is
simpler and faster than an equivalent technique using dict.setdefault():
Setting the default_factory to int makes the
defaultdict useful for counting (like a bag or multiset in other
languages):
When a letter is first encountered, it is missing from the mapping, so the
default_factory function calls int() to supply a default count of
zero.  The increment operation then builds up the count for each letter.
The function int() which always returns zero is just a special case of
constant functions.  A faster and more flexible way to create constant functions
is to use a lambda function which can supply any constant value (not just
zero):
Setting the default_factory to set makes the
defaultdict useful for building a dictionary of sets:
Named tuples assign meaning to each position in a tuple and allow for more readable,
self-documenting code.  They can be used wherever regular tuples are used, and
they add the ability to access fields by name instead of position index.
Returns a new tuple subclass named typename.  The new subclass is used to
create tuple-like objects that have fields accessible by attribute lookup as
well as being indexable and iterable.  Instances of the subclass also have a
helpful docstring (with typename and field_names) and a helpful __repr__()
method which lists the tuple contents in a name=value format.
The field_names are a single string with each fieldname separated by whitespace
and/or commas, for example 'x y' or 'x, y'.  Alternatively, field_names
can be a sequence of strings such as ['x', 'y'].
Any valid Python identifier may be used for a fieldname except for names
starting with an underscore.  Valid identifiers consist of letters, digits,
and underscores but do not start with a digit or underscore and cannot be
a keyword such as class, for, return, global, pass,
or raise.
If rename is true, invalid fieldnames are automatically replaced
with positional names.  For example, ['abc', 'def', 'ghi', 'abc'] is
converted to ['abc', '_1', 'ghi', '_3'], eliminating the keyword
def and the duplicate fieldname abc.
If verbose is true, the class definition is printed after it is
built.  This option is outdated; instead, it is simpler to print the
_source attribute.
Named tuple instances do not have per-instance dictionaries, so they are
lightweight and require no more memory than regular tuples.
Changed in version 3.1: Added support for rename.
Named tuples are especially useful for assigning field names to result tuples returned
by the csv or sqlite3 modules:
In addition to the methods inherited from tuples, named tuples support
three additional methods and two attributes.  To prevent conflicts with
field names, the method and attribute names start with an underscore.
Class method that makes a new instance from an existing sequence or iterable.
Return a new OrderedDict which maps field names to their corresponding
values:
Changed in version 3.1: Returns an OrderedDict instead of a regular dict.
Return a new instance of the named tuple replacing specified fields with new
values:
A string with the pure Python source code used to create the named
tuple class.  The source makes the named tuple self-documenting.
It can be printed, executed using exec(), or saved to a file
and imported.
New in version 3.3.
Tuple of strings listing the field names.  Useful for introspection
and for creating new named tuple types from existing named tuples.
To retrieve a field whose name is stored in a string, use the getattr()
function:
To convert a dictionary to a named tuple, use the double-star-operator
(as described in Unpacking Argument Lists):
Since a named tuple is a regular Python class, it is easy to add or change
functionality with a subclass.  Here is how to add a calculated field and
a fixed-width print format:
The subclass shown above sets __slots__ to an empty tuple.  This helps
keep memory requirements low by preventing the creation of instance dictionaries.
Subclassing is not useful for adding new, stored fields.  Instead, simply
create a new named tuple type from the _fields attribute:
Docstrings can be customized by making direct assignments to the __doc__
fields:
Changed in version 3.5: Property docstrings became writeable.
Default values can be implemented by using _replace() to
customize a prototype instance:
See also
Ordered dictionaries are just like regular dictionaries but they remember the
order that items were inserted.  When iterating over an ordered dictionary,
the items are returned in the order their keys were first added.
Return an instance of a dict subclass, supporting the usual dict
methods.  An OrderedDict is a dict that remembers the order that keys
were first inserted. If a new entry overwrites an existing entry, the
original insertion position is left unchanged.  Deleting an entry and
reinserting it will move it to the end.
New in version 3.1.
The popitem() method for ordered dictionaries returns and removes a
(key, value) pair.  The pairs are returned in LIFO order if last is true
or FIFO order if false.
Move an existing key to either end of an ordered dictionary.  The item
is moved to the right end if last is true (the default) or to the
beginning if last is false.  Raises KeyError if the key does
not exist:
New in version 3.2.
In addition to the usual mapping methods, ordered dictionaries also support
reverse iteration using reversed().
Equality tests between OrderedDict objects are order-sensitive
and are implemented as list(od1.items())==list(od2.items()).
Equality tests between OrderedDict objects and other
Mapping objects are order-insensitive like regular
dictionaries.  This allows OrderedDict objects to be substituted
anywhere a regular dictionary is used.
The OrderedDict constructor and update() method both accept
keyword arguments, but their order is lost because Python’s function call
semantics pass in keyword arguments using a regular unordered dictionary.
Changed in version 3.5: The items, keys, and values views
of OrderedDict now support reverse iteration using reversed().
Since an ordered dictionary remembers its insertion order, it can be used
in conjunction with sorting to make a sorted dictionary:
The new sorted dictionaries maintain their sort order when entries
are deleted.  But when new keys are added, the keys are appended
to the end and the sort is not maintained.
It is also straight-forward to create an ordered dictionary variant
that remembers the order the keys were last inserted.
If a new entry overwrites an existing entry, the
original insertion position is changed and moved to the end:
An ordered dictionary can be combined with the Counter class
so that the counter remembers the order elements are first encountered:
The class, UserDict acts as a wrapper around dictionary objects.
The need for this class has been partially supplanted by the ability to
subclass directly from dict; however, this class can be easier
to work with because the underlying dictionary is accessible as an
attribute.
Class that simulates a dictionary.  The instance’s contents are kept in a
regular dictionary, which is accessible via the data attribute of
UserDict instances.  If initialdata is provided, data is
initialized with its contents; note that a reference to initialdata will not
be kept, allowing it be used for other purposes.
In addition to supporting the methods and operations of mappings,
UserDict instances provide the following attribute:
A real dictionary used to store the contents of the UserDict
class.
This class acts as a wrapper around list objects.  It is a useful base class
for your own list-like classes which can inherit from them and override
existing methods or add new ones.  In this way, one can add new behaviors to
lists.
The need for this class has been partially supplanted by the ability to
subclass directly from list; however, this class can be easier
to work with because the underlying list is accessible as an attribute.
Class that simulates a list.  The instance’s contents are kept in a regular
list, which is accessible via the data attribute of UserList
instances.  The instance’s contents are initially set to a copy of list,
defaulting to the empty list [].  list can be any iterable, for
example a real Python list or a UserList object.
In addition to supporting the methods and operations of mutable sequences,
UserList instances provide the following attribute:
A real list object used to store the contents of the
UserList class.
Subclassing requirements: Subclasses of UserList are expected to
offer a constructor which can be called with either no arguments or one
argument.  List operations which return a new sequence attempt to create an
instance of the actual implementation class.  To do so, it assumes that the
constructor can be called with a single parameter, which is a sequence object
used as a data source.
If a derived class does not wish to comply with this requirement, all of the
special methods supported by this class will need to be overridden; please
consult the sources for information about the methods which need to be provided
in that case.
The class, UserString acts as a wrapper around string objects.
The need for this class has been partially supplanted by the ability to
subclass directly from str; however, this class can be easier
to work with because the underlying string is accessible as an
attribute.
Class that simulates a string or a Unicode string object.  The instance’s
content is kept in a regular string object, which is accessible via the
data attribute of UserString instances.  The instance’s
contents are initially set to a copy of sequence.  The sequence can
be an instance of bytes, str, UserString (or a
subclass) or an arbitrary sequence which can be converted into a string using
the built-in str() function.
Changed in version 3.5: New methods __getnewargs__, __rmod__, casefold,
format_map, isprintable, and maketrans.
8.2. calendar — General calendar-related functions
8.4. collections.abc — Abstract Base Classes for Containers

    Enter search terms or a module, class or function name.
    

