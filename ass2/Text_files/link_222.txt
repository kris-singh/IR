URL: https://docs.python.org/3/library/venv.html

Title: 28.3. venv — Creation of virtual environments — Python 3.5.2 documentation

Doc Id: 222

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :New in version 3.3.
Source code: Lib/venv/
The venv module provides support for creating lightweight “virtual
environments” with their own site directories, optionally isolated from system
site directories.  Each virtual environment has its own Python binary (allowing
creation of environments with various Python versions) and can have its own
independent set of installed Python packages in its site directories.
See PEP 405 for more information about Python virtual environments.
Creation of virtual environments is done by executing the
pyvenv script:
Running this command creates the target directory (creating any parent
directories that don’t exist already) and places a pyvenv.cfg file in it
with a home key pointing to the Python installation the command was run
from.  It also creates a bin (or Scripts on Windows) subdirectory
containing a copy of the python binary (or binaries, in the case of
Windows).  It also creates an (initially empty) lib/pythonX.Y/site-packages
subdirectory (on Windows, this is Lib\site-packages).
See also
Python Packaging User Guide: Creating and using virtual environments
On Windows, you may have to invoke the pyvenv script as follows, if you
don’t have the relevant PATH and PATHEXT settings:
or equivalently:
The command, if run with -h, will show the available options:
Depending on how the venv functionality has been invoked, the usage message
may vary slightly, e.g. referencing pyvenv rather than venv.
Changed in version 3.4: Installs pip by default, added the --without-pip  and --copies
options
Changed in version 3.4: In earlier versions, if the target directory already existed, an error was
raised, unless the --clear or --upgrade option was provided. Now,
if an existing directory is specified, its contents are removed and
the directory is processed as if it had been newly created.
The created pyvenv.cfg file also includes the
include-system-site-packages key, set to true if venv is
run with the --system-site-packages option, false otherwise.
Unless the --without-pip option is given, ensurepip will be
invoked to bootstrap pip into the virtual environment.
Multiple paths can be given to pyvenv, in which case an identical
virtualenv will be created, according to the given options, at each
provided path.
Once a venv has been created, it can be “activated” using a script in the
venv’s binary directory. The invocation of the script is platform-specific:
You don’t specifically need to activate an environment; activation just
prepends the venv’s binary directory to your path, so that “python” invokes the
venv’s Python interpreter and you can run installed scripts without having to
use their full path. However, all scripts installed in a venv should be
runnable without activating it, and run with the venv’s Python automatically.
You can deactivate a venv by typing “deactivate” in your shell. The exact
mechanism is platform-specific: for example, the Bash activation script defines
a “deactivate” function, whereas on Windows there are separate scripts called
deactivate.bat and Deactivate.ps1 which are installed when the venv is
created.
New in version 3.4: fish and csh activation scripts.
Note
A virtual environment (also called a venv) is a Python
environment such that the Python interpreter, libraries and scripts
installed into it are isolated from those installed in other virtual
environments, and (by default) any libraries installed in a “system” Python,
i.e. one which is installed as part of your operating system.
A venv is a directory tree which contains Python executable files and
other files which indicate that it is a venv.
Common installation tools such as Setuptools and pip work as
expected with venvs - i.e. when a venv is active, they install Python
packages into the venv without needing to be told to do so explicitly.
When a venv is active (i.e. the venv’s Python interpreter is running), the
attributes sys.prefix and sys.exec_prefix point to the base
directory of the venv, whereas sys.base_prefix and
sys.base_exec_prefix point to the non-venv Python installation
which was used to create the venv. If a venv is not active, then
sys.prefix is the same as sys.base_prefix and
sys.exec_prefix is the same as sys.base_exec_prefix (they
all point to a non-venv Python installation).
When a venv is active, any options that change the installation path will be
ignored from all distutils configuration files to prevent projects being
inadvertently installed outside of the virtual environment.
When working in a command shell, users can make a venv active by running an
activate script in the venv’s executables directory (the precise filename
is shell-dependent), which prepends the venv’s directory for executables to
the PATH environment variable for the running shell. There should be no
need in other circumstances to activate a venv – scripts installed into
venvs have a shebang line which points to the venv’s Python interpreter. This
means that the script will run with that interpreter regardless of the value
of PATH. On Windows, shebang line processing is supported if you have the
Python Launcher for Windows installed (this was added to Python in 3.3 - see
PEP 397 for more details). Thus, double-clicking an installed script in
a Windows Explorer window should run the script with the correct interpreter
without there needing to be any reference to its venv in PATH.
The high-level method described above makes use of a simple API which provides
mechanisms for third-party virtual environment creators to customize environment
creation according to their needs, the EnvBuilder class.
The EnvBuilder class accepts the following keyword arguments on
instantiation:
Changed in version 3.4: Added the with_pip parameter
Creators of third-party virtual environment tools will be free to use the
provided EnvBuilder class as a base class.
The returned env-builder is an object which has a method, create:
This method takes as required argument the path (absolute or relative to
the current directory) of the target directory which is to contain the
virtual environment.  The create method will either create the
environment in the specified directory, or raise an appropriate
exception.
The create method of the EnvBuilder class illustrates the hooks
available for subclass customization:
Each of the methods ensure_directories(),
create_configuration(), setup_python(),
setup_scripts() and post_setup() can be overridden.
Creates the environment directory and all necessary directories, and
returns a context object.  This is just a holder for attributes (such as
paths), for use by the other methods. The directories are allowed to
exist already, as long as either clear or upgrade were
specified to allow operating on an existing environment directory.
Creates the pyvenv.cfg configuration file in the environment.
Creates a copy of the Python executable (and, under Windows, DLLs) in
the environment. On a POSIX system, if a specific executable
python3.x was used, symlinks to python and python3 will be
created pointing to that executable, unless files with those names
already exist.
Installs activation scripts appropriate to the platform into the virtual
environment.
A placeholder method which can be overridden in third party
implementations to pre-install packages in the virtual environment or
perform other post-creation steps.
In addition, EnvBuilder provides this utility method that can be
called from setup_scripts() or post_setup() in subclasses to
assist in installing custom scripts into the virtual environment.
path is the path to a directory that should contain subdirectories
“common”, “posix”, “nt”, each containing scripts destined for the bin
directory in the environment.  The contents of “common” and the
directory corresponding to os.name are copied after some text
replacement of placeholders:
The directories are allowed to exist (for when an existing environment
is being upgraded).
There is also a module-level convenience function:
Create an EnvBuilder with the given keyword arguments, and call its
create() method with the env_dir argument.
Changed in version 3.4: Added the with_pip parameter
The following script shows how to extend EnvBuilder by implementing a
subclass which installs setuptools and pip into a created venv:
This script is also available for download online.
28.2. ensurepip — Bootstrapping the pip installer
28.4. zipapp — Manage executable python zip archives

    Enter search terms or a module, class or function name.
    

