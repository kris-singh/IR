URL: https://docs.python.org/3/library/timeit.html

Title: 27.5. timeit — Measure execution time of small code snippets — Python 3.5.2 documentation

Doc Id: 217

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :Source code: Lib/timeit.py
This module provides a simple way to time small bits of Python code. It has both
a Command-Line Interface as well as a callable
one.  It avoids a number of common traps for measuring execution times.
See also Tim Peters’ introduction to the “Algorithms” chapter in the Python
Cookbook, published by O’Reilly.
The following example shows how the Command-Line Interface
can be used to compare three different expressions:
This can be achieved from the Python Interface with:
Note however that timeit will automatically determine the number of
repetitions only when the command-line interface is used.  In the
Examples section you can find more advanced examples.
The module defines three convenience functions and a public class:
Create a Timer instance with the given statement, setup code and
timer function and run its timeit() method with number executions.
The optional globals argument specifies a namespace in which to execute the
code.
Changed in version 3.5: The optional globals parameter was added.
Create a Timer instance with the given statement, setup code and
timer function and run its repeat() method with the given repeat
count and number executions.  The optional globals argument specifies a
namespace in which to execute the code.
Changed in version 3.5: The optional globals parameter was added.
The default timer, which is always time.perf_counter().
Changed in version 3.3: time.perf_counter() is now the default timer.
Class for timing execution speed of small code snippets.
The constructor takes a statement to be timed, an additional statement used
for setup, and a timer function.  Both statements default to 'pass';
the timer function is platform-dependent (see the module doc string).
stmt and setup may also contain multiple statements separated by ;
or newlines, as long as they don’t contain multi-line string literals.  The
statement will by default be executed within timeit’s namespace; this behavior
can be controlled by passing a namespace to globals.
To measure the execution time of the first statement, use the timeit()
method.  The repeat() method is a convenience to call timeit()
multiple times and return a list of results.
The execution time of setup is excluded from the overall timed execution run.
The stmt and setup parameters can also take objects that are callable
without arguments.  This will embed calls to them in a timer function that
will then be executed by timeit().  Note that the timing overhead is a
little larger in this case because of the extra function calls.
Changed in version 3.5: The optional globals parameter was added.
Time number executions of the main statement.  This executes the setup
statement once, and then returns the time it takes to execute the main
statement a number of times, measured in seconds as a float.
The argument is the number of times through the loop, defaulting to one
million.  The main statement, the setup statement and the timer function
to be used are passed to the constructor.
Note
By default, timeit() temporarily turns off garbage
collection during the timing.  The advantage of this approach is that
it makes independent timings more comparable.  This disadvantage is
that GC may be an important component of the performance of the
function being measured.  If so, GC can be re-enabled as the first
statement in the setup string.  For example:
Call timeit() a few times.
This is a convenience function that calls the timeit() repeatedly,
returning a list of results.  The first argument specifies how many times
to call timeit().  The second argument specifies the number
argument for timeit().
Note
It’s tempting to calculate mean and standard deviation from the result
vector and report these.  However, this is not very useful.
In a typical case, the lowest value gives a lower bound for how fast
your machine can run the given code snippet; higher values in the
result vector are typically not caused by variability in Python’s
speed, but by other processes interfering with your timing accuracy.
So the min() of the result is probably the only number you
should be interested in.  After that, you should look at the entire
vector and apply common sense rather than statistics.
Helper to print a traceback from the timed code.
Typical use:
The advantage over the standard traceback is that source lines in the
compiled template will be displayed.  The optional file argument directs
where the traceback is sent; it defaults to sys.stderr.
When called as a program from the command line, the following form is used:
Where the following options are understood:
how many times to execute ‘statement’
how many times to repeat the timer (default 3)
statement to be executed once initially (default pass)
measure process time, not wallclock time, using time.process_time()
instead of time.perf_counter(), which is the default
New in version 3.3.
use time.time() (deprecated)
New in version 3.5.
use time.clock() (deprecated)
print raw timing results; repeat for more digits precision
print a short usage message and exit
A multi-line statement may be given by specifying each line as a separate
statement argument; indented lines are possible by enclosing an argument in
quotes and using leading spaces.  Multiple -s options are treated
similarly.
If -n is not given, a suitable number of loops is calculated by trying
successive powers of 10 until the total time is at least 0.2 seconds.
default_timer() measurements can be affected by other programs running on
the same machine, so the best thing to do when accurate timing is necessary is
to repeat the timing a few times and use the best time.  The -r
option is good for this; the default of 3 repetitions is probably enough in
most cases.  You can use time.process_time() to measure CPU time.
Note
There is a certain baseline overhead associated with executing a pass statement.
The code here doesn’t try to hide it, but you should be aware of it.  The
baseline overhead can be measured by invoking the program without arguments,
and it might differ between Python versions.
It is possible to provide a setup statement that is executed only once at the beginning:
The same can be done using the Timer class and its methods:
The following examples show how to time expressions that contain multiple lines.
Here we compare the cost of using hasattr() vs. try/except
to test for missing and present object attributes:
To give the timeit module access to functions you define, you can pass a
setup parameter which contains an import statement:
Another option is to pass globals() to the  globals parameter, which will cause the code
to be executed within your current global namespace.  This can be more convenient
than individually specifying imports:
27.4. The Python Profilers
27.6. trace — Trace or track Python statement execution

    Enter search terms or a module, class or function name.
    

