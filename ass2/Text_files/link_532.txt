URL: https://docs.python.org/3/c-api/structures.html

Title: Common Object Structures — Python 3.5.2 documentation

Doc Id: 532

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :There are a large number of structures which are used in the definition of
object types for Python.  This section describes these structures and how they
are used.
All Python objects ultimately share a small number of fields at the beginning
of the object’s representation in memory.  These are represented by the
PyObject and PyVarObject types, which are defined, in turn,
by the expansions of some macros also used, whether directly or indirectly, in
the definition of all other Python objects.
All object types are extensions of this type.  This is a type which
contains the information Python needs to treat a pointer to an object as an
object.  In a normal “release” build, it contains only the object’s
reference count and a pointer to the corresponding type object.
Nothing is actually declared to be a PyObject, but every pointer
to a Python object can be cast to a PyObject*.  Access to the
members must be done by using the macros Py_REFCNT and
Py_TYPE.
This is an extension of PyObject that adds the ob_size
field.  This is only used for objects that have some notion of length.
This type does not often appear in the Python/C API.
Access to the members must be done by using the macros
Py_REFCNT, Py_TYPE, and Py_SIZE.
This is a macro used when declaring new types which represent objects
without a varying length.  The PyObject_HEAD macro expands to:
See documentation of PyObject above.
This is a macro used when declaring new types which represent objects
with a length that varies from instance to instance.
The PyObject_VAR_HEAD macro expands to:
See documentation of PyVarObject above.
This macro is used to access the ob_type member of a Python object.
It expands to:
This macro is used to access the ob_refcnt member of a Python
object.
It expands to:
This macro is used to access the ob_size member of a Python object.
It expands to:
This is a macro which expands to initialization values for a new
PyObject type.  This macro expands to:
This is a macro which expands to initialization values for a new
PyVarObject type, including the ob_size field.
This macro expands to:
Type of the functions used to implement most Python callables in C.
Functions of this type take two PyObject* parameters and return
one such value.  If the return value is NULL, an exception shall have
been set.  If not NULL, the return value is interpreted as the return
value of the function as exposed in Python.  The function must return a new
reference.
Type of the functions used to implement Python callables in C that take
keyword arguments: they take three PyObject* parameters and return
one such value.  See PyCFunction above for the meaning of the return
value.
Structure used to describe a method of an extension type.  This structure has
four fields:
The ml_meth is a C function pointer.  The functions may be of different
types, but they always return PyObject*.  If the function is not of
the PyCFunction, the compiler will require a cast in the method table.
Even though PyCFunction defines the first parameter as
PyObject*, it is common that the method implementation uses the
specific C type of the self object.
The ml_flags field is a bitfield which can include the following flags.
The individual flags indicate either a calling convention or a binding
convention.  Of the calling convention flags, only METH_VARARGS and
METH_KEYWORDS can be combined. Any of the calling convention flags
can be combined with a binding flag.
This is the typical calling convention, where the methods have the type
PyCFunction. The function expects two PyObject* values.
The first one is the self object for methods; for module functions, it is
the module object.  The second parameter (often called args) is a tuple
object representing all arguments. This parameter is typically processed
using PyArg_ParseTuple() or PyArg_UnpackTuple().
Methods with these flags must be of type PyCFunctionWithKeywords.
The function expects three parameters: self, args, and a dictionary of
all the keyword arguments.  The flag is typically combined with
METH_VARARGS, and the parameters are typically processed using
PyArg_ParseTupleAndKeywords().
Methods without parameters don’t need to check whether arguments are given if
they are listed with the METH_NOARGS flag.  They need to be of type
PyCFunction.  The first parameter is typically named self and will
hold a reference to the module or object instance.  In all cases the second
parameter will be NULL.
Methods with a single object argument can be listed with the METH_O
flag, instead of invoking PyArg_ParseTuple() with a "O" argument.
They have the type PyCFunction, with the self parameter, and a
PyObject* parameter representing the single argument.
These two constants are not used to indicate the calling convention but the
binding when use with methods of classes.  These may not be used for functions
defined for modules.  At most one of these flags may be set for any given
method.
The method will be passed the type object as the first parameter rather
than an instance of the type.  This is used to create class methods,
similar to what is created when using the classmethod() built-in
function.
The method will be passed NULL as the first parameter rather than an
instance of the type.  This is used to create static methods, similar to
what is created when using the staticmethod() built-in function.
One other constant controls whether a method is loaded in place of another
definition with the same method name.
The method will be loaded in place of existing definitions.  Without
METH_COEXIST, the default is to skip repeated definitions.  Since slot
wrappers are loaded before the method table, the existence of a
sq_contains slot, for example, would generate a wrapped method named
__contains__() and preclude the loading of a corresponding
PyCFunction with the same name.  With the flag defined, the PyCFunction
will be loaded in place of the wrapper object and will co-exist with the
slot.  This is helpful because calls to PyCFunctions are optimized more
than wrapper object calls.
Structure which describes an attribute of a type which corresponds to a C
struct member.  Its fields are:
type can be one of many T_ macros corresponding to various C
types.  When the member is accessed in Python, it will be converted to the
equivalent Python type.
T_OBJECT and T_OBJECT_EX differ in that
T_OBJECT returns None if the member is NULL and
T_OBJECT_EX raises an AttributeError.  Try to use
T_OBJECT_EX over T_OBJECT because T_OBJECT_EX
handles use of the del statement on that attribute more correctly
than T_OBJECT.
flags can be 0 for write and read access or READONLY for
read-only access.  Using T_STRING for type implies
READONLY.  Only T_OBJECT and T_OBJECT_EX
members can be deleted.  (They are set to NULL).
Allocating Objects on the Heap
Type Objects

    Enter search terms or a module, class or function name.
    

