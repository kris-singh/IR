URL: https://docs.python.org/3/library/nntplib.html

Title: 21.16. nntplib — NNTP protocol client — Python 3.5.2 documentation

Doc Id: 453

Meta Tags : No meta tag found in document

Date :Aug 10, 2016

Content :Source code: Lib/nntplib.py
This module defines the class NNTP which implements the client side of
the Network News Transfer Protocol.  It can be used to implement a news reader
or poster, or automated news processors.  It is compatible with RFC 3977
as well as the older RFC 977 and RFC 2980.
Here are two small examples of how it can be used.  To list some statistics
about a newsgroup and print the subjects of the last 10 articles:
To post an article from a binary file (this assumes that the article has valid
headers, and that you have right to post on the particular newsgroup):
The module itself defines the following classes:
Return a new NNTP object, representing a connection
to the NNTP server running on host host, listening at port port.
An optional timeout can be specified for the socket connection.
If the optional user and password are provided, or if suitable
credentials are present in /.netrc and the optional flag usenetrc
is true, the AUTHINFO USER and AUTHINFO PASS commands are used
to identify and authenticate the user to the server.  If the optional
flag readermode is true, then a mode reader command is sent before
authentication is performed.  Reader mode is sometimes necessary if you are
connecting to an NNTP server on the local machine and intend to call
reader-specific commands, such as group.  If you get unexpected
NNTPPermanentErrors, you might need to set readermode.
The NNTP class supports the with statement to
unconditionally consume OSError exceptions and to close the NNTP
connection when done, e.g.:
Changed in version 3.2: usenetrc is now False by default.
Changed in version 3.3: Support for the with statement was added.
Return a new NNTP_SSL object, representing an encrypted
connection to the NNTP server running on host host, listening at
port port.  NNTP_SSL objects have the same methods as
NNTP objects.  If port is omitted, port 563 (NNTPS) is used.
ssl_context is also optional, and is a SSLContext object.
Please read Security considerations for best practices.
All other parameters behave the same as for NNTP.
Note that SSL-on-563 is discouraged per RFC 4642, in favor of
STARTTLS as described below.  However, some servers only support the
former.
New in version 3.2.
Changed in version 3.4: The class now supports hostname check with
ssl.SSLContext.check_hostname and Server Name Indication (see
ssl.HAS_SNI).
Derived from the standard exception Exception, this is the base
class for all exceptions raised by the nntplib module.  Instances
of this class have the following attribute:
The response of the server if available, as a str object.
Exception raised when an unexpected reply is received from the server.
Exception raised when a response code in the range 400–499 is received.
Exception raised when a response code in the range 500–599 is received.
Exception raised when a reply is received from the server that does not begin
with a digit in the range 1–5.
Exception raised when there is some error in the response data.
When connected, NNTP and NNTP_SSL objects support the
following methods and attributes.
An integer representing the version of the NNTP protocol supported by the
server.  In practice, this should be 2 for servers advertising
RFC 3977 compliance and 1 for others.
New in version 3.2.
A string describing the software name and version of the NNTP server,
or None if not advertised by the server.
New in version 3.2.
The response that is returned as the first item in the return tuple of almost
all methods is the server’s response: a string beginning with a three-digit
code.  If the server’s response indicates an error, the method raises one of
the above exceptions.
Many of the following methods take an optional keyword-only argument file.
When the file argument is supplied, it must be either a file object
opened for binary writing, or the name of an on-disk file to be written to.
The method will then write any data returned by the server (except for the
response line and the terminating dot) to the file; any list of lines,
tuples or objects that the method normally returns will be empty.
Changed in version 3.2: Many of the following methods have been reworked and fixed, which makes
them incompatible with their 3.1 counterparts.
Send a QUIT command and close the connection.  Once this method has been
called, no other methods of the NNTP object should be called.
Return the welcome message sent by the server in reply to the initial
connection.  (This message sometimes contains disclaimers or help information
that may be relevant to the user.)
Return the RFC 3977 capabilities advertised by the server, as a
dict instance mapping capability names to (possibly empty) lists
of values. On legacy servers which don’t understand the CAPABILITIES
command, an empty dictionary is returned instead.
New in version 3.2.
Send AUTHINFO commands with the user name and password.  If user
and password are None and usenetrc is true, credentials from
~/.netrc will be used if possible.
Unless intentionally delayed, login is normally performed during the
NNTP object initialization and separately calling this function
is unnecessary.  To force authentication to be delayed, you must not set
user or password when creating the object, and must set usenetrc to
False.
New in version 3.2.
Send a STARTTLS command.  This will enable encryption on the NNTP
connection.  The ssl_context argument is optional and should be a
ssl.SSLContext object.  Please read Security considerations for best
practices.
Note that this may not be done after authentication information has
been transmitted, and authentication occurs by default if possible during a
NNTP object initialization.  See NNTP.login() for information
on suppressing this behavior.
New in version 3.2.
Changed in version 3.4: The method now supports hostname check with
ssl.SSLContext.check_hostname and Server Name Indication (see
ssl.HAS_SNI).
Send a NEWGROUPS command.  The date argument should be a
datetime.date or datetime.datetime object.
Return a pair (response, groups) where groups is a list representing
the groups that are new since the given date. If file is supplied,
though, then groups will be empty.
Send a NEWNEWS command.  Here, group is a group name or '*', and
date has the same meaning as for newgroups().  Return a pair
(response, articles) where articles is a list of message ids.
This command is frequently disabled by NNTP server administrators.
Send a LIST or LIST ACTIVE command.  Return a pair
(response, list) where list is a list of tuples representing all
the groups available from this NNTP server, optionally matching the
pattern string group_pattern.  Each tuple has the form
(group, last, first, flag), where group is a group name, last
and first are the last and first article numbers, and flag usually
takes one of these values:
If flag has another value, then the status of the newsgroup should be
considered unknown.
This command can return very large results, especially if group_pattern
is not specified.  It is best to cache the results offline unless you
really need to refresh them.
Changed in version 3.2: group_pattern was added.
Send a LIST NEWSGROUPS command, where grouppattern is a wildmat string as
specified in RFC 3977 (it’s essentially the same as DOS or UNIX shell wildcard
strings).  Return a pair (response, descriptions), where descriptions
is a dictionary mapping group names to textual descriptions.
Get a description for a single group group.  If more than one group matches
(if ‘group’ is a real wildmat string), return the first match.   If no group
matches, return an empty string.
This elides the response code from the server.  If the response code is needed,
use descriptions().
Send a GROUP command, where name is the group name.  The group is
selected as the current group, if it exists.  Return a tuple
(response, count, first, last, name) where count is the (estimated)
number of articles in the group, first is the first article number in
the group, last is the last article number in the group, and name
is the group name.
Send an OVER command, or an XOVER command on legacy servers.
message_spec can be either a string representing a message id, or
a (first, last) tuple of numbers indicating a range of articles in
the current group, or a (first, None) tuple indicating a range of
articles starting from first to the last article in the current group,
or None to select the current article in the current group.
Return a pair (response, overviews).  overviews is a list of
(article_number, overview) tuples, one for each article selected
by message_spec.  Each overview is a dictionary with the same number
of items, but this number depends on the server.  These items are either
message headers (the key is then the lower-cased header name) or metadata
items (the key is then the metadata name prepended with ":").  The
following items are guaranteed to be present by the NNTP specification:
The value of each item is either a string, or None if not present.
It is advisable to use the decode_header() function on header
values when they may contain non-ASCII characters:
New in version 3.2.
Send a HELP command.  Return a pair (response, list) where list is a
list of help strings.
Send a STAT command, where message_spec is either a message id
(enclosed in '<' and '>') or an article number in the current group.
If message_spec is omitted or None, the current article in the
current group is considered.  Return a triple (response, number, id)
where number is the article number and id is the message id.
Send a NEXT command.  Return as for stat().
Send a LAST command.  Return as for stat().
Send an ARTICLE command, where message_spec has the same meaning as
for stat().  Return a tuple (response, info) where info
is a namedtuple with three attributes number,
message_id and lines (in that order).  number is the article number
in the group (or 0 if the information is not available), message_id the
message id as a string, and lines a list of lines (without terminating
newlines) comprising the raw message including headers and body.
Same as article(), but sends a HEAD command.  The lines
returned (or written to file) will only contain the message headers, not
the body.
Same as article(), but sends a BODY command.  The lines
returned (or written to file) will only contain the message body, not the
headers.
Post an article using the POST command.  The data argument is either
a file object opened for binary reading, or any iterable of bytes
objects (representing raw lines of the article to be posted).  It should
represent a well-formed news article, including the required headers.  The
post() method automatically escapes lines beginning with . and
appends the termination line.
If the method succeeds, the server’s response is returned.  If the server
refuses posting, a NNTPReplyError is raised.
Send an IHAVE command. message_id is the id of the message to send
to the server (enclosed in  '<' and '>').  The data parameter
and the return value are the same as for post().
Return a pair (response, date).  date is a datetime
object containing the current date and time of the server.
Send a SLAVE command.  Return the server’s response.
Set the instance’s debugging level.  This controls the amount of debugging
output printed.  The default, 0, produces no debugging output.  A value of
1 produces a moderate amount of debugging output, generally a single line
per request or response.  A value of 2 or higher produces the maximum amount
of debugging output, logging each line sent and received on the connection
(including message text).
The following are optional NNTP extensions defined in RFC 2980.  Some of
them have been superseded by newer commands in RFC 3977.
Send an XHDR command.  The hdr argument is a header keyword, e.g.
'subject'.  The str argument should have the form 'first-last'
where first and last are the first and last article numbers to search.
Return a pair (response, list), where list is a list of pairs (id,
text), where id is an article number (as a string) and text is the text of
the requested header for that article. If the file parameter is supplied, then
the output of the  XHDR command is stored in a file.  If file is a string,
then the method will open a file with that name, write to it  then close it.
If file is a file object, then it will start calling write() on
it to store the lines of the command output. If file is supplied, then the
returned list is an empty list.
Send an XOVER command.  start and end are article numbers
delimiting the range of articles to select.  The return value is the
same of for over().  It is recommended to use over()
instead, since it will automatically use the newer OVER command
if available.
Return a pair (resp, path), where path is the directory path to the
article with message ID id.  Most of the time, this extension is not
enabled by NNTP server administrators.
Deprecated since version 3.3: The XPATH extension is not actively used.
The module also defines the following utility function:
Decode a header value, un-escaping any escaped non-ASCII characters.
header_str must be a str object.  The unescaped value is
returned.  Using this function is recommended to display some headers
in a human readable form:
21.15. imaplib — IMAP4 protocol client
21.17. smtplib — SMTP protocol client

    Enter search terms or a module, class or function name.
    

