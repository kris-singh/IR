URL: https://docs.python.org/3/c-api/number.html

Title: Number Protocol — Python 3.5.2 documentation

Doc Id: 505

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :Returns 1 if the object o provides numeric protocols, and false otherwise.
This function always succeeds.
Returns the result of adding o1 and o2, or NULL on failure.  This is the
equivalent of the Python expression o1 + o2.
Returns the result of subtracting o2 from o1, or NULL on failure.  This is
the equivalent of the Python expression o1 - o2.
Returns the result of multiplying o1 and o2, or NULL on failure.  This is
the equivalent of the Python expression o1 * o2.
Returns the result of matrix multiplication on o1 and o2, or NULL on
failure.  This is the equivalent of the Python expression o1 @ o2.
New in version 3.5.
Return the floor of o1 divided by o2, or NULL on failure.  This is
equivalent to the “classic” division of integers.
Return a reasonable approximation for the mathematical value of o1 divided by
o2, or NULL on failure.  The return value is “approximate” because binary
floating point numbers are approximate; it is not possible to represent all real
numbers in base two.  This function can return a floating point value when
passed two integers.
Returns the remainder of dividing o1 by o2, or NULL on failure.  This is
the equivalent of the Python expression o1 % o2.
See the built-in function divmod(). Returns NULL on failure.  This is
the equivalent of the Python expression divmod(o1, o2).
See the built-in function pow(). Returns NULL on failure.  This is the
equivalent of the Python expression pow(o1, o2, o3), where o3 is optional.
If o3 is to be ignored, pass Py_None in its place (passing NULL for
o3 would cause an illegal memory access).
Returns the negation of o on success, or NULL on failure. This is the
equivalent of the Python expression -o.
Returns o on success, or NULL on failure.  This is the equivalent of the
Python expression +o.
Returns the absolute value of o, or NULL on failure.  This is the equivalent
of the Python expression abs(o).
Returns the bitwise negation of o on success, or NULL on failure.  This is
the equivalent of the Python expression ~o.
Returns the result of left shifting o1 by o2 on success, or NULL on
failure.  This is the equivalent of the Python expression o1 << o2.
Returns the result of right shifting o1 by o2 on success, or NULL on
failure.  This is the equivalent of the Python expression o1 >> o2.
Returns the “bitwise and” of o1 and o2 on success and NULL on failure.
This is the equivalent of the Python expression o1 & o2.
Returns the “bitwise exclusive or” of o1 by o2 on success, or NULL on
failure.  This is the equivalent of the Python expression o1 ^ o2.
Returns the “bitwise or” of o1 and o2 on success, or NULL on failure.
This is the equivalent of the Python expression o1 | o2.
Returns the result of adding o1 and o2, or NULL on failure.  The operation
is done in-place when o1 supports it.  This is the equivalent of the Python
statement o1 += o2.
Returns the result of subtracting o2 from o1, or NULL on failure.  The
operation is done in-place when o1 supports it.  This is the equivalent of
the Python statement o1 -= o2.
Returns the result of multiplying o1 and o2, or NULL on failure.  The
operation is done in-place when o1 supports it.  This is the equivalent of
the Python statement o1 *= o2.
Returns the result of matrix multiplication on o1 and o2, or NULL on
failure.  The operation is done in-place when o1 supports it.  This is
the equivalent of the Python statement o1 @= o2.
New in version 3.5.
Returns the mathematical floor of dividing o1 by o2, or NULL on failure.
The operation is done in-place when o1 supports it.  This is the equivalent
of the Python statement o1 //= o2.
Return a reasonable approximation for the mathematical value of o1 divided by
o2, or NULL on failure.  The return value is “approximate” because binary
floating point numbers are approximate; it is not possible to represent all real
numbers in base two.  This function can return a floating point value when
passed two integers.  The operation is done in-place when o1 supports it.
Returns the remainder of dividing o1 by o2, or NULL on failure.  The
operation is done in-place when o1 supports it.  This is the equivalent of
the Python statement o1 %= o2.
See the built-in function pow(). Returns NULL on failure.  The operation
is done in-place when o1 supports it.  This is the equivalent of the Python
statement o1 **= o2 when o3 is Py_None, or an in-place variant of
pow(o1, o2, o3) otherwise. If o3 is to be ignored, pass Py_None
in its place (passing NULL for o3 would cause an illegal memory access).
Returns the result of left shifting o1 by o2 on success, or NULL on
failure.  The operation is done in-place when o1 supports it.  This is the
equivalent of the Python statement o1 <<= o2.
Returns the result of right shifting o1 by o2 on success, or NULL on
failure.  The operation is done in-place when o1 supports it.  This is the
equivalent of the Python statement o1 >>= o2.
Returns the “bitwise and” of o1 and o2 on success and NULL on failure. The
operation is done in-place when o1 supports it.  This is the equivalent of
the Python statement o1 &= o2.
Returns the “bitwise exclusive or” of o1 by o2 on success, or NULL on
failure.  The operation is done in-place when o1 supports it.  This is the
equivalent of the Python statement o1 ^= o2.
Returns the “bitwise or” of o1 and o2 on success, or NULL on failure.  The
operation is done in-place when o1 supports it.  This is the equivalent of
the Python statement o1 |= o2.
Returns the o converted to an integer object on success, or NULL on
failure.  This is the equivalent of the Python expression int(o).
Returns the o converted to a float object on success, or NULL on failure.
This is the equivalent of the Python expression float(o).
Returns the o converted to a Python int on success or NULL with a
TypeError exception raised on failure.
Returns the integer n converted to base base as a string.  The base
argument must be one of 2, 8, 10, or 16.  For base 2, 8, or 16, the
returned string is prefixed with a base marker of '0b', '0o', or
'0x', respectively.  If n is not a Python int, it is converted with
PyNumber_Index() first.
Returns o converted to a Py_ssize_t value if o can be interpreted as an
integer.  If the call fails, an exception is raised and -1 is returned.
If o can be converted to a Python int but the attempt to
convert to a Py_ssize_t value would raise an OverflowError, then the
exc argument is the type of exception that will be raised (usually
IndexError or OverflowError).  If exc is NULL, then the
exception is cleared and the value is clipped to PY_SSIZE_T_MIN for a negative
integer or PY_SSIZE_T_MAX for a positive integer.
Returns True if o is an index integer (has the nb_index slot of  the
tp_as_number structure filled in).
Object Protocol
Sequence Protocol

    Enter search terms or a module, class or function name.
    

