URL: https://docs.python.org/3/library/unittest.mock-examples.html

Title: 26.6. unittest.mock — getting started — Python 3.5.2 documentation

Doc Id: 210

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :New in version 3.3.
Common uses for Mock objects include:
You might want to replace a method on an object to check that
it is called with the correct arguments by another part of the system:
Once our mock has been used (real.method in this example) it has methods
and attributes that allow you to make assertions about how it has been used.
Note
In most of these examples the Mock and MagicMock classes
are interchangeable. As the MagicMock is the more capable class it makes
a sensible one to use by default.
Once the mock has been called its called attribute is set to
True. More importantly we can use the assert_called_with() or
assert_called_once_with() method to check that it was called with
the correct arguments.
This example tests that calling ProductionClass().method results in a call to
the something method:
In the last example we patched a method directly on an object to check that it
was called correctly. Another common use case is to pass an object into a
method (or some part of the system under test) and then check that it is used
in the correct way.
The simple ProductionClass below has a closer method. If it is called with
an object then it calls close on it.
So to test it we need to pass in an object with a close method and check
that it was called correctly.
We don’t have to do any work to provide the ‘close’ method on our mock.
Accessing close creates it. So, if ‘close’ hasn’t already been called then
accessing it in the test will create it, but assert_called_with()
will raise a failure exception.
A common use case is to mock out classes instantiated by your code under test.
When you patch a class, then that class is replaced with a mock. Instances
are created by calling the class. This means you access the “mock instance”
by looking at the return value of the mocked class.
In the example below we have a function some_function that instantiates Foo
and calls a method on it. The call to patch() replaces the class Foo with a
mock. The Foo instance is the result of calling the mock, so it is configured
by modifying the mock return_value.
It can be useful to give your mocks a name. The name is shown in the repr of
the mock and can be helpful when the mock appears in test failure messages. The
name is also propagated to attributes or methods of the mock:
Often you want to track more than a single call to a method. The
mock_calls attribute records all calls
to child attributes of the mock - and also to their children.
If you make an assertion about mock_calls and any unexpected methods
have been called, then the assertion will fail. This is useful because as well
as asserting that the calls you expected have been made, you are also checking
that they were made in the right order and with no additional calls:
You use the call object to construct lists for comparing with
mock_calls:
Setting the return values on a mock object is trivially easy:
Of course you can do the same for methods on the mock:
The return value can also be set in the constructor:
If you need an attribute setting on your mock, just do it:
Sometimes you want to mock up a more complex situation, like for example
mock.connection.cursor().execute("SELECT 1"). If we wanted this call to
return a list, then we have to configure the result of the nested call.
We can use call to construct the set of calls in a “chained call” like
this for easy assertion afterwards:
It is the call to .call_list() that turns our call object into a list of
calls representing the chained calls.
A useful attribute is side_effect. If you set this to an
exception class or instance then the exception will be raised when the mock
is called.
side_effect can also be set to a function or an iterable. The use case for
side_effect as an iterable is where your mock is going to be called several
times, and you want each call to return a different value. When you set
side_effect to an iterable every call to the mock returns the next value
from the iterable:
For more advanced use cases, like dynamically varying the return values
depending on what the mock is called with, side_effect can be a function.
The function will be called with the same arguments as the mock. Whatever the
function returns is what the call returns:
One problem with over use of mocking is that it couples your tests to the
implementation of your mocks rather than your real code. Suppose you have a
class that implements some_method. In a test for another class, you
provide a mock of this object that also provides some_method. If later
you refactor the first class, so that it no longer has some_method - then
your tests will continue to pass even though your code is now broken!
Mock allows you to provide an object as a specification for the mock,
using the spec keyword argument. Accessing methods / attributes on the
mock that don’t exist on your specification object will immediately raise an
attribute error. If you change the implementation of your specification, then
tests that use that class will start failing immediately without you having to
instantiate the class in those tests.
Using a specification also enables a smarter matching of calls made to the
mock, regardless of whether some parameters were passed as positional or
named arguments:
If you want this smarter matching to also work with method calls on the mock,
you can use auto-speccing.
If you want a stronger form of specification that prevents the setting
of arbitrary attributes as well as the getting of them then you can use
spec_set instead of spec.
Note
With patch() it matters that you patch objects in the namespace where
they are looked up. This is normally straightforward, but for a quick guide
read where to patch.
A common need in tests is to patch a class attribute or a module attribute,
for example patching a builtin or patching a class in a module to test that it
is instantiated. Modules and classes are effectively global, so patching on
them has to be undone after the test or the patch will persist into other
tests and cause hard to diagnose problems.
mock provides three convenient decorators for this: patch(), patch.object() and
patch.dict(). patch takes a single string, of the form
package.module.Class.attribute to specify the attribute you are patching. It
also optionally takes a value that you want the attribute (or class or
whatever) to be replaced with. ‘patch.object’ takes an object and the name of
the attribute you would like patched, plus optionally the value to patch it
with.
patch.object:
If you are patching a module (including builtins) then use patch()
instead of patch.object():
The module name can be ‘dotted’, in the form package.module if needed:
A nice pattern is to actually decorate test methods themselves:
If you want to patch with a Mock, you can use patch() with only one argument
(or patch.object() with two arguments). The mock will be created for you and
passed into the test function / method:
You can stack up multiple patch decorators using this pattern:
When you nest patch decorators the mocks are passed in to the decorated
function in the same order they applied (the normal python order that
decorators are applied). This means from the bottom up, so in the example
above the mock for test_module.ClassName2 is passed in first.
There is also patch.dict() for setting values in a dictionary just
during a scope and restoring the dictionary to its original state when the test
ends:
patch, patch.object and patch.dict can all be used as context managers.
Where you use patch() to create a mock for you, you can get a reference to the
mock using the “as” form of the with statement:
As an alternative patch, patch.object and patch.dict can be used as
class decorators. When used in this way it is the same as applying the
decorator individually to every method whose name starts with “test”.
Here are some more examples for some slightly more advanced scenarios.
Mocking chained calls is actually straightforward with mock once you
understand the return_value attribute. When a mock is called for
the first time, or you fetch its return_value before it has been called, a
new Mock is created.
This means that you can see how the object returned from a call to a mocked
object has been used by interrogating the return_value mock:
From here it is a simple step to configure and then make assertions about
chained calls. Of course another alternative is writing your code in a more
testable way in the first place...
So, suppose we have some code that looks a little bit like this:
Assuming that BackendProvider is already well tested, how do we test
method()? Specifically, we want to test that the code section # more
code uses the response object in the correct way.
As this chain of calls is made from an instance attribute we can monkey patch
the backend attribute on a Something instance. In this particular case
we are only interested in the return value from the final call to
start_call so we don’t have much configuration to do. Let’s assume the
object it returns is ‘file-like’, so we’ll ensure that our response object
uses the builtin open() as its spec.
To do this we create a mock instance as our mock backend and create a mock
response object for it. To set the response as the return value for that final
start_call we could do this:
We can do that in a slightly nicer way using the configure_mock()
method to directly set the return value for us:
With these we monkey patch the “mock backend” in place and can make the real
call:
Using mock_calls we can check the chained call with a single
assert. A chained call is several calls in one line of code, so there will be
several entries in mock_calls. We can use call.call_list() to create
this list of calls for us:
In some tests I wanted to mock out a call to datetime.date.today()
to return a known date, but I didn’t want to prevent the code under test from
creating new date objects. Unfortunately datetime.date is written in C, and
so I couldn’t just monkey-patch out the static date.today() method.
I found a simple way of doing this that involved effectively wrapping the date
class with a mock, but passing through calls to the constructor to the real
class (and returning real instances).
The patch decorator is used here to
mock out the date class in the module under test. The side_effect
attribute on the mock date class is then set to a lambda function that returns
a real date. When the mock date class is called a real date will be
constructed and returned by side_effect.
Note that we don’t patch datetime.date globally, we patch date in the
module that uses it. See where to patch.
When date.today() is called a known date is returned, but calls to the
date(...) constructor still return normal dates. Without this you can find
yourself having to calculate an expected result using exactly the same
algorithm as the code under test, which is a classic testing anti-pattern.
Calls to the date constructor are recorded in the mock_date attributes
(call_count and friends) which may also be useful for your tests.
An alternative way of dealing with mocking dates, or other builtin classes,
is discussed in this blog entry.
A Python generator is a function or method that uses the yield statement
to return a series of values when iterated over [1].
A generator method / function is called to return the generator object. It is
the generator object that is then iterated over. The protocol method for
iteration is __iter__(), so we can
mock this using a MagicMock.
Here’s an example class with an “iter” method implemented as a generator:
How would we mock this class, and in particular its “iter” method?
To configure the values returned from the iteration (implicit in the call to
list), we need to configure the object returned by the call to foo.iter().
If you want several patches in place for multiple test methods the obvious way
is to apply the patch decorators to every method. This can feel like unnecessary
repetition. For Python 2.6 or more recent you can use patch() (in all its
various forms) as a class decorator. This applies the patches to all test
methods on the class. A test method is identified by methods whose names start
with test:
An alternative way of managing patches is to use the patch methods: start and stop.
These allow you to move the patching into your setUp and tearDown methods.
If you use this technique you must ensure that the patching is “undone” by
calling stop. This can be fiddlier than you might think, because if an
exception is raised in the setUp then tearDown is not called.
unittest.TestCase.addCleanup() makes this easier:
Whilst writing tests today I needed to patch an unbound method (patching the
method on the class rather than on the instance). I needed self to be passed
in as the first argument because I want to make asserts about which objects
were calling this particular method. The issue is that you can’t patch with a
mock for this, because if you replace an unbound method with a mock it doesn’t
become a bound method when fetched from the instance, and so it doesn’t get
self passed in. The workaround is to patch the unbound method with a real
function instead. The patch() decorator makes it so simple to
patch out methods with a mock that having to create a real function becomes a
nuisance.
If you pass autospec=True to patch then it does the patching with a
real function object. This function object has the same signature as the one
it is replacing, but delegates to a mock under the hood. You still get your
mock auto-created in exactly the same way as before. What it means though, is
that if you use it to patch out an unbound method on a class the mocked
function will be turned into a bound method if it is fetched from an instance.
It will have self passed in as the first argument, which is exactly what I
wanted:
If we don’t use autospec=True then the unbound method is patched out
with a Mock instance instead, and isn’t called with self.
mock has a nice API for making assertions about how your mock objects are used.
If your mock is only being called once you can use the
assert_called_once_with() method that also asserts that the
call_count is one.
Both assert_called_with and assert_called_once_with make assertions about
the most recent call. If your mock is going to be called several times, and
you want to make assertions about all those calls you can use
call_args_list:
The call helper makes it easy to make assertions about these calls. You
can build up a list of expected calls and compare it to call_args_list. This
looks remarkably similar to the repr of the call_args_list:
Another situation is rare, but can bite you, is when your mock is called with
mutable arguments. call_args and call_args_list store references to the
arguments. If the arguments are mutated by the code under test then you can no
longer make assertions about what the values were when the mock was called.
Here’s some example code that shows the problem. Imagine the following functions
defined in ‘mymodule’:
When we try to test that grob calls frob with the correct argument look
what happens:
One possibility would be for mock to copy the arguments you pass in. This
could then cause problems if you do assertions that rely on object identity
for equality.
Here’s one solution that uses the side_effect
functionality. If you provide a side_effect function for a mock then
side_effect will be called with the same args as the mock. This gives us an
opportunity to copy the arguments and store them for later assertions. In this
example I’m using another mock to store the arguments so that I can use the
mock methods for doing the assertion. Again a helper function sets this up for
me.
copy_call_args is called with the mock that will be called. It returns a new
mock that we do the assertion on. The side_effect function makes a copy of
the args and calls our new_mock with the copy.
Note
If your mock is only going to be used once there is an easier way of
checking arguments at the point they are called. You can simply do the
checking inside a side_effect function.
An alternative approach is to create a subclass of Mock or
MagicMock that copies (using copy.deepcopy()) the arguments.
Here’s an example implementation:
When you subclass Mock or MagicMock all dynamically created attributes,
and the return_value will use your subclass automatically. That means all
children of a CopyingMock will also have the type CopyingMock.
Using patch as a context manager is nice, but if you do multiple patches you
can end up with nested with statements indenting further and further to the
right:
With unittest cleanup functions and the patch methods: start and stop we can
achieve the same effect without the nested indentation. A simple helper
method, create_patch, puts the patch in place and returns the created mock
for us:
You may want to mock a dictionary, or other container object, recording all
access to it whilst having it still behave like a dictionary.
We can do this with MagicMock, which will behave like a dictionary,
and using side_effect to delegate dictionary access to a real
underlying dictionary that is under our control.
When the __getitem__() and __setitem__() methods of our MagicMock are called
(normal dictionary access) then side_effect is called with the key (and in
the case of __setitem__ the value too). We can also control what is returned.
After the MagicMock has been used we can use attributes like
call_args_list to assert about how the dictionary was used:
Note
An alternative to using MagicMock is to use Mock and only provide
the magic methods you specifically want:
A third option is to use MagicMock but passing in dict as the spec
(or spec_set) argument so that the MagicMock created only has
dictionary magic methods available:
With these side effect functions in place, the mock will behave like a normal
dictionary but recording the access. It even raises a KeyError if you try
to access a key that doesn’t exist.
After it has been used you can make assertions about the access using the normal
mock methods and attributes:
There are various reasons why you might want to subclass Mock. One
reason might be to add helper methods. Here’s a silly example:
The standard behaviour for Mock instances is that attributes and the return
value mocks are of the same type as the mock they are accessed on. This ensures
that Mock attributes are Mocks and MagicMock attributes are MagicMocks
[2]. So if you’re subclassing to add helper methods then they’ll also be
available on the attributes and return value mock of instances of your
subclass.
Sometimes this is inconvenient. For example, one user is subclassing mock to
created a Twisted adaptor.
Having this applied to attributes too actually causes errors.
Mock (in all its flavours) uses a method called _get_child_mock to create
these “sub-mocks” for attributes and return values. You can prevent your
subclass being used for attributes by overriding this method. The signature is
that it takes arbitrary keyword arguments (**kwargs) which are then passed
onto the mock constructor:
One situation where mocking can be hard is where you have a local import inside
a function. These are harder to mock because they aren’t using an object from
the module namespace that we can patch out.
Generally local imports are to be avoided. They are sometimes done to prevent
circular dependencies, for which there is usually a much better way to solve
the problem (refactor the code) or to prevent “up front costs” by delaying the
import. This can also be solved in better ways than an unconditional local
import (store the module as a class or module attribute and only do the import
on first use).
That aside there is a way to use mock to affect the results of an import.
Importing fetches an object from the sys.modules dictionary. Note that it
fetches an object, which need not be a module. Importing a module for the
first time results in a module object being put in sys.modules, so usually
when you import something you get a module back. This need not be the case
however.
This means you can use patch.dict() to temporarily put a mock in place
in sys.modules. Any imports whilst this patch is active will fetch the mock.
When the patch is complete (the decorated function exits, the with statement
body is complete or patcher.stop() is called) then whatever was there
previously will be restored safely.
Here’s an example that mocks out the ‘fooble’ module.
As you can see the import fooble succeeds, but on exit there is no ‘fooble’
left in sys.modules.
This also works for the from module import name form:
With slightly more work you can also mock package imports:
The Mock class allows you to track the order of method calls on
your mock objects through the method_calls attribute. This
doesn’t allow you to track the order of calls between separate mock objects,
however we can use mock_calls to achieve the same effect.
Because mocks track calls to child mocks in mock_calls, and accessing an
arbitrary attribute of a mock creates a child mock, we can create our separate
mocks from a parent one. Calls to those child mock will then all be recorded,
in order, in the mock_calls of the parent:
We can then assert about the calls, including the order, by comparing with
the mock_calls attribute on the manager mock:
If patch is creating, and putting in place, your mocks then you can attach
them to a manager mock using the attach_mock() method. After
attaching calls will be recorded in mock_calls of the manager.
If many calls have been made, but you’re only interested in a particular
sequence of them then an alternative is to use the
assert_has_calls() method. This takes a list of calls (constructed
with the call object). If that sequence of calls are in
mock_calls then the assert succeeds.
Even though the chained call m.one().two().three() aren’t the only calls that
have been made to the mock, the assert still succeeds.
Sometimes a mock may have several calls made to it, and you are only interested
in asserting about some of those calls. You may not even care about the
order. In this case you can pass any_order=True to assert_has_calls:
Using the same basic concept as ANY we can implement matchers to do more
complex assertions on objects used as arguments to mocks.
Suppose we expect some object to be passed to a mock that by default
compares equal based on object identity (which is the Python default for user
defined classes). To use assert_called_with() we would need to pass
in the exact same object. If we are only interested in some of the attributes
of this object then we can create a matcher that will check these attributes
for us.
You can see in this example how a ‘standard’ call to assert_called_with isn’t
sufficient:
A comparison function for our Foo class might look something like this:
And a matcher object that can use comparison functions like this for its
equality operation would look something like this:
Putting all this together:
The Matcher is instantiated with our compare function and the Foo object
we want to compare against. In assert_called_with the Matcher equality
method will be called, which compares the object the mock was called with
against the one we created our matcher with. If they match then
assert_called_with passes, and if they don’t an AssertionError is raised:
With a bit of tweaking you could have the comparison function raise the
AssertionError directly and provide a more useful failure message.
As of version 1.5, the Python testing library PyHamcrest provides similar functionality,
that may be useful here, in the form of its equality matcher
(hamcrest.library.integration.match_equality).
26.5. unittest.mock — mock object library
26.7. 2to3 - Automated Python 2 to 3 code translation

    Enter search terms or a module, class or function name.
    

