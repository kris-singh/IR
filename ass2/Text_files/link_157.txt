URL: https://docs.python.org/3/library/xml.dom.minidom.html

Title: 20.7. xml.dom.minidom — Minimal DOM implementation — Python 3.5.2 documentation

Doc Id: 157

Meta Tags : No meta tag found in document

Date :Jul 11, 2016

Content :Source code: Lib/xml/dom/minidom.py
xml.dom.minidom is a minimal implementation of the Document Object
Model interface, with an API similar to that in other languages.  It is intended
to be simpler than the full DOM and also significantly smaller.  Users who are
not already proficient with the DOM should consider using the
xml.etree.ElementTree module for their XML processing instead.
Warning
The xml.dom.minidom module is not secure against
maliciously constructed data.  If you need to parse untrusted or
unauthenticated data see XML vulnerabilities.
DOM applications typically start by parsing some XML into a DOM.  With
xml.dom.minidom, this is done through the parse functions:
The parse() function can take either a filename or an open file object.
Return a Document from the given input. filename_or_file may be
either a file name, or a file-like object. parser, if given, must be a SAX2
parser object. This function will change the document handler of the parser and
activate namespace support; other parser configuration (like setting an entity
resolver) must have been done in advance.
If you have XML in a string, you can use the parseString() function
instead:
Return a Document that represents the string. This method creates an
io.StringIO object for the string and passes that on to parse().
Both functions return a Document object representing the content of the
document.
What the parse() and parseString() functions do is connect an XML
parser with a “DOM builder” that can accept parse events from any SAX parser and
convert them into a DOM tree.  The name of the functions are perhaps misleading,
but are easy to grasp when learning the interfaces.  The parsing of the document
will be completed before these functions return; it’s simply that these
functions do not provide a parser implementation themselves.
You can also create a Document by calling a method on a “DOM
Implementation” object.  You can get this object either by calling the
getDOMImplementation() function in the xml.dom package or the
xml.dom.minidom module.  Once you have a Document, you
can add child nodes to it to populate the DOM:
Once you have a DOM document object, you can access the parts of your XML
document through its properties and methods.  These properties are defined in
the DOM specification.  The main property of the document object is the
documentElement property.  It gives you the main element in the XML
document: the one that holds all others.  Here is an example program:
When you are finished with a DOM tree, you may optionally call the
unlink() method to encourage early cleanup of the now-unneeded
objects.  unlink() is an xml.dom.minidom-specific
extension to the DOM API that renders the node and its descendants are
essentially useless.  Otherwise, Python’s garbage collector will
eventually take care of the objects in the tree.
See also
The definition of the DOM API for Python is given as part of the xml.dom
module documentation.  This section lists the differences between the API and
xml.dom.minidom.
Break internal references within the DOM so that it will be garbage collected on
versions of Python without cyclic GC.  Even when cyclic GC is available, using
this can make large amounts of memory available sooner, so calling this on DOM
objects as soon as they are no longer needed is good practice.  This only needs
to be called on the Document object, but may be called on child nodes
to discard children of that node.
You can avoid calling this method explicitly by using the with
statement. The following code will automatically unlink dom when the
with block is exited:
Write XML to the writer object.  The writer should have a write() method
which matches that of the file object interface.  The indent parameter is the
indentation of the current node.  The addindent parameter is the incremental
indentation to use for subnodes of the current one.  The newl parameter
specifies the string to use to terminate newlines.
For the Document node, an additional keyword argument encoding can
be used to specify the encoding field of the XML header.
Return a string or byte string containing the XML represented by
the DOM node.
With an explicit encoding [1] argument, the result is a byte
string in the specified encoding.
With no encoding argument, the result is a Unicode string, and the
XML declaration in the resulting string does not specify an
encoding. Encoding this string in an encoding other than UTF-8 is
likely incorrect, since UTF-8 is the default encoding of XML.
Return a pretty-printed version of the document. indent specifies the
indentation string and defaults to a tabulator; newl specifies the string
emitted at the end of each line and defaults to \n.
The encoding argument behaves like the corresponding argument of
toxml().
This example program is a fairly realistic example of a simple program. In this
particular case, we do not take much advantage of the flexibility of the DOM.
The xml.dom.minidom module is essentially a DOM 1.0-compatible DOM with
some DOM 2 features (primarily namespace features).
Usage of the DOM interface in Python is straight-forward.  The following mapping
rules apply:
The following interfaces have no implementation in xml.dom.minidom:
Most of these reflect information in the XML document that is not of general
utility to most DOM users.
Footnotes
20.6. xml.dom — The Document Object Model API
20.8. xml.dom.pulldom — Support for building partial DOM trees

    Enter search terms or a module, class or function name.
    

