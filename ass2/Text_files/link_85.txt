URL: https://docs.python.org/3/library/stat.html

Title: 11.4. stat — Interpreting stat() results — Python 3.5.2 documentation

Doc Id: 85

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :Source code: Lib/stat.py
The stat module defines constants and functions for interpreting the
results of os.stat(), os.fstat() and os.lstat() (if they
exist).  For complete details about the stat(), fstat() and
lstat() calls, consult the documentation for your system.
Changed in version 3.4: The stat module is backed by a C implementation.
The stat module defines the following functions to test for specific file
types:
Return non-zero if the mode is from a directory.
Return non-zero if the mode is from a character special device file.
Return non-zero if the mode is from a block special device file.
Return non-zero if the mode is from a regular file.
Return non-zero if the mode is from a FIFO (named pipe).
Return non-zero if the mode is from a symbolic link.
Return non-zero if the mode is from a socket.
Return non-zero if the mode is from a door.
New in version 3.4.
Return non-zero if the mode is from an event port.
New in version 3.4.
Return non-zero if the mode is from a whiteout.
New in version 3.4.
Two additional functions are defined for more general manipulation of the file’s
mode:
Return the portion of the file’s mode that can be set by os.chmod()—that is, the file’s permission bits, plus the sticky bit, set-group-id, and
set-user-id bits (on systems that support them).
Return the portion of the file’s mode that describes the file type (used by the
S_IS*() functions above).
Normally, you would use the os.path.is*() functions for testing the type
of a file; the functions here are useful when you are doing multiple tests of
the same file and wish to avoid the overhead of the stat() system call
for each test.  These are also useful when checking for information about a file
that isn’t handled by os.path, like the tests for block and character
devices.
Example:
An additional utility function is provided to convert a file’s mode in a human
readable string:
Convert a file’s mode to a string of the form ‘-rwxrwxrwx’.
New in version 3.3.
Changed in version 3.4: The function supports S_IFDOOR, S_IFPORT and
S_IFWHT.
All the variables below are simply symbolic indexes into the 10-tuple returned
by os.stat(), os.fstat() or os.lstat().
Inode protection mode.
Inode number.
Device inode resides on.
Number of links to the inode.
User id of the owner.
Group id of the owner.
Size in bytes of a plain file; amount of data waiting on some special files.
Time of last access.
Time of last modification.
The “ctime” as reported by the operating system.  On some systems (like Unix) is
the time of the last metadata change, and, on others (like Windows), is the
creation time (see platform documentation for details).
The interpretation of “file size” changes according to the file type.  For plain
files this is the size of the file in bytes.  For FIFOs and sockets under most
flavors of Unix (including Linux in particular), the “size” is the number of
bytes waiting to be read at the time of the call to os.stat(),
os.fstat(), or os.lstat(); this can sometimes be useful, especially
for polling one of these special files after a non-blocking open.  The meaning
of the size field for other character and block devices varies more, depending
on the implementation of the underlying system call.
The variables below define the flags used in the ST_MODE field.
Use of the functions above is more portable than use of the first set of flags:
Socket.
Symbolic link.
Regular file.
Block device.
Directory.
Character device.
FIFO.
Door.
New in version 3.4.
Event port.
New in version 3.4.
Whiteout.
New in version 3.4.
Note
S_IFDOOR, S_IFPORT or S_IFWHT are defined as
0 when the platform does not have support for the file types.
The following flags can also be used in the mode argument of os.chmod():
Set UID bit.
Set-group-ID bit.  This bit has several special uses.  For a directory
it indicates that BSD semantics is to be used for that directory:
files created there inherit their group ID from the directory, not
from the effective group ID of the creating process, and directories
created there will also get the S_ISGID bit set.  For a
file that does not have the group execution bit (S_IXGRP)
set, the set-group-ID bit indicates mandatory file/record locking
(see also S_ENFMT).
Sticky bit.  When this bit is set on a directory it means that a file
in that directory can be renamed or deleted only by the owner of the
file, by the owner of the directory, or by a privileged process.
Mask for file owner permissions.
Owner has read permission.
Owner has write permission.
Owner has execute permission.
Mask for group permissions.
Group has read permission.
Group has write permission.
Group has execute permission.
Mask for permissions for others (not in group).
Others have read permission.
Others have write permission.
Others have execute permission.
System V file locking enforcement.  This flag is shared with S_ISGID:
file/record locking is enforced on files that do not have the group
execution bit (S_IXGRP) set.
Unix V7 synonym for S_IRUSR.
Unix V7 synonym for S_IWUSR.
Unix V7 synonym for S_IXUSR.
The following flags can be used in the flags argument of os.chflags():
Do not dump the file.
The file may not be changed.
The file may only be appended to.
The directory is opaque when viewed through a union stack.
The file may not be renamed or deleted.
The file is stored compressed (Mac OS X 10.6+).
The file should not be displayed in a GUI (Mac OS X 10.5+).
The file may be archived.
The file may not be changed.
The file may only be appended to.
The file may not be renamed or deleted.
The file is a snapshot file.
See the *BSD or Mac OS systems man page chflags(2) for more information.
On Windows, the following file attribute constants are available for use when
testing bits in the st_file_attributes member returned by os.stat().
See the Windows API documentation
for more detail on the meaning of these constants.
New in version 3.5.
11.3. fileinput — Iterate over lines from multiple input streams
11.5. filecmp — File and Directory Comparisons

    Enter search terms or a module, class or function name.
    

