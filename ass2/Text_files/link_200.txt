URL: https://docs.python.org/3/library/tkinter.ttk.html

Title: 25.2. tkinter.ttk — Tk themed widgets — Python 3.5.2 documentation

Doc Id: 200

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :Source code: Lib/tkinter/ttk.py
The tkinter.ttk module provides access to the Tk themed widget set,
introduced in Tk 8.5. If Python has not been compiled against Tk 8.5, this
module can still be accessed if Tile has been installed.  The former
method using Tk 8.5 provides additional benefits including anti-aliased font
rendering under X11 and window transparency (requiring a composition
window manager on X11).
The basic idea for tkinter.ttk is to separate, to the extent possible,
the code implementing a widget’s behavior from the code implementing its
appearance.
See also
To start using Ttk, import its module:
To override the basic Tk widgets, the import should follow the Tk import:
That code causes several tkinter.ttk widgets (Button,
Checkbutton, Entry, Frame, Label,
LabelFrame, Menubutton, PanedWindow,
Radiobutton, Scale and Scrollbar) to
automatically replace the Tk widgets.
This has the direct benefit of using the new widgets which gives a better
look and feel across platforms; however, the replacement widgets are not
completely compatible. The main difference is that widget options such as
“fg”, “bg” and others related to widget styling are no
longer present in Ttk widgets.  Instead, use  the ttk.Style class
for improved styling effects.
See also
Ttk comes with 17 widgets, eleven of which already existed in tkinter:
Button, Checkbutton, Entry, Frame,
Label, LabelFrame, Menubutton, PanedWindow,
Radiobutton, Scale and Scrollbar. The other six are
new: Combobox, Notebook, Progressbar,
Separator, Sizegrip and Treeview. And all them are
subclasses of Widget.
Using the Ttk widgets gives the application an improved look and feel.
As discussed above, there are differences in how the styling is coded.
Tk code:
Ttk code:
For more information about TtkStyling, see the Style class
documentation.
ttk.Widget defines standard options and methods supported by Tk
themed widgets and is not supposed to be directly instantiated.
All the ttk Widgets accepts the following options:
The following options are supported by widgets that are controlled by a
scrollbar.
Used to communicate with horizontal scrollbars.
When the view in the widget’s window change, the widget
will generate a Tcl command based on the scrollcommand.
Usually this option consists of the method
Scrollbar.set() of some scrollbar. This will cause
the scrollbar to be updated whenever the view in the
window changes.
The following options are supported by labels, buttons and other button-like
widgets.
Specifies how to display the image relative to the text,
in the case both text and images options are present.
Valid values are:
The widget state is a bitmap of independent state flags.
A state specification is a sequence of state names, optionally prefixed with
an exclamation point indicating that the bit is off.
Besides the methods described below, the ttk.Widget supports the
methods tkinter.Widget.cget() and tkinter.Widget.configure().
Returns the name of the element at position x y, or the empty string
if the point does not lie within any element.
x and y are pixel coordinates relative to the widget.
Test the widget’s state. If a callback is not specified, returns True
if the widget state matches statespec and False otherwise. If callback
is specified then it is called with args if widget state matches
statespec.
Modify or inquire widget state. If statespec is specified, sets the
widget state according to it and return a new statespec indicating
which flags were changed. If statespec is not specified, returns
the currently-enabled state flags.
statespec will usually be a list or a tuple.
The ttk.Combobox widget combines a text field with a pop-down list of
values. This widget is a subclass of Entry.
Besides the methods inherited from Widget: Widget.cget(),
Widget.configure(), Widget.identify(), Widget.instate()
and Widget.state(), and the following inherited from Entry:
Entry.bbox(), Entry.delete(), Entry.icursor(),
Entry.index(), Entry.insert(), Entry.selection(),
Entry.xview(), it has some other methods, described at
ttk.Combobox.
This widget accepts the following specific options:
The combobox widgets generates a <<ComboboxSelected>> virtual event
when the user selects an element from the list of values.
If newindex is specified, sets the combobox value to the element
position newindex. Otherwise, returns the index of the current value or
-1 if the current value is not in the values list.
Returns the current value of the combobox.
Sets the value of the combobox to value.
Ttk Notebook widget manages a collection of windows and displays a single
one at a time. Each child window is associated with a tab, which the user
may select to change the currently-displayed window.
This widget accepts the following specific options:
There are also specific options for tabs:
The tab_id present in several methods of ttk.Notebook may take any
of the following forms:
This widget generates a <<NotebookTabChanged>> virtual event after a new
tab is selected.
Adds a new tab to the notebook.
If window is currently managed by the notebook but hidden, it is
restored to its previous position.
See Tab Options for the list of available options.
Removes the tab specified by tab_id, unmaps and unmanages the
associated window.
Hides the tab specified by tab_id.
The tab will not be displayed, but the associated window remains
managed by the notebook and its configuration remembered. Hidden tabs
may be restored with the add() command.
Returns the name of the tab element at position x, y, or the empty
string if none.
Returns the numeric index of the tab specified by tab_id, or the total
number of tabs if tab_id is the string “end”.
Inserts a pane at the specified position.
pos is either the string “end”, an integer index, or the name of a
managed child. If child is already managed by the notebook, moves it to
the specified position.
See Tab Options for the list of available options.
Selects the specified tab_id.
The associated child window will be displayed, and the
previously-selected window (if different) is unmapped. If tab_id is
omitted, returns the widget name of the currently selected pane.
Query or modify the options of the specific tab_id.
If kw is not given, returns a dictionary of the tab option values. If
option is specified, returns the value of that option. Otherwise,
sets the options to the corresponding values.
Returns a list of windows managed by the notebook.
Enable keyboard traversal for a toplevel window containing this notebook.
This will extend the bindings for the toplevel window containing the
notebook as follows:
Multiple notebooks in a single toplevel may be enabled for traversal,
including nested notebooks. However, notebook traversal only works
properly if all panes have the notebook they are in as master.
The ttk.Progressbar widget shows the status of a long-running
operation. It can operate in two modes:  1) the determinate mode which shows the
amount completed relative to the total amount of work to be done and 2) the
indeterminate mode which provides an animated display to let the user know that
work is progressing.
This widget accepts the following specific options:
Begin autoincrement mode: schedules a recurring timer event that calls
Progressbar.step() every interval milliseconds. If omitted,
interval defaults to 50 milliseconds.
Increments the progress bar’s value by amount.
amount defaults to 1.0 if omitted.
Stop autoincrement mode: cancels any recurring timer event initiated by
Progressbar.start() for this progress bar.
The ttk.Separator widget displays a horizontal or vertical separator
bar.
It has no other methods besides the ones inherited from ttk.Widget.
This widget accepts the following specific option:
The ttk.Sizegrip widget (also known as a grow box) allows the user to
resize the containing toplevel window by pressing and dragging the grip.
This widget has neither specific options nor specific methods, besides the
ones inherited from ttk.Widget.
The ttk.Treeview widget displays a hierarchical collection of items.
Each item has a textual label, an optional image, and an optional list of data
values. The data values are displayed in successive columns after the tree
label.
The order in which data values are displayed may be controlled by setting
the widget option displaycolumns. The tree widget can also display column
headings. Columns may be accessed by number or symbolic names listed in the
widget option columns. See Column Identifiers.
Each item is identified by a unique name. The widget will generate item IDs
if they are not supplied by the caller. There is a distinguished root item,
named {}. The root item itself is not displayed; its children appear at the
top level of the hierarchy.
Each item also has a list of tags, which can be used to associate event bindings
with individual items and control the appearance of the item.
The Treeview widget supports horizontal and vertical scrolling, according to
the options described in Scrollable Widget Options and the methods
Treeview.xview() and Treeview.yview().
This widget accepts the following specific options:
Controls how the built-in class bindings manage the
selection. One of “extended”, “browse” or “none”.
If set to “extended” (the default), multiple items may
be selected. If “browse”, only a single item will be
selected at a time. If “none”, the selection will not
be changed.
Note that the application code and tag bindings can set
the selection however they wish, regardless of the
value  of this option.
A list containing zero or more of the following values,
specifying which elements of the tree to display.
The default is “tree headings”, i.e., show all
elements.
Note: Column #0 always refers to the tree column,
even if show=”tree” is not specified.
The following item options may be specified for items in the insert and item
widget commands.
The list of values associated with the item.
Each item should have the same number of values as the widget
option columns. If there are fewer values than columns, the
remaining values are assumed empty. If there are more values
than columns, the extra values are ignored.
The following options may be specified on tags:
Column identifiers take any of the following forms:
Notes:
A data column number is an index into an item’s option values list; a display
column number is the column number in the tree where the values are displayed.
Tree labels are displayed in column #0. If option displaycolumns is not set,
then data column n is displayed in column #n+1. Again, column #0 always
refers to the tree column.
The Treeview widget generates the following virtual events.
The Treeview.focus() and Treeview.selection() methods can be used
to determine the affected item or items.
Returns the bounding box (relative to the treeview widget’s window) of
the specified item in the form (x, y, width, height).
If column is specified, returns the bounding box of that cell. If the
item is not visible (i.e., if it is a descendant of a closed item or is
scrolled offscreen), returns an empty string.
Returns the list of children belonging to item.
If item is not specified, returns root children.
Replaces item‘s child with newchildren.
Children present in item that are not present in newchildren are
detached from the tree. No items in newchildren may be an ancestor of
item. Note that not specifying newchildren results in detaching
item‘s children.
Query or modify the options for the specified column.
If kw is not given, returns a dict of the column option values. If
option is specified then the value for that option is returned.
Otherwise, sets the options to the corresponding values.
The valid options/values are:
Returns the column name. This is a read-only option.
Specifies how the text in this column should be aligned with respect
to the cell.
The minimum width of the column in pixels. The treeview widget will
not make the column any smaller than specified by this option when
the widget is resized or the user drags a column.
Specifies whether the column’s width should be adjusted when
the widget is resized.
The width of the column in pixels.
To configure the tree column, call this with column = “#0”
Delete all specified items and all their descendants.
The root item may not be deleted.
Unlinks all of the specified items from the tree.
The items and all of their descendants are still present, and may be
reinserted at another point in the tree, but will not be displayed.
The root item may not be detached.
Returns True if the specified item is present in the tree.
If item is specified, sets the focus item to item. Otherwise, returns
the current focus item, or ‘’ if there is none.
Query or modify the heading options for the specified column.
If kw is not given, returns a dict of the heading option values. If
option is specified then the value for that option is returned.
Otherwise, sets the options to the corresponding values.
The valid options/values are:
The text to display in the column heading.
Specifies an image to display to the right of the column heading.
Specifies how the heading text should be aligned. One of the standard
Tk anchor values.
A callback to be invoked when the heading label is pressed.
To configure the tree column heading, call this with column = “#0”.
Returns a description of the specified component under the point given
by x and y, or the empty string if no such component is present at
that position.
Returns the item ID of the item at position y.
Returns the data column identifier of the cell at position x.
The tree column has ID #0.
Returns one of:
Availability: Tk 8.6.
Returns the element at position x, y.
Availability: Tk 8.6.
Returns the integer index of item within its parent’s list of children.
Creates a new item and returns the item identifier of the newly created
item.
parent is the item ID of the parent item, or the empty string to create
a new top-level item. index is an integer, or the value “end”,
specifying where in the list of parent’s children to insert the new item.
If index is less than or equal to zero, the new node is inserted at
the beginning; if index is greater than or equal to the current number
of children, it is inserted at the end. If iid is specified, it is used
as the item identifier; iid must not already exist in the tree.
Otherwise, a new unique identifier is generated.
See Item Options for the list of available points.
Query or modify the options for the specified item.
If no options are given, a dict with options/values for the item is
returned.
If option is specified then the value for that option is returned.
Otherwise, sets the options to the corresponding values as given by kw.
Moves item to position index in parent‘s list of children.
It is illegal to move an item under one of its descendants. If index is
less than or equal to zero, item is moved to the beginning; if greater
than or equal to the number of children, it is moved to the end. If item
was detached it is reattached.
Returns the identifier of item‘s next sibling, or ‘’ if item is the
last child of its parent.
Returns the ID of the parent of item, or ‘’ if item is at the top
level of the hierarchy.
Returns the identifier of item‘s previous sibling, or ‘’ if item is
the first child of its parent.
An alias for Treeview.move().
Ensure that item is visible.
Sets all of item‘s ancestors open option to True, and scrolls the
widget if necessary so that item is within the visible portion of
the tree.
If selop is not specified, returns selected items. Otherwise, it will
act according to the following selection methods.
items becomes the new selection.
Add items to the selection.
Remove items from the selection.
Toggle the selection state of each item in items.
With one argument, returns a dictionary of column/value pairs for the
specified item. With two arguments, returns the current value of the
specified column. With three arguments, sets the value of given
column in given item to the specified value.
Bind a callback for the given event sequence to the tag tagname.
When an event is delivered to an item, the callbacks for each of the
item’s tags option are called.
Query or modify the options for the specified tagname.
If kw is not given, returns a dict of the option settings for
tagname. If option is specified, returns the value for that option
for the specified tagname. Otherwise, sets the options to the
corresponding values for the given tagname.
If item is specified, returns 1 or 0 depending on whether the specified
item has the given tagname. Otherwise, returns a list of all items
that have the specified tag.
Availability: Tk 8.6
Query or modify horizontal position of the treeview.
Query or modify vertical position of the treeview.
Each widget in ttk is assigned a style, which specifies the set of
elements making up the widget and how they are arranged, along with dynamic
and default settings for element options. By default the style name is the
same as the widget’s class name, but it may be overridden by the widget’s style
option. If you don’t know the class name of a widget, use the method
Misc.winfo_class() (somewidget.winfo_class()).
See also
This class is used to manipulate the style database.
Query or set the default value of the specified option(s) in style.
Each key in kw is an option and each value is a string identifying
the value for that option.
For example, to change every default button to be a flat button with
some padding and a different background color:
Query or sets dynamic values of the specified option(s) in style.
Each key in kw is an option and each value should be a list or a
tuple (usually) containing statespecs grouped in tuples, lists, or
some other preference. A statespec is a compound of one
or more states and then a value.
An example may make it more understandable:
Note that the order of the (states, value) sequences for an option does
matter, if the order is changed to [('active', 'blue'), ('pressed',
'red')] in the foreground option, for example, the result would be a
blue foreground when the widget were in active or pressed states.
Returns the value specified for option in style.
If state is specified, it is expected to be a sequence of one or more
states. If the default argument is set, it is used as a fallback value
in case no specification for option is found.
To check what font a Button uses by default:
Define the widget layout for given style. If layoutspec is omitted,
return the layout specification for given style.
layoutspec, if specified, is expected to be a list or some other
sequence type (excluding strings), where each item should be a tuple and
the first item is the layout name and the second item should have the
format described in Layouts.
To understand the format, see the following example (it is not
intended to do anything useful):
Create a new element in the current theme, of the given etype which is
expected to be either “image”, “from” or “vsapi”. The latter is only
available in Tk 8.6a for Windows XP and Vista and is not described here.
If “image” is used, args should contain the default image name followed
by statespec/value pairs (this is the imagespec), and kw may have the
following options:
padding is a list of up to four integers, specifying the left, top,
right, and bottom borders, respectively.
Specifies a minimum height for the element. If less than zero, the
base image’s height is used as a default.
Specifies the element’s interior padding. Defaults to border’s value
if not specified.
Specifies how the image is placed within the final parcel. spec
contains zero or more characters “n”, “s”, “w”, or “e”.
Specifies a minimum width for the element. If less than zero, the
base image’s width is used as a default.
If “from” is used as the value of etype,
element_create() will clone an existing
element. args is expected to contain a themename, from which
the element will be cloned, and optionally an element to clone from.
If this element to clone from is not specified, an empty element will
be used. kw is discarded.
Returns the list of elements defined in the current theme.
Returns the list of elementname‘s options.
Create a new theme.
It is an error if themename already exists. If parent is specified,
the new theme will inherit styles, elements and layouts from the parent
theme. If settings are present they are expected to have the same
syntax used for theme_settings().
Temporarily sets the current theme to themename, apply specified
settings and then restore the previous theme.
Each key in settings is a style and each value may contain the keys
‘configure’, ‘map’, ‘layout’ and ‘element create’ and they are expected
to have the same format as specified by the methods
Style.configure(), Style.map(), Style.layout() and
Style.element_create() respectively.
As an example, let’s change the Combobox for the default theme a bit:
Returns a list of all known themes.
If themename is not given, returns the theme in use.  Otherwise, sets
the current theme to themename, refreshes all widgets and emits a
<<ThemeChanged>> event.
A layout can be just None, if it takes no options, or a dict of
options specifying how to arrange the element. The layout mechanism
uses a simplified version of the pack geometry manager: given an
initial cavity, each element is allocated a parcel. Valid
options/values are:
Specifies which side of the cavity to place the element; one of
top, right, bottom or left. If omitted, the element occupies the
entire cavity.
Specifies where the element is placed inside its allocated parcel.
If set to 1, causes the element and all of its descendants to be treated as
a single element for the purposes of Widget.identify() et al. It’s
used for things like scrollbar thumbs with grips.
Specifies a list of elements to place inside the element. Each
element is a tuple (or other sequence type) where the first item is
the layout name, and the other is a Layout.
25.1. tkinter — Python interface to Tcl/Tk
25.3. tkinter.tix — Extension widgets for Tk

    Enter search terms or a module, class or function name.
    

