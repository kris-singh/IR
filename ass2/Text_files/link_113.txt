URL: https://docs.python.org/3/library/time.html

Title: 16.3. time — Time access and conversions — Python 3.5.2 documentation

Doc Id: 113

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :This module provides various time-related functions. For related
functionality, see also the datetime and calendar modules.
Although this module is always available,
not all functions are available on all platforms.  Most of the functions
defined in this module call platform C library functions with the same name.  It
may sometimes be helpful to consult the platform documentation, because the
semantics of these functions varies among platforms.
An explanation of some terminology and conventions is in order.
DST is Daylight Saving Time, an adjustment of the timezone by (usually) one
hour during part of the year.  DST rules are magic (determined by local law) and
can change from year to year.  The C library has a table containing the local
rules (often it is read from a system file for flexibility) and is the only
source of True Wisdom in this respect.
The precision of the various real-time functions may be less than suggested by
the units in which their value or argument is expressed. E.g. on most Unix
systems, the clock “ticks” only 50 or 100 times a second.
On the other hand, the precision of time() and sleep() is better
than their Unix equivalents: times are expressed as floating point numbers,
time() returns the most accurate time available (using Unix
gettimeofday() where available), and sleep() will accept a time
with a nonzero fraction (Unix select() is used to implement this, where
available).
The time value as returned by gmtime(), localtime(), and
strptime(), and accepted by asctime(), mktime() and
strftime(), is a sequence of 9 integers.  The return values of
gmtime(), localtime(), and strptime() also offer attribute
names for individual fields.
See struct_time for a description of these objects.
Changed in version 3.3: The struct_time type was extended to provide the tm_gmtoff
and tm_zone attributes when platform supports corresponding
struct tm members.
Use the following functions to convert between time representations:
The module defines the following functions and data items:
The offset of the local DST timezone, in seconds west of UTC, if one is defined.
This is negative if the local DST timezone is east of UTC (as in Western Europe,
including the UK).  Only use this if daylight is nonzero.
Convert a tuple or struct_time representing a time as returned by
gmtime() or localtime() to a string of the following
form: 'Sun Jun 20 23:21:05 1993'.  If t is not provided, the current time
as returned by localtime() is used. Locale information is not used by
asctime().
Note
Unlike the C function of the same name, asctime() does not add a
trailing newline.
On Unix, return the current processor time as a floating point number expressed
in seconds.  The precision, and in fact the very definition of the meaning of
“processor time”, depends on that of the C function of the same name.
On Windows, this function returns wall-clock seconds elapsed since the first
call to this function, as a floating point number, based on the Win32 function
QueryPerformanceCounter(). The resolution is typically better than one
microsecond.
Deprecated since version 3.3: The behaviour of this function depends on the platform: use
perf_counter() or process_time() instead, depending on your
requirements, to have a well defined behaviour.
Return the resolution (precision) of the specified clock clk_id.
Availability: Unix.
New in version 3.3.
Return the time of the specified clock clk_id.
Availability: Unix.
New in version 3.3.
Set the time of the specified clock clk_id.
Availability: Unix.
New in version 3.3.
The Solaris OS has a CLOCK_HIGHRES timer that attempts to use an optimal
hardware source, and may give close to nanosecond resolution.  CLOCK_HIGHRES
is the nonadjustable, high-resolution clock.
Availability: Solaris.
New in version 3.3.
Clock that cannot be set and represents monotonic time since some unspecified
starting point.
Availability: Unix.
New in version 3.3.
Similar to CLOCK_MONOTONIC, but provides access to a raw
hardware-based time that is not subject to NTP adjustments.
Availability: Linux 2.6.28 or later.
New in version 3.3.
High-resolution per-process timer from the CPU.
Availability: Unix.
New in version 3.3.
System-wide real-time clock.  Setting this clock requires appropriate
privileges.
Availability: Unix.
New in version 3.3.
Thread-specific CPU-time clock.
Availability: Unix.
New in version 3.3.
Convert a time expressed in seconds since the epoch to a string representing
local time. If secs is not provided or None, the current time as
returned by time() is used.  ctime(secs) is equivalent to
asctime(localtime(secs)). Locale information is not used by ctime().
Nonzero if a DST timezone is defined.
Get information on the specified clock as a namespace object.
Supported clock names and the corresponding functions to read their value
are:
The result has the following attributes:
New in version 3.3.
Convert a time expressed in seconds since the epoch to a struct_time in
UTC in which the dst flag is always zero.  If secs is not provided or
None, the current time as returned by time() is used.  Fractions
of a second are ignored.  See above for a description of the
struct_time object. See calendar.timegm() for the inverse of this
function.
Like gmtime() but converts to local time.  If secs is not provided or
None, the current time as returned by time() is used.  The dst
flag is set to 1 when DST applies to the given time.
This is the inverse function of localtime().  Its argument is the
struct_time or full 9-tuple (since the dst flag is needed; use -1
as the dst flag if it is unknown) which expresses the time in local time, not
UTC.  It returns a floating point number, for compatibility with time().
If the input value cannot be represented as a valid time, either
OverflowError or ValueError will be raised (which depends on
whether the invalid value is caught by Python or the underlying C libraries).
The earliest date for which it can generate a time is platform-dependent.
Return the value (in fractional seconds) of a monotonic clock, i.e. a clock
that cannot go backwards.  The clock is not affected by system clock updates.
The reference point of the returned value is undefined, so that only the
difference between the results of consecutive calls is valid.
On Windows versions older than Vista, monotonic() detects
GetTickCount() integer overflow (32 bits, roll-over after 49.7 days).
It increases an internal epoch (reference time) by 232 each time
that an overflow is detected.  The epoch is stored in the process-local state
and so the value of monotonic() may be different in two Python
processes running for more than 49 days. On more recent versions of Windows
and on other operating systems, monotonic() is system-wide.
New in version 3.3.
Changed in version 3.5: The function is now always available.
Return the value (in fractional seconds) of a performance counter, i.e. a
clock with the highest available resolution to measure a short duration.  It
does include time elapsed during sleep and is system-wide.  The reference
point of the returned value is undefined, so that only the difference between
the results of consecutive calls is valid.
New in version 3.3.
Return the value (in fractional seconds) of the sum of the system and user
CPU time of the current process.  It does not include time elapsed during
sleep.  It is process-wide by definition.  The reference point of the
returned value is undefined, so that only the difference between the results
of consecutive calls is valid.
New in version 3.3.
Suspend execution of the calling thread for the given number of seconds.
The argument may be a floating point number to indicate a more precise sleep
time. The actual suspension time may be less than that requested because any
caught signal will terminate the sleep() following execution of that
signal’s catching routine.  Also, the suspension time may be longer than
requested by an arbitrary amount because of the scheduling of other activity
in the system.
Changed in version 3.5: The function now sleeps at least secs even if the sleep is interrupted
by a signal, except if the signal handler raises an exception (see
PEP 475 for the rationale).
Convert a tuple or struct_time representing a time as returned by
gmtime() or localtime() to a string as specified by the format
argument.  If t is not provided, the current time as returned by
localtime() is used.  format must be a string.  ValueError is
raised if any field in t is outside of the allowed range.
0 is a legal argument for any position in the time tuple; if it is normally
illegal the value is forced to a correct one.
The following directives can be embedded in the format string. They are shown
without the optional field width and precision specification, and are replaced
by the indicated characters in the strftime() result:
Notes:
Here is an example, a format for dates compatible with that specified  in the
RFC 2822 Internet email standard.  [1]
Additional directives may be supported on certain platforms, but only the
ones listed here have a meaning standardized by ANSI C.  To see the full set
of format codes supported on your platform, consult the strftime(3)
documentation.
On some platforms, an optional field width and precision specification can
immediately follow the initial '%' of a directive in the following order;
this is also not portable. The field width is normally 2 except for %j where
it is 3.
Parse a string representing a time according to a format.  The return value
is a struct_time as returned by gmtime() or
localtime().
The format parameter uses the same directives as those used by
strftime(); it defaults to "%a %b %d %H:%M:%S %Y" which matches the
formatting returned by ctime(). If string cannot be parsed according
to format, or if it has excess data after parsing, ValueError is
raised. The default values used to fill in any missing data when more
accurate values cannot be inferred are (1900, 1, 1, 0, 0, 0, 0, 1, -1).
Both string and format must be strings.
For example:
Support for the %Z directive is based on the values contained in tzname
and whether daylight is true.  Because of this, it is platform-specific
except for recognizing UTC and GMT which are always known (and are considered to
be non-daylight savings timezones).
Only the directives specified in the documentation are supported.  Because
strftime() is implemented per platform it can sometimes offer more
directives than those listed.  But strptime() is independent of any platform
and thus does not necessarily support all directives available that are not
documented as supported.
The type of the time value sequence returned by gmtime(),
localtime(), and strptime().  It is an object with a named
tuple interface: values can be accessed by index and by attribute name.  The
following values are present:
Note that unlike the C structure, the month value is a range of [1, 12], not
[0, 11].
In calls to mktime(), tm_isdst may be set to 1 when daylight
savings time is in effect, and 0 when it is not.  A value of -1 indicates that
this is not known, and will usually result in the correct state being filled in.
When a tuple with an incorrect length is passed to a function expecting a
struct_time, or having elements of the wrong type, a
TypeError is raised.
Changed in version 3.3: tm_gmtoff and tm_zone attributes are available on platforms
with C library supporting the corresponding fields in struct tm.
Return the time in seconds since the epoch as a floating point number.
Note that even though the time is always returned as a floating point
number, not all systems provide time with a better precision than 1 second.
While this function normally returns non-decreasing values, it can return a
lower value than a previous call if the system clock has been set back between
the two calls.
The offset of the local (non-DST) timezone, in seconds west of UTC (negative in
most of Western Europe, positive in the US, zero in the UK).
A tuple of two strings: the first is the name of the local non-DST timezone, the
second is the name of the local DST timezone.  If no DST timezone is defined,
the second string should not be used.
Resets the time conversion rules used by the library routines. The environment
variable TZ specifies how this is done.
Availability: Unix.
Note
Although in many cases, changing the TZ environment variable may
affect the output of functions like localtime() without calling
tzset(), this behavior should not be relied on.
The TZ environment variable should contain no whitespace.
The standard format of the TZ environment variable is (whitespace
added for clarity):
Where the components are:
Indicates when to change to and back from DST. The format of the
start and end dates are one of the following:
time has the same format as offset except that no leading sign
(‘-‘ or ‘+’) is allowed. The default, if time is not given, is 02:00:00.
On many Unix systems (including *BSD, Linux, Solaris, and Darwin), it is more
convenient to use the system’s zoneinfo (tzfile(5))  database to
specify the timezone rules. To do this, set the  TZ environment
variable to the path of the required timezone  datafile, relative to the root of
the systems ‘zoneinfo’ timezone database, usually located at
/usr/share/zoneinfo. For example,  'US/Eastern',
'Australia/Melbourne', 'Egypt' or  'Europe/Amsterdam'.
See also
Footnotes
16.2. io — Core tools for working with streams
16.4. argparse — Parser for command-line options, arguments and sub-commands

    Enter search terms or a module, class or function name.
    

