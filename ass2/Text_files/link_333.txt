URL: https://docs.python.org/3/c-api/allocation.html

Title: Allocating Objects on the Heap — Python 3.5.2 documentation

Doc Id: 333

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :Initialize a newly-allocated object op with its type and initial
reference.  Returns the initialized object.  If type indicates that the
object participates in the cyclic garbage detector, it is added to the
detector’s set of observed objects. Other fields of the object are not
affected.
This does everything PyObject_Init() does, and also initializes the
length information for a variable-size object.
Allocate a new Python object using the C structure type TYPE and the
Python type object type.  Fields not defined by the Python object header
are not initialized; the object’s reference count will be one.  The size of
the memory allocation is determined from the tp_basicsize field of
the type object.
Allocate a new Python object using the C structure type TYPE and the
Python type object type.  Fields not defined by the Python object header
are not initialized.  The allocated memory allows for the TYPE structure
plus size fields of the size given by the tp_itemsize field of
type.  This is useful for implementing objects like tuples, which are
able to determine their size at construction time.  Embedding the array of
fields into the same allocation decreases the number of allocations,
improving the memory management efficiency.
Releases memory allocated to an object using PyObject_New() or
PyObject_NewVar().  This is normally called from the
tp_dealloc handler specified in the object’s type.  The fields of
the object should not be accessed after this call as the memory is no
longer a valid Python object.
Object which is visible in Python as None.  This should only be accessed
using the Py_None macro, which evaluates to a pointer to this
object.
See also
Object Implementation Support
Common Object Structures

    Enter search terms or a module, class or function name.
    

