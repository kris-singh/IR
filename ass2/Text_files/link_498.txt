URL: https://docs.python.org/3/extending/building.html

Title: 3. Building C and C++ Extensions — Python 3.5.2 documentation

Doc Id: 498

Meta Tags : No meta tag found in document

Date :Jul 29, 2016

Content :A C extension for CPython is a shared library (e.g. a .so file on Linux,
.pyd on Windows), which exports an initialization function.
To be importable, the shared library must be available on PYTHONPATH,
and must be named after the module name, with an appropriate extension.
When using distutils, the correct filename is generated automatically.
The initialization function has the signature:
It returns either a fully-initialized module, or a PyModuleDef
instance. See Initializing C modules for details.
For modules with ASCII-only names, the function must be named
PyInit_<modulename>, with <modulename> replaced by the name of the
module. When using Multi-phase initialization, non-ASCII module names
are allowed. In this case, the initialization function name is
PyInitU_<modulename>, with <modulename> encoded using Python’s
punycode encoding with hyphens replaced by underscores. In Python:
It is possible to export multiple modules from a single shared library by
defining multiple initialization functions. However, importing them requires
using symbolic links or a custom importer, because by default only the
function corresponding to the filename is found.
See the “Multiple modules in one library” section in PEP 489 for details.
Extension modules can be built using distutils,  which is included in Python.
Since distutils also supports creation of binary packages, users don’t
necessarily need a compiler and distutils to install the extension.
A distutils package contains a driver script, setup.py. This is a plain
Python file, which, in the most simple case, could look like this:
With this setup.py, and a file demo.c, running
will compile demo.c, and produce an extension module named demo in
the build directory. Depending on the system, the module file will end
up in a subdirectory build/lib.system, and may have a name like
demo.so or demo.pyd.
In the setup.py, all execution is performed by calling the setup
function. This takes a variable number of keyword arguments, of which the
example above uses only a subset. Specifically, the example specifies
meta-information to build packages, and it specifies the contents of the
package.  Normally, a package will contain additional modules, like Python
source modules, documentation, subpackages, etc. Please refer to the distutils
documentation in Distributing Python Modules (Legacy version) to learn more about the features of
distutils; this section explains building extension modules only.
It is common to pre-compute arguments to setup(), to better structure the
driver script. In the example above, the ext_modules argument to
setup() is a list of extension modules, each of which is
an instance of
the Extension. In the example, the instance
defines an extension named demo which is build by compiling a single source
file, demo.c.
In many cases, building an extension is more complex, since additional
preprocessor defines and libraries may be needed. This is demonstrated in the
example below.
In this example, setup() is called with additional
meta-information, which
is recommended when distribution packages have to be built. For the extension
itself, it specifies preprocessor defines, include directories, library
directories, and libraries. Depending on the compiler, distutils passes this
information in different ways to the compiler. For example, on Unix, this may
result in the compilation commands
These lines are for demonstration purposes only; distutils users should trust
that distutils gets the invocations right.
When an extension has been successfully build, there are three ways to use it.
End-users will typically want to install the module, they do so by running
Module maintainers should produce source packages; to do so, they run
In some cases, additional files need to be included in a source distribution;
this is done through a MANIFEST.in file; see Specifying the files to distribute for details.
If the source distribution has been build successfully, maintainers can also
create binary distributions. Depending on the platform, one of the following
commands can be used to do so.
2. Defining New Types
4. Building C and C++ Extensions on Windows

    Enter search terms or a module, class or function name.
    

