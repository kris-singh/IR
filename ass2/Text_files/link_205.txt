URL: https://docs.python.org/3/library/typing.html

Title: 26.1. typing — Support for type hints — Python 3.5.2 documentation

Doc Id: 205

Meta Tags : No meta tag found in document

Date :Aug 15, 2016

Content :New in version 3.5.
Source code: Lib/typing.py
This module supports type hints as specified by PEP 484.  The most
fundamental support consists of the type Any, Union,
Tuple, Callable, TypeVar, and
Generic.  For full specification please see PEP 484.  For
a simplified introduction to type hints see PEP 483.
The function below takes and returns a string and is annotated as follows:
In the function greeting, the argument name is expected to be of type
str and the return type str. Subtypes are accepted as
arguments.
A type alias is defined by assigning the type to the alias. In this example,
Vector and List[float] will be treated as interchangeable synonyms:
Type aliases are useful for simplifying complex type signatures. For example:
Use the NewType helper function to create distinct types:
The static type checker will treat the new type as if it were a subclass
of the original type. This is useful in helping catch logical errors:
You may still perform all int operations on a variable of type UserId,
but the result will always be of type int. This lets you pass in a
UserId wherever an int might be expected, but will prevent you from
accidentally creating a UserId in an invalid way:
Note that these checks are enforced only by the static type checker. At runtime
the statement Derived = NewType('Derived', Base) will make Derived a
function that immediately returns whatever parameter you pass it. That means
the expression Derived(some_value) does not create a new class or introduce
any overhead beyond that of a regular function call.
More precisely, the expression some_value is Derived(some_value) is always
true at runtime.
This also means that it is not possible to create a subtype of Derived
since it is an identity function at runtime, not an actual type. Similarly, it
is not possible to create another NewType based on a Derived type:
See PEP 484 for more details.
Note
Recall that the use of a type alias declares two types to be equivalent to
one another. Doing Alias = Original will make the static type checker
treat Alias as being exactly equivalent to Original in all cases.
This is useful when you want to simplify complex type signatures.
In contrast, NewType declares one type to be a subtype of another.
Doing Derived = NewType('Derived', Original) will make the static type
checker treat Derived as a subclass of Original, which means a
value of type Original cannot be used in places where a value of type
Derived is expected. This is useful when you want to prevent logic
errors with minimal runtime cost.
Frameworks expecting callback functions of specific signatures might be
type hinted using Callable[[Arg1Type, Arg2Type], ReturnType].
For example:
It is possible to declare the return type of a callable without specifying
the call signature by substituting a literal ellipsis
for the list of arguments in the type hint: Callable[..., ReturnType].
None as a type hint is a special case and is replaced by type(None).
Since type information about objects kept in containers cannot be statically
inferred in a generic way, abstract base classes have been extended to support
subscription to denote expected types for container elements.
Generics can be parametrized by using a new factory available in typing
called TypeVar.
A user-defined class can be defined as a generic class.
Generic[T] as a base class defines that the class LoggedVar takes a
single type parameter T . This also makes T valid as a type within the
class body.
The Generic base class uses a metaclass that defines
__getitem__() so that LoggedVar[t] is valid as a type:
A generic type can have any number of type variables, and type variables may
be constrained:
Each type variable argument to Generic must be distinct.
This is thus invalid:
You can use multiple inheritance with Generic:
When inheriting from generic classes, some type variables could be fixed:
In this case MyDict has a single parameter, T.
Subclassing a generic class without specifying type parameters assumes
Any for each position. In the following example, MyIterable is
not generic but implicitly inherits from Iterable[Any]:
The metaclass used by Generic is a subclass of abc.ABCMeta.
A generic class can be an ABC by including abstract methods or properties,
and generic classes can also have ABCs as base classes without a metaclass
conflict.  Generic metaclasses are not supported.
A special kind of type is Any. A static type checker will treat
every type as being compatible with Any and Any as being
compatible with every type.
This means that it is possible to perform any operation or method call on a
value of type on Any and assign it to any variable:
Notice that no typechecking is performed when assigning a value of type
Any to a more precise type. For example, the static type checker did
not report an error when assigning a to s even though s was
declared to be of type str and receives an int value at
runtime!
Furthermore, all functions without a return type or parameter types will
implicitly default to using Any:
This behavior allows Any to be used as an escape hatch when you
need to mix dynamically and statically typed code.
Contrast the behavior of Any with the behavior of object.
Similar to Any, every type is a subtype of object. However,
unlike Any, the reverse is not true: object is not a
subtype of every other type.
That means when the type of a value is object, a type checker will
reject almost all operations on it, and assigning it to a variable (or using
it as a return value) of a more specialized type is a type error. For example:
Use object to indicate that a value could be any type in a typesafe
manner. Use Any to indicate that a value is dynamically typed.
The module defines the following classes, functions and decorators:
Special type indicating an unconstrained type.
Type variable.
Usage:
Type variables exist primarily for the benefit of static type
checkers.  They serve as the parameters for generic types as well
as for generic function definitions.  See class Generic for more
information on generic types.  Generic functions work as follows:
The latter example’s signature is essentially the overloading
of (str, str) -> str and (bytes, bytes) -> bytes.  Also note
that if the arguments are instances of some subclass of str,
the return type is still plain str.
At runtime, isinstance(x, T) will raise TypeError.  In general,
isinstance() and issubclass() should not be used with types.
Type variables may be marked covariant or contravariant by passing
covariant=True or contravariant=True.  See PEP 484 for more
details.  By default type variables are invariant.  Alternatively,
a type variable may specify an upper bound using bound=<type>.
This means that an actual type substituted (explicitly or implicitly)
for the type variable must be a subclass of the boundary type,
see PEP 484.
Union type; Union[X, Y] means either X or Y.
To define a union, use e.g. Union[int, str].  Details:
The arguments must be types and there must be at least one.
Unions of unions are flattened, e.g.:
Unions of a single argument vanish, e.g.:
Redundant arguments are skipped, e.g.:
When comparing unions, the argument order is ignored, e.g.:
If Any is present it is the sole survivor, e.g.:
You cannot subclass or instantiate a union.
You cannot write Union[X][Y].
You can use Optional[X] as a shorthand for Union[X, None].
Optional type.
Optional[X] is equivalent to Union[X, type(None)].
Note that this is not the same concept as an optional argument,
which is one that has a default.  An optional argument with a
default needn’t use the Optional qualifier on its type
annotation (although it is inferred if the default is None).
A mandatory argument may still have an Optional type if an
explicit value of None is allowed.
Tuple type; Tuple[X, Y] is the type of a tuple of two items
with the first item of type X and the second of type Y.
Example: Tuple[T1, T2] is a tuple of two elements corresponding
to type variables T1 and T2.  Tuple[int, float, str] is a tuple
of an int, a float and a string.
To specify a variable-length tuple of homogeneous type,
use literal ellipsis, e.g. Tuple[int, ...].
Callable type; Callable[[int], str] is a function of (int) -> str.
The subscription syntax must always be used with exactly two
values: the argument list and the return type.  The argument list
must be a list of types; the return type must be a single type.
There is no syntax to indicate optional or keyword arguments,
such function types are rarely used as callback types.
Callable[..., ReturnType] could be used to type hint a callable
taking any number of arguments and returning ReturnType.
A plain Callable is equivalent to Callable[..., Any].
Abstract base class for generic types.
A generic type is typically declared by inheriting from an
instantiation of this class with one or more type variables.
For example, a generic mapping type might be defined as:
This class can then be used as follows:
A generic version of the collections.abc.Iterable.
A generic version of the collections.abc.Iterator.
An ABC with one abstract method __int__.
An ABC with one abstract method __float__.
An ABC with one abstract method __abs__ that is covariant
in its return type.
An ABC with one abstract method __round__
that is covariant in its return type.
An ABC with one abstract method __reversed__ returning
an Iterator[T_co].
A generic version of collections.abc.Container.
A generic version of collections.abc.Set.
A generic version of collections.abc.MutableSet.
A generic version of collections.abc.Mapping.
A generic version of collections.abc.MutableMapping.
A generic version of collections.abc.Sequence.
A generic version of collections.abc.MutableSequence.
A generic version of collections.abc.ByteString.
This type represents the types bytes, bytearray,
and memoryview.
As a shorthand for this type, bytes can be used to
annotate arguments of any of the types mentioned above.
Generic version of list.
Useful for annotating return types. To annotate arguments it is preferred
to use abstract collection types such as Mapping, Sequence,
or AbstractSet.
This type may be used as follows:
A generic version of builtins.set.
A generic version of collections.abc.MappingView.
A generic version of collections.abc.KeysView.
A generic version of collections.abc.ItemsView.
A generic version of collections.abc.ValuesView.
A generic version of dict.
The usage of this type is as follows:
A generator can be annotated by the generic type
Generator[YieldType, SendType, ReturnType]. For example:
Note that unlike many other generics in the typing module, the SendType
of Generator behaves contravariantly, not covariantly or
invariantly.
If your generator will only yield values, set the SendType and
ReturnType to None:
Alternatively, annotate your generator as having a return type of
Iterator[YieldType]:
AnyStr is a type variable defined as
AnyStr = TypeVar('AnyStr', str, bytes).
It is meant to be used for functions that may accept any kind of string
without allowing different kinds of strings to mix. For example:
Text is an alias for str. It is provided to supply a forward
compatible path for Python 2 code: in Python 2, Text is an alias for
unicode.
Use Text to indicate that a value must contain a unicode string in
a manner that is compatible with both Python 2 and Python 3:
Wrapper namespace for I/O stream types.
This defines the generic type IO[AnyStr] and aliases TextIO
and BinaryIO for respectively IO[str] and IO[bytes].
These representing the types of I/O streams such as returned by
open().
Wrapper namespace for regular expression matching types.
This defines the type aliases Pattern and Match which
correspond to the return types from re.compile() and
re.match().  These types (and the corresponding functions)
are generic in AnyStr and can be made specific by writing
Pattern[str], Pattern[bytes], Match[str], or
Match[bytes].
Typed version of namedtuple.
Usage:
This is equivalent to:
The resulting class has one extra attribute: _field_types,
giving a dict mapping field names to types.  (The field names
are in the _fields attribute, which is part of the namedtuple
API.)
Cast a value to a type.
This returns the value unchanged.  To the type checker this
signals that the return value has the designated type, but at
runtime we intentionally don’t check anything (we want this
to be as fast as possible).
Return type hints for a function or method object.
This is often the same as obj.__annotations__, but it handles
forward references encoded as string literals, and if necessary
adds Optional[t] if a default value equal to None is set.
Decorator to indicate that annotations are not type hints.
The argument must be a class or function; if it is a class, it
applies recursively to all methods defined in that class (but not
to methods defined in its superclasses or subclasses).
This mutates the function(s) in place.
Decorator to give another decorator the no_type_check() effect.
This wraps the decorator with something that wraps the decorated
function in no_type_check().
26. Development Tools
26.2. pydoc — Documentation generator and online help system

    Enter search terms or a module, class or function name.
    

