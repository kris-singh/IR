URL: https://docs.python.org/3/library/select.html

Title: 18.3. select — Waiting for I/O completion — Python 3.5.2 documentation

Doc Id: 135

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :This module provides access to the select() and poll() functions
available in most operating systems, devpoll() available on
Solaris and derivatives, epoll() available on Linux 2.5+ and
kqueue() available on most BSD.
Note that on Windows, it only works for sockets; on other operating systems,
it also works for other file types (in particular, on Unix, it works on pipes).
It cannot be used on regular files to determine whether a file has grown since
it was last read.
Note
The selectors module allows high-level and efficient I/O
multiplexing, built upon the select module primitives. Users are
encouraged to use the selectors module instead, unless they want
precise control over the OS-level primitives used.
The module defines the following:
A deprecated alias of OSError.
Changed in version 3.3: Following PEP 3151, this class was made an alias of OSError.
(Only supported on Solaris and derivatives.)  Returns a /dev/poll
polling object; see section /dev/poll Polling Objects below for the
methods supported by devpoll objects.
devpoll() objects are linked to the number of file
descriptors allowed at the time of instantiation. If your program
reduces this value, devpoll() will fail. If your program
increases this value, devpoll() may return an
incomplete list of active file descriptors.
The new file descriptor is non-inheritable.
New in version 3.3.
Changed in version 3.4: The new file descriptor is now non-inheritable.
(Only supported on Linux 2.5.44 and newer.) Return an edge polling object,
which can be used as Edge or Level Triggered interface for I/O
events. sizehint is deprecated and completely ignored. flags can be set
to EPOLL_CLOEXEC, which causes the epoll descriptor to be closed
automatically when os.execve() is called.
See the Edge and Level Trigger Polling (epoll) Objects section below for the methods supported by
epolling objects.
epoll objects support the context management protocol: when used in a
with statement, the new file descriptor is automatically closed
at the end of the block.
The new file descriptor is non-inheritable.
Changed in version 3.3: Added the flags parameter.
Changed in version 3.4: Support for the with statement was added.
The new file descriptor is now non-inheritable.
(Not supported by all operating systems.)  Returns a polling object, which
supports registering and unregistering file descriptors, and then polling them
for I/O events; see section Polling Objects below for the methods supported
by polling objects.
(Only supported on BSD.)  Returns a kernel queue object; see section
Kqueue Objects below for the methods supported by kqueue objects.
The new file descriptor is non-inheritable.
Changed in version 3.4: The new file descriptor is now non-inheritable.
(Only supported on BSD.)  Returns a kernel event object; see section
Kevent Objects below for the methods supported by kevent objects.
This is a straightforward interface to the Unix select() system call.
The first three arguments are sequences of ‘waitable objects’: either
integers representing file descriptors or objects with a parameterless method
named fileno() returning such an integer:
Empty sequences are allowed, but acceptance of three empty sequences is
platform-dependent. (It is known to work on Unix but not on Windows.)  The
optional timeout argument specifies a time-out as a floating point number
in seconds.  When the timeout argument is omitted the function blocks until
at least one file descriptor is ready.  A time-out value of zero specifies a
poll and never blocks.
The return value is a triple of lists of objects that are ready: subsets of the
first three arguments.  When the time-out is reached without a file descriptor
becoming ready, three empty lists are returned.
Among the acceptable object types in the sequences are Python file
objects (e.g. sys.stdin, or objects returned by
open() or os.popen()), socket objects returned by
socket.socket().  You may also define a wrapper class yourself,
as long as it has an appropriate fileno() method (that
really returns a file descriptor, not just a random integer).
Note
File objects on Windows are not acceptable, but sockets are.  On Windows,
the underlying select() function is provided by the WinSock
library, and does not handle file descriptors that don’t originate from
WinSock.
Changed in version 3.5: The function is now retried with a recomputed timeout when interrupted by
a signal, except if the signal handler raises an exception (see
PEP 475 for the rationale), instead of raising
InterruptedError.
The minimum number of bytes which can be written without blocking to a pipe
when the pipe has been reported as ready for writing by select(),
poll() or another interface in this module.  This doesn’t apply
to other kind of file-like objects such as sockets.
This value is guaranteed by POSIX to be at least 512.  Availability: Unix.
New in version 3.2.
Solaris and derivatives have /dev/poll. While select() is
O(highest file descriptor) and poll() is O(number of file
descriptors), /dev/poll is O(active file descriptors).
/dev/poll behaviour is very close to the standard poll()
object.
Close the file descriptor of the polling object.
New in version 3.4.
True if the polling object is closed.
New in version 3.4.
Return the file descriptor number of the polling object.
New in version 3.4.
Register a file descriptor with the polling object.  Future calls to the
poll() method will then check whether the file descriptor has any
pending I/O events.  fd can be either an integer, or an object with a
fileno() method that returns an integer.  File objects
implement fileno(), so they can also be used as the argument.
eventmask is an optional bitmask describing the type of events you want to
check for. The constants are the same that with poll()
object. The default value is a combination of the constants POLLIN,
POLLPRI, and POLLOUT.
Warning
Registering a file descriptor that’s already registered is not an
error, but the result is undefined. The appropriate action is to
unregister or modify it first. This is an important difference
compared with poll().
This method does an unregister() followed by a
register(). It is (a bit) more efficient that doing the same
explicitly.
Remove a file descriptor being tracked by a polling object.  Just like the
register() method, fd can be an integer or an object with a
fileno() method that returns an integer.
Attempting to remove a file descriptor that was never registered is
safely ignored.
Polls the set of registered file descriptors, and returns a possibly-empty list
containing (fd, event) 2-tuples for the descriptors that have events or
errors to report. fd is the file descriptor, and event is a bitmask with
bits set for the reported events for that descriptor — POLLIN for
waiting input, POLLOUT to indicate that the descriptor can be written
to, and so forth. An empty list indicates that the call timed out and no file
descriptors had any events to report. If timeout is given, it specifies the
length of time in milliseconds which the system will wait for events before
returning. If timeout is omitted, -1, or None, the call will
block until there is an event for this poll object.
Changed in version 3.5: The function is now retried with a recomputed timeout when interrupted by
a signal, except if the signal handler raises an exception (see
PEP 475 for the rationale), instead of raising
InterruptedError.
http://linux.die.net/man/4/epoll
eventmask
Close the control file descriptor of the epoll object.
True if the epoll object is closed.
Return the file descriptor number of the control fd.
Create an epoll object from a given file descriptor.
Register a fd descriptor with the epoll object.
Modify a registered file descriptor.
Remove a registered file descriptor from the epoll object.
Wait for events. timeout in seconds (float)
Changed in version 3.5: The function is now retried with a recomputed timeout when interrupted by
a signal, except if the signal handler raises an exception (see
PEP 475 for the rationale), instead of raising
InterruptedError.
The poll() system call, supported on most Unix systems, provides better
scalability for network servers that service many, many clients at the same
time. poll() scales better because the system call only requires listing
the file descriptors of interest, while select() builds a bitmap, turns
on bits for the fds of interest, and then afterward the whole bitmap has to be
linearly scanned again. select() is O(highest file descriptor), while
poll() is O(number of file descriptors).
Register a file descriptor with the polling object.  Future calls to the
poll() method will then check whether the file descriptor has any
pending I/O events.  fd can be either an integer, or an object with a
fileno() method that returns an integer.  File objects
implement fileno(), so they can also be used as the argument.
eventmask is an optional bitmask describing the type of events you want to
check for, and can be a combination of the constants POLLIN,
POLLPRI, and POLLOUT, described in the table below.  If not
specified, the default value used will check for all 3 types of events.
Registering a file descriptor that’s already registered is not an error, and has
the same effect as registering the descriptor exactly once.
Modifies an already registered fd. This has the same effect as
register(fd, eventmask).  Attempting to modify a file descriptor
that was never registered causes an OSError exception with errno
ENOENT to be raised.
Remove a file descriptor being tracked by a polling object.  Just like the
register() method, fd can be an integer or an object with a
fileno() method that returns an integer.
Attempting to remove a file descriptor that was never registered causes a
KeyError exception to be raised.
Polls the set of registered file descriptors, and returns a possibly-empty list
containing (fd, event) 2-tuples for the descriptors that have events or
errors to report. fd is the file descriptor, and event is a bitmask with
bits set for the reported events for that descriptor — POLLIN for
waiting input, POLLOUT to indicate that the descriptor can be written
to, and so forth. An empty list indicates that the call timed out and no file
descriptors had any events to report. If timeout is given, it specifies the
length of time in milliseconds which the system will wait for events before
returning. If timeout is omitted, negative, or None, the call will
block until there is an event for this poll object.
Changed in version 3.5: The function is now retried with a recomputed timeout when interrupted by
a signal, except if the signal handler raises an exception (see
PEP 475 for the rationale), instead of raising
InterruptedError.
Close the control file descriptor of the kqueue object.
True if the kqueue object is closed.
Return the file descriptor number of the control fd.
Create a kqueue object from a given file descriptor.
Low level interface to kevent
Changed in version 3.5: The function is now retried with a recomputed timeout when interrupted by
a signal, except if the signal handler raises an exception (see
PEP 475 for the rationale), instead of raising
InterruptedError.
https://www.freebsd.org/cgi/man.cgi?query=kqueue&sektion=2
Value used to identify the event. The interpretation depends on the filter
but it’s usually the file descriptor. In the constructor ident can either
be an int or an object with a fileno() method. kevent
stores the integer internally.
Name of the kernel filter.
Filter action.
Filter specific flags.
KQ_FILTER_READ and  KQ_FILTER_WRITE filter flags:
KQ_FILTER_VNODE filter flags:
KQ_FILTER_PROC filter flags:
KQ_FILTER_NETDEV filter flags (not available on Mac OS X):
Filter specific data.
User defined value.
18.2. ssl — TLS/SSL wrapper for socket objects
18.4. selectors – High-level I/O multiplexing

    Enter search terms or a module, class or function name.
    

