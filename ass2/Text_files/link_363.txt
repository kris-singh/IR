URL: https://docs.python.org/3/using/unix.html

Title: 2. Using Python on Unix platforms — Python 3.5.2 documentation

Doc Id: 363

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :Python comes preinstalled on most Linux distributions, and is available as a
package on all others.  However there are certain features you might want to use
that are not available on your distro’s package.  You can easily compile the
latest version of Python from source.
In the event that Python doesn’t come preinstalled and isn’t in the repositories as
well, you can easily make packages for your own distro.  Have a look at the
following links:
See also
FreeBSD users, to add the package use:
OpenBSD users use:
For example i386 users get the 2.5.1 version of Python using:
You can get Python from OpenCSW.  Various versions
of Python are available and can be installed with e.g. pkgutil -i python27.
If you want to compile CPython yourself, first thing you should do is get the
source. You can download either the
latest release’s source or just grab a fresh clone.  (If you want
to contribute patches, you will need a clone.)
The build process consists in the usual
invocations. Configuration options and caveats for specific Unix platforms are
extensively documented in the README file in the root of the Python
source tree.
Warning
make install can overwrite or masquerade the python3 binary.
make altinstall is therefore recommended instead of make install
since it only installs exec_prefix/bin/pythonversion.
These are subject to difference depending on local installation conventions;
prefix (${prefix}) and exec_prefix (${exec_prefix})
are installation-dependent and should be interpreted as for GNU software; they
may be the same.
For example, on most Linux systems, the default for both is /usr.
To easily use Python scripts on Unix, you need to make them executable,
e.g. with
and put an appropriate Shebang line at the top of the script.  A good choice is
usually
which searches for the Python interpreter in the whole PATH.  However,
some Unices may not have the env command, so you may need to hardcode
/usr/bin/python3 as the interpreter path.
To use shell commands in your Python scripts, look at the subprocess module.
Vim and Emacs are excellent editors which support Python very well.  For more
information on how to code in Python in these editors, look at:
Geany is an excellent IDE with support for a lot of languages. For more
information, read: https://www.geany.org/
Komodo edit is another extremely good IDE.  It also has support for a lot of
languages. For more information, read https://komodoide.com/.
1. Command line and environment
3. Using Python on Windows

    Enter search terms or a module, class or function name.
    

