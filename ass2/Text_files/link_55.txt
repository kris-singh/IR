URL: https://docs.python.org/3/library/readline.html

Title: 6.7. readline — GNU readline interface — Python 3.5.2 documentation

Doc Id: 55

Meta Tags : No meta tag found in document

Date :Jun 27, 2016

Content :The readline module defines a number of functions to facilitate
completion and reading/writing of history files from the Python interpreter.
This module can be used directly, or via the rlcompleter module, which
supports completion of Python identifiers at the interactive prompt.  Settings
made using  this module affect the behaviour of both the interpreter’s
interactive prompt  and the prompts offered by the built-in input()
function.
Note
The underlying Readline library API may be implemented by
the libedit library instead of GNU readline.
On MacOS X the readline module detects which library is being used
at run time.
The configuration file for libedit is different from that
of GNU readline. If you programmatically load configuration strings
you can check for the text “libedit” in readline.__doc__
to differentiate between GNU readline and libedit.
Readline keybindings may be configured via an initialization file, typically
.inputrc in your home directory.  See Readline Init File
in the GNU Readline manual for information about the format and
allowable constructs of that file, and the capabilities of the
Readline library in general.
The following functions relate to the init file and user configuration:
Execute the init line provided in the string argument. This calls
rl_parse_and_bind() in the underlying library.
Execute a readline initialization file. The default filename is the last filename
used. This calls rl_read_init_file() in the underlying library.
The following functions operate on the line buffer:
Return the current contents of the line buffer (rl_line_buffer
in the underlying library).
Insert text into the line buffer at the cursor position.  This calls
rl_insert_text() in the underlying library, but ignores
the return value.
Change what’s displayed on the screen to reflect the current contents of the
line buffer.  This calls rl_redisplay() in the underlying library.
The following functions operate on a history file:
Load a readline history file, and append it to the history list.
The default filename is ~/.history.  This calls
read_history() in the underlying library.
Save the history list to a readline history file, overwriting any
existing file.  The default filename is ~/.history.  This calls
write_history() in the underlying library.
Append the last nelements items of history to a file.  The default filename is
~/.history.  The file must already exist.  This calls
append_history() in the underlying library.  This function
only exists if Python was compiled for a version of the library
that supports it.
New in version 3.5.
Set or return the desired number of lines to save in the history file.
The write_history_file() function uses this value to truncate
the history file, by calling history_truncate_file() in
the underlying library.  Negative values imply
unlimited history file size.
The following functions operate on a global history list:
Clear the current history.  This calls clear_history() in the
underlying library.  The Python function only exists if Python was
compiled for a version of the library that supports it.
Return the number of items currently in the history.  (This is different from
get_history_length(), which returns the maximum number of lines that will
be written to a history file.)
Return the current contents of history item at index.  The item index
is one-based.  This calls history_get() in the underlying library.
Remove history item specified by its position from the history.
The position is zero-based.  This calls remove_history() in
the underlying library.
Replace history item specified by its position with line.
The position is zero-based.  This calls replace_history_entry()
in the underlying library.
Append line to the history buffer, as if it was the last line typed.
This calls add_history() in the underlying library.
Set or remove the function invoked by the rl_startup_hook
callback of the underlying library.  If function is specified, it will
be used as the new hook function; if omitted or None, any function
already installed is removed.  The hook is called with no
arguments just before readline prints the first prompt.
Set or remove the function invoked by the rl_pre_input_hook
callback of the underlying library.  If function is specified, it will
be used as the new hook function; if omitted or None, any
function already installed is removed.  The hook is called
with no arguments after the first prompt has been printed and just before
readline starts reading input characters.  This function only exists
if Python was compiled for a version of the library that supports it.
The following functions relate to implementing a custom word completion
function.  This is typically operated by the Tab key, and can suggest and
automatically complete a word being typed.  By default, Readline is set up
to be used by rlcompleter to complete Python identifiers for
the interactive interpreter.  If the readline module is to be used
with a custom completer, a different set of word delimiters should be set.
Set or remove the completer function.  If function is specified, it will be
used as the new completer function; if omitted or None, any completer
function already installed is removed.  The completer function is called as
function(text, state), for state in 0, 1, 2, ..., until it
returns a non-string value.  It should return the next possible completion
starting with text.
The installed completer function is invoked by the entry_func callback
passed to rl_completion_matches() in the underlying library.
The text string comes from the first parameter to the
rl_attempted_completion_function callback of the
underlying library.
Get the completer function, or None if no completer function has been set.
Get the type of completion being attempted.  This returns the
rl_completion_type variable in the underlying library as
an integer.
Get the beginning or ending index of the completion scope.
These indexes are the start and end arguments passed to the
rl_attempted_completion_function callback of the
underlying library.
Set or get the word delimiters for completion.  These determine the
start of the word to be considered for completion (the completion scope).
These functions access the rl_completer_word_break_characters
variable in the underlying library.
Set or remove the completion display function.  If function is
specified, it will be used as the new completion display function;
if omitted or None, any completion display function already
installed is removed.  This sets or clears the
rl_completion_display_matches_hook callback in the
underlying library.  The completion display function is called as
function(substitution, [matches], longest_match_length) once
each time matches need to be displayed.
The following example demonstrates how to use the readline module’s
history reading and writing functions to automatically load and save a history
file named .python_history from the user’s home directory.  The code
below would normally be executed automatically during interactive sessions
from the user’s PYTHONSTARTUP file.
This code is actually automatically run when Python is run in
interactive mode (see Readline configuration).
The following example achieves the same goal but supports concurrent interactive
sessions, by only appending the new history.
The following example extends the code.InteractiveConsole class to
support history save/restore.
6.6. stringprep — Internet String Preparation
6.8. rlcompleter — Completion function for GNU readline

    Enter search terms or a module, class or function name.
    

